
RTOS-WIFI-WINC1500-get-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a978  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a978  0040a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040a980  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c684  204009d0  0040b350  000209d0  2**2
                  ALLOC
  4 .stack        00002004  2040d054  004179d4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040f058  004199d8  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00035409  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006b59  00000000  00000000  00055e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000124b5  00000000  00000000  0005c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000014f0  00000000  00000000  0006ee6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001838  00000000  00000000  0007035e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001067e  00000000  00000000  00071b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c7e1  00000000  00000000  00082214  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a463  00000000  00000000  0009e9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000045f8  00000000  00000000  00138e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 f0 40 20 95 58 40 00 93 58 40 00 93 58 40 00     X.@ .X@..X@..X@.
  400010:	93 58 40 00 93 58 40 00 93 58 40 00 00 00 00 00     .X@..X@..X@.....
	...
  40002c:	99 05 40 00 93 58 40 00 00 00 00 00 39 06 40 00     ..@..X@.....9.@.
  40003c:	a1 06 40 00 93 58 40 00 93 58 40 00 93 58 40 00     ..@..X@..X@..X@.
  40004c:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  40005c:	93 58 40 00 93 58 40 00 00 00 00 00 ad 53 40 00     .X@..X@......S@.
  40006c:	c1 53 40 00 d5 53 40 00 93 58 40 00 93 58 40 00     .S@..S@..X@..X@.
  40007c:	93 58 40 00 e9 53 40 00 fd 53 40 00 93 58 40 00     .X@..S@..S@..X@.
  40008c:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  40009c:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  4000ac:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  4000bc:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  4000cc:	93 58 40 00 00 00 00 00 93 58 40 00 00 00 00 00     .X@......X@.....
  4000dc:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  4000ec:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  4000fc:	93 58 40 00 93 58 40 00 93 58 40 00 93 58 40 00     .X@..X@..X@..X@.
  40010c:	93 58 40 00 93 58 40 00 00 00 00 00 00 00 00 00     .X@..X@.........
  40011c:	00 00 00 00 93 58 40 00 93 58 40 00 93 58 40 00     .....X@..X@..X@.
  40012c:	93 58 40 00 93 58 40 00 00 00 00 00 93 58 40 00     .X@..X@......X@.
  40013c:	93 58 40 00                                         .X@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040a980 	.word	0x0040a980

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a980 	.word	0x0040a980
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040a980 	.word	0x0040a980
  4001a8:	00000000 	.word	0x00000000

004001ac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ae:	b083      	sub	sp, #12
  4001b0:	4605      	mov	r5, r0
  4001b2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001b4:	2300      	movs	r3, #0
  4001b6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001b8:	4b2a      	ldr	r3, [pc, #168]	; (400264 <usart_serial_getchar+0xb8>)
  4001ba:	4298      	cmp	r0, r3
  4001bc:	d013      	beq.n	4001e6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001be:	4b2a      	ldr	r3, [pc, #168]	; (400268 <usart_serial_getchar+0xbc>)
  4001c0:	4298      	cmp	r0, r3
  4001c2:	d018      	beq.n	4001f6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4001c4:	4b29      	ldr	r3, [pc, #164]	; (40026c <usart_serial_getchar+0xc0>)
  4001c6:	4298      	cmp	r0, r3
  4001c8:	d01d      	beq.n	400206 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4001ca:	4b29      	ldr	r3, [pc, #164]	; (400270 <usart_serial_getchar+0xc4>)
  4001cc:	429d      	cmp	r5, r3
  4001ce:	d022      	beq.n	400216 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001d0:	4b28      	ldr	r3, [pc, #160]	; (400274 <usart_serial_getchar+0xc8>)
  4001d2:	429d      	cmp	r5, r3
  4001d4:	d027      	beq.n	400226 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001d6:	4b28      	ldr	r3, [pc, #160]	; (400278 <usart_serial_getchar+0xcc>)
  4001d8:	429d      	cmp	r5, r3
  4001da:	d02e      	beq.n	40023a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4001dc:	4b27      	ldr	r3, [pc, #156]	; (40027c <usart_serial_getchar+0xd0>)
  4001de:	429d      	cmp	r5, r3
  4001e0:	d035      	beq.n	40024e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4001e2:	b003      	add	sp, #12
  4001e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4001e6:	461f      	mov	r7, r3
  4001e8:	4e25      	ldr	r6, [pc, #148]	; (400280 <usart_serial_getchar+0xd4>)
  4001ea:	4621      	mov	r1, r4
  4001ec:	4638      	mov	r0, r7
  4001ee:	47b0      	blx	r6
  4001f0:	2800      	cmp	r0, #0
  4001f2:	d1fa      	bne.n	4001ea <usart_serial_getchar+0x3e>
  4001f4:	e7e9      	b.n	4001ca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4001f6:	461f      	mov	r7, r3
  4001f8:	4e21      	ldr	r6, [pc, #132]	; (400280 <usart_serial_getchar+0xd4>)
  4001fa:	4621      	mov	r1, r4
  4001fc:	4638      	mov	r0, r7
  4001fe:	47b0      	blx	r6
  400200:	2800      	cmp	r0, #0
  400202:	d1fa      	bne.n	4001fa <usart_serial_getchar+0x4e>
  400204:	e7e4      	b.n	4001d0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400206:	461f      	mov	r7, r3
  400208:	4e1d      	ldr	r6, [pc, #116]	; (400280 <usart_serial_getchar+0xd4>)
  40020a:	4621      	mov	r1, r4
  40020c:	4638      	mov	r0, r7
  40020e:	47b0      	blx	r6
  400210:	2800      	cmp	r0, #0
  400212:	d1fa      	bne.n	40020a <usart_serial_getchar+0x5e>
  400214:	e7df      	b.n	4001d6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400216:	461f      	mov	r7, r3
  400218:	4e19      	ldr	r6, [pc, #100]	; (400280 <usart_serial_getchar+0xd4>)
  40021a:	4621      	mov	r1, r4
  40021c:	4638      	mov	r0, r7
  40021e:	47b0      	blx	r6
  400220:	2800      	cmp	r0, #0
  400222:	d1fa      	bne.n	40021a <usart_serial_getchar+0x6e>
  400224:	e7da      	b.n	4001dc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400226:	461e      	mov	r6, r3
  400228:	4d16      	ldr	r5, [pc, #88]	; (400284 <usart_serial_getchar+0xd8>)
  40022a:	a901      	add	r1, sp, #4
  40022c:	4630      	mov	r0, r6
  40022e:	47a8      	blx	r5
  400230:	2800      	cmp	r0, #0
  400232:	d1fa      	bne.n	40022a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400234:	9b01      	ldr	r3, [sp, #4]
  400236:	7023      	strb	r3, [r4, #0]
  400238:	e7d3      	b.n	4001e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40023a:	461e      	mov	r6, r3
  40023c:	4d11      	ldr	r5, [pc, #68]	; (400284 <usart_serial_getchar+0xd8>)
  40023e:	a901      	add	r1, sp, #4
  400240:	4630      	mov	r0, r6
  400242:	47a8      	blx	r5
  400244:	2800      	cmp	r0, #0
  400246:	d1fa      	bne.n	40023e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e7c9      	b.n	4001e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40024e:	461e      	mov	r6, r3
  400250:	4d0c      	ldr	r5, [pc, #48]	; (400284 <usart_serial_getchar+0xd8>)
  400252:	a901      	add	r1, sp, #4
  400254:	4630      	mov	r0, r6
  400256:	47a8      	blx	r5
  400258:	2800      	cmp	r0, #0
  40025a:	d1fa      	bne.n	400252 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40025c:	9b01      	ldr	r3, [sp, #4]
  40025e:	7023      	strb	r3, [r4, #0]
}
  400260:	e7bf      	b.n	4001e2 <usart_serial_getchar+0x36>
  400262:	bf00      	nop
  400264:	400e0800 	.word	0x400e0800
  400268:	400e0a00 	.word	0x400e0a00
  40026c:	400e1a00 	.word	0x400e1a00
  400270:	400e1c00 	.word	0x400e1c00
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000
  40027c:	4002c000 	.word	0x4002c000
  400280:	0040576d 	.word	0x0040576d
  400284:	0040587b 	.word	0x0040587b

00400288 <usart_serial_putchar>:
{
  400288:	b570      	push	{r4, r5, r6, lr}
  40028a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40028c:	4b2a      	ldr	r3, [pc, #168]	; (400338 <usart_serial_putchar+0xb0>)
  40028e:	4298      	cmp	r0, r3
  400290:	d013      	beq.n	4002ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400292:	4b2a      	ldr	r3, [pc, #168]	; (40033c <usart_serial_putchar+0xb4>)
  400294:	4298      	cmp	r0, r3
  400296:	d019      	beq.n	4002cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400298:	4b29      	ldr	r3, [pc, #164]	; (400340 <usart_serial_putchar+0xb8>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d01f      	beq.n	4002de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40029e:	4b29      	ldr	r3, [pc, #164]	; (400344 <usart_serial_putchar+0xbc>)
  4002a0:	4298      	cmp	r0, r3
  4002a2:	d025      	beq.n	4002f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4002a4:	4b28      	ldr	r3, [pc, #160]	; (400348 <usart_serial_putchar+0xc0>)
  4002a6:	4298      	cmp	r0, r3
  4002a8:	d02b      	beq.n	400302 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4002aa:	4b28      	ldr	r3, [pc, #160]	; (40034c <usart_serial_putchar+0xc4>)
  4002ac:	4298      	cmp	r0, r3
  4002ae:	d031      	beq.n	400314 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4002b0:	4b27      	ldr	r3, [pc, #156]	; (400350 <usart_serial_putchar+0xc8>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d037      	beq.n	400326 <usart_serial_putchar+0x9e>
	return 0;
  4002b6:	2000      	movs	r0, #0
}
  4002b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002ba:	461e      	mov	r6, r3
  4002bc:	4d25      	ldr	r5, [pc, #148]	; (400354 <usart_serial_putchar+0xcc>)
  4002be:	4621      	mov	r1, r4
  4002c0:	4630      	mov	r0, r6
  4002c2:	47a8      	blx	r5
  4002c4:	2800      	cmp	r0, #0
  4002c6:	d1fa      	bne.n	4002be <usart_serial_putchar+0x36>
		return 1;
  4002c8:	2001      	movs	r0, #1
  4002ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002cc:	461e      	mov	r6, r3
  4002ce:	4d21      	ldr	r5, [pc, #132]	; (400354 <usart_serial_putchar+0xcc>)
  4002d0:	4621      	mov	r1, r4
  4002d2:	4630      	mov	r0, r6
  4002d4:	47a8      	blx	r5
  4002d6:	2800      	cmp	r0, #0
  4002d8:	d1fa      	bne.n	4002d0 <usart_serial_putchar+0x48>
		return 1;
  4002da:	2001      	movs	r0, #1
  4002dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002de:	461e      	mov	r6, r3
  4002e0:	4d1c      	ldr	r5, [pc, #112]	; (400354 <usart_serial_putchar+0xcc>)
  4002e2:	4621      	mov	r1, r4
  4002e4:	4630      	mov	r0, r6
  4002e6:	47a8      	blx	r5
  4002e8:	2800      	cmp	r0, #0
  4002ea:	d1fa      	bne.n	4002e2 <usart_serial_putchar+0x5a>
		return 1;
  4002ec:	2001      	movs	r0, #1
  4002ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f0:	461e      	mov	r6, r3
  4002f2:	4d18      	ldr	r5, [pc, #96]	; (400354 <usart_serial_putchar+0xcc>)
  4002f4:	4621      	mov	r1, r4
  4002f6:	4630      	mov	r0, r6
  4002f8:	47a8      	blx	r5
  4002fa:	2800      	cmp	r0, #0
  4002fc:	d1fa      	bne.n	4002f4 <usart_serial_putchar+0x6c>
		return 1;
  4002fe:	2001      	movs	r0, #1
  400300:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400302:	461e      	mov	r6, r3
  400304:	4d14      	ldr	r5, [pc, #80]	; (400358 <usart_serial_putchar+0xd0>)
  400306:	4621      	mov	r1, r4
  400308:	4630      	mov	r0, r6
  40030a:	47a8      	blx	r5
  40030c:	2800      	cmp	r0, #0
  40030e:	d1fa      	bne.n	400306 <usart_serial_putchar+0x7e>
		return 1;
  400310:	2001      	movs	r0, #1
  400312:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400314:	461e      	mov	r6, r3
  400316:	4d10      	ldr	r5, [pc, #64]	; (400358 <usart_serial_putchar+0xd0>)
  400318:	4621      	mov	r1, r4
  40031a:	4630      	mov	r0, r6
  40031c:	47a8      	blx	r5
  40031e:	2800      	cmp	r0, #0
  400320:	d1fa      	bne.n	400318 <usart_serial_putchar+0x90>
		return 1;
  400322:	2001      	movs	r0, #1
  400324:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400326:	461e      	mov	r6, r3
  400328:	4d0b      	ldr	r5, [pc, #44]	; (400358 <usart_serial_putchar+0xd0>)
  40032a:	4621      	mov	r1, r4
  40032c:	4630      	mov	r0, r6
  40032e:	47a8      	blx	r5
  400330:	2800      	cmp	r0, #0
  400332:	d1fa      	bne.n	40032a <usart_serial_putchar+0xa2>
		return 1;
  400334:	2001      	movs	r0, #1
  400336:	bd70      	pop	{r4, r5, r6, pc}
  400338:	400e0800 	.word	0x400e0800
  40033c:	400e0a00 	.word	0x400e0a00
  400340:	400e1a00 	.word	0x400e1a00
  400344:	400e1c00 	.word	0x400e1c00
  400348:	40024000 	.word	0x40024000
  40034c:	40028000 	.word	0x40028000
  400350:	4002c000 	.word	0x4002c000
  400354:	0040575b 	.word	0x0040575b
  400358:	00405865 	.word	0x00405865

0040035c <configure_console>:

/**
* \brief Configure UART console.
*/
void configure_console(void)
{
  40035c:	b570      	push	{r4, r5, r6, lr}
  40035e:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400360:	200e      	movs	r0, #14
  400362:	4e17      	ldr	r6, [pc, #92]	; (4003c0 <configure_console+0x64>)
  400364:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400366:	4d17      	ldr	r5, [pc, #92]	; (4003c4 <configure_console+0x68>)
  400368:	4b17      	ldr	r3, [pc, #92]	; (4003c8 <configure_console+0x6c>)
  40036a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40036c:	4a17      	ldr	r2, [pc, #92]	; (4003cc <configure_console+0x70>)
  40036e:	4b18      	ldr	r3, [pc, #96]	; (4003d0 <configure_console+0x74>)
  400370:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400372:	4a18      	ldr	r2, [pc, #96]	; (4003d4 <configure_console+0x78>)
  400374:	4b18      	ldr	r3, [pc, #96]	; (4003d8 <configure_console+0x7c>)
  400376:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400378:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40037c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40037e:	23c0      	movs	r3, #192	; 0xc0
  400380:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400386:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  400388:	2400      	movs	r4, #0
  40038a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40038c:	9404      	str	r4, [sp, #16]
  40038e:	200e      	movs	r0, #14
  400390:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400392:	4a12      	ldr	r2, [pc, #72]	; (4003dc <configure_console+0x80>)
  400394:	4669      	mov	r1, sp
  400396:	4628      	mov	r0, r5
  400398:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <configure_console+0x84>)
  40039a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40039c:	4628      	mov	r0, r5
  40039e:	4b11      	ldr	r3, [pc, #68]	; (4003e4 <configure_console+0x88>)
  4003a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4003a2:	4628      	mov	r0, r5
  4003a4:	4b10      	ldr	r3, [pc, #64]	; (4003e8 <configure_console+0x8c>)
  4003a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003a8:	4e10      	ldr	r6, [pc, #64]	; (4003ec <configure_console+0x90>)
  4003aa:	6833      	ldr	r3, [r6, #0]
  4003ac:	4621      	mov	r1, r4
  4003ae:	6898      	ldr	r0, [r3, #8]
  4003b0:	4d0f      	ldr	r5, [pc, #60]	; (4003f0 <configure_console+0x94>)
  4003b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4003b4:	6833      	ldr	r3, [r6, #0]
  4003b6:	4621      	mov	r1, r4
  4003b8:	6858      	ldr	r0, [r3, #4]
  4003ba:	47a8      	blx	r5
  };

  /* Configure UART console. */
  sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  stdio_serial_init(CONF_UART, &uart_serial_options);
}
  4003bc:	b006      	add	sp, #24
  4003be:	bd70      	pop	{r4, r5, r6, pc}
  4003c0:	004055b5 	.word	0x004055b5
  4003c4:	40028000 	.word	0x40028000
  4003c8:	2040d01c 	.word	0x2040d01c
  4003cc:	00400289 	.word	0x00400289
  4003d0:	2040d018 	.word	0x2040d018
  4003d4:	004001ad 	.word	0x004001ad
  4003d8:	2040d014 	.word	0x2040d014
  4003dc:	08f0d180 	.word	0x08f0d180
  4003e0:	00405805 	.word	0x00405805
  4003e4:	00405859 	.word	0x00405859
  4003e8:	0040585f 	.word	0x0040585f
  4003ec:	20400024 	.word	0x20400024
  4003f0:	004064d5 	.word	0x004064d5

004003f4 <inet_aton>:
* This replaces inet_addr, the return value from which
* cannot distinguish between failure and a local broadcast address.
* http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/libfree/inet_aton.c
*/
int inet_aton(const char *cp, in_addr *ap)
{
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	3801      	subs	r0, #1
  int dots = 0;
  register u_long acc = 0, addr = 0;
  4003f8:	2400      	movs	r4, #0
  4003fa:	4622      	mov	r2, r4
  int dots = 0;
  4003fc:	4625      	mov	r5, r4
      case '\0':
      if (acc > 255) {
        return 0;
      }
      addr = addr << 8 | acc;
      acc = 0;
  4003fe:	4626      	mov	r6, r4
  400400:	e011      	b.n	400426 <inet_aton+0x32>
    switch (cc) {
  400402:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  400406:	2f09      	cmp	r7, #9
  400408:	d814      	bhi.n	400434 <inet_aton+0x40>
      acc = acc * 10 + (cc - '0');
  40040a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40040e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
      break;
  400412:	e007      	b.n	400424 <inet_aton+0x30>
      if (++dots > 3) {
  400414:	3501      	adds	r5, #1
  400416:	2d03      	cmp	r5, #3
  400418:	dc24      	bgt.n	400464 <inet_aton+0x70>
      if (acc > 255) {
  40041a:	2aff      	cmp	r2, #255	; 0xff
  40041c:	d824      	bhi.n	400468 <inet_aton+0x74>
      addr = addr << 8 | acc;
  40041e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
      acc = 0;
  400422:	4632      	mov	r2, r6
      break;

      default:
      return 0;
    }
  } while (*cp++) ;
  400424:	b14b      	cbz	r3, 40043a <inet_aton+0x46>
    register char cc = *cp;
  400426:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    switch (cc) {
  40042a:	2b2e      	cmp	r3, #46	; 0x2e
  40042c:	d0f2      	beq.n	400414 <inet_aton+0x20>
  40042e:	d8e8      	bhi.n	400402 <inet_aton+0xe>
  400430:	2b00      	cmp	r3, #0
  400432:	d0f2      	beq.n	40041a <inet_aton+0x26>
      return 0;
  400434:	2000      	movs	r0, #0
  if (ap) {
    ap->s_addr = _htonl(addr);
  }

  return 1;
  400436:	bcf0      	pop	{r4, r5, r6, r7}
  400438:	4770      	bx	lr
  if (dots < 3) {
  40043a:	2d02      	cmp	r5, #2
  40043c:	dc03      	bgt.n	400446 <inet_aton+0x52>
    addr <<= 8 * (3 - dots) ;
  40043e:	f1c5 0303 	rsb	r3, r5, #3
  400442:	00db      	lsls	r3, r3, #3
  400444:	409c      	lsls	r4, r3
  if (ap) {
  400446:	b189      	cbz	r1, 40046c <inet_aton+0x78>
    ap->s_addr = _htonl(addr);
  400448:	0e23      	lsrs	r3, r4, #24
  40044a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40044e:	0222      	lsls	r2, r4, #8
  400450:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  400454:	431a      	orrs	r2, r3
  400456:	0a23      	lsrs	r3, r4, #8
  400458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40045c:	4313      	orrs	r3, r2
  40045e:	600b      	str	r3, [r1, #0]
  return 1;
  400460:	2001      	movs	r0, #1
  400462:	e7e8      	b.n	400436 <inet_aton+0x42>
        return 0;
  400464:	2000      	movs	r0, #0
  400466:	e7e6      	b.n	400436 <inet_aton+0x42>
        return 0;
  400468:	2000      	movs	r0, #0
  40046a:	e7e4      	b.n	400436 <inet_aton+0x42>
  return 1;
  40046c:	2001      	movs	r0, #1
  40046e:	e7e2      	b.n	400436 <inet_aton+0x42>

00400470 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400470:	f100 0308 	add.w	r3, r0, #8
  400474:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400476:	f04f 32ff 	mov.w	r2, #4294967295
  40047a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40047c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40047e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400480:	2300      	movs	r3, #0
  400482:	6003      	str	r3, [r0, #0]
  400484:	4770      	bx	lr

00400486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400486:	2300      	movs	r3, #0
  400488:	6103      	str	r3, [r0, #16]
  40048a:	4770      	bx	lr

0040048c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40048c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40048e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400490:	689a      	ldr	r2, [r3, #8]
  400492:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400494:	689a      	ldr	r2, [r3, #8]
  400496:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400498:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40049a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40049c:	6803      	ldr	r3, [r0, #0]
  40049e:	3301      	adds	r3, #1
  4004a0:	6003      	str	r3, [r0, #0]
  4004a2:	4770      	bx	lr

004004a4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4004a4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4004a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4004a8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4004ac:	d002      	beq.n	4004b4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004ae:	f100 0208 	add.w	r2, r0, #8
  4004b2:	e002      	b.n	4004ba <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4004b4:	6902      	ldr	r2, [r0, #16]
  4004b6:	e004      	b.n	4004c2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004b8:	461a      	mov	r2, r3
  4004ba:	6853      	ldr	r3, [r2, #4]
  4004bc:	681c      	ldr	r4, [r3, #0]
  4004be:	42a5      	cmp	r5, r4
  4004c0:	d2fa      	bcs.n	4004b8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4004c2:	6853      	ldr	r3, [r2, #4]
  4004c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4004c6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4004c8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4004ca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4004cc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4004ce:	6803      	ldr	r3, [r0, #0]
  4004d0:	3301      	adds	r3, #1
  4004d2:	6003      	str	r3, [r0, #0]
}
  4004d4:	bc30      	pop	{r4, r5}
  4004d6:	4770      	bx	lr

004004d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4004d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4004da:	6842      	ldr	r2, [r0, #4]
  4004dc:	6881      	ldr	r1, [r0, #8]
  4004de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4004e0:	6882      	ldr	r2, [r0, #8]
  4004e2:	6841      	ldr	r1, [r0, #4]
  4004e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4004e6:	685a      	ldr	r2, [r3, #4]
  4004e8:	4290      	cmp	r0, r2
  4004ea:	d005      	beq.n	4004f8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4004ec:	2200      	movs	r2, #0
  4004ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4004f0:	6818      	ldr	r0, [r3, #0]
  4004f2:	3801      	subs	r0, #1
  4004f4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4004f6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4004f8:	6882      	ldr	r2, [r0, #8]
  4004fa:	605a      	str	r2, [r3, #4]
  4004fc:	e7f6      	b.n	4004ec <uxListRemove+0x14>
	...

00400500 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400500:	4b0d      	ldr	r3, [pc, #52]	; (400538 <prvTaskExitError+0x38>)
  400502:	681b      	ldr	r3, [r3, #0]
  400504:	f1b3 3fff 	cmp.w	r3, #4294967295
  400508:	d00a      	beq.n	400520 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40050a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050e:	b672      	cpsid	i
  400510:	f383 8811 	msr	BASEPRI, r3
  400514:	f3bf 8f6f 	isb	sy
  400518:	f3bf 8f4f 	dsb	sy
  40051c:	b662      	cpsie	i
  40051e:	e7fe      	b.n	40051e <prvTaskExitError+0x1e>
  400520:	f04f 0380 	mov.w	r3, #128	; 0x80
  400524:	b672      	cpsid	i
  400526:	f383 8811 	msr	BASEPRI, r3
  40052a:	f3bf 8f6f 	isb	sy
  40052e:	f3bf 8f4f 	dsb	sy
  400532:	b662      	cpsie	i
  400534:	e7fe      	b.n	400534 <prvTaskExitError+0x34>
  400536:	bf00      	nop
  400538:	2040000c 	.word	0x2040000c

0040053c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40053c:	4806      	ldr	r0, [pc, #24]	; (400558 <prvPortStartFirstTask+0x1c>)
  40053e:	6800      	ldr	r0, [r0, #0]
  400540:	6800      	ldr	r0, [r0, #0]
  400542:	f380 8808 	msr	MSP, r0
  400546:	b662      	cpsie	i
  400548:	b661      	cpsie	f
  40054a:	f3bf 8f4f 	dsb	sy
  40054e:	f3bf 8f6f 	isb	sy
  400552:	df00      	svc	0
  400554:	bf00      	nop
  400556:	0000      	.short	0x0000
  400558:	e000ed08 	.word	0xe000ed08

0040055c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40055c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40056c <vPortEnableVFP+0x10>
  400560:	6801      	ldr	r1, [r0, #0]
  400562:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400566:	6001      	str	r1, [r0, #0]
  400568:	4770      	bx	lr
  40056a:	0000      	.short	0x0000
  40056c:	e000ed88 	.word	0xe000ed88

00400570 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400574:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400578:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <pxPortInitialiseStack+0x24>)
  40057e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400582:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400586:	f06f 0302 	mvn.w	r3, #2
  40058a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40058e:	3844      	subs	r0, #68	; 0x44
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	00400501 	.word	0x00400501

00400598 <SVC_Handler>:
	__asm volatile (
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <pxCurrentTCBConst2>)
  40059a:	6819      	ldr	r1, [r3, #0]
  40059c:	6808      	ldr	r0, [r1, #0]
  40059e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005a2:	f380 8809 	msr	PSP, r0
  4005a6:	f3bf 8f6f 	isb	sy
  4005aa:	f04f 0000 	mov.w	r0, #0
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr

004005b4 <pxCurrentTCBConst2>:
  4005b4:	2040c1fc 	.word	0x2040c1fc
  4005b8:	4770      	bx	lr
  4005ba:	bf00      	nop

004005bc <vPortEnterCritical>:
  4005bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005c0:	b672      	cpsid	i
  4005c2:	f383 8811 	msr	BASEPRI, r3
  4005c6:	f3bf 8f6f 	isb	sy
  4005ca:	f3bf 8f4f 	dsb	sy
  4005ce:	b662      	cpsie	i
	uxCriticalNesting++;
  4005d0:	4a0b      	ldr	r2, [pc, #44]	; (400600 <vPortEnterCritical+0x44>)
  4005d2:	6813      	ldr	r3, [r2, #0]
  4005d4:	3301      	adds	r3, #1
  4005d6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4005d8:	2b01      	cmp	r3, #1
  4005da:	d10f      	bne.n	4005fc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4005dc:	4b09      	ldr	r3, [pc, #36]	; (400604 <vPortEnterCritical+0x48>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005e4:	d00a      	beq.n	4005fc <vPortEnterCritical+0x40>
  4005e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005ea:	b672      	cpsid	i
  4005ec:	f383 8811 	msr	BASEPRI, r3
  4005f0:	f3bf 8f6f 	isb	sy
  4005f4:	f3bf 8f4f 	dsb	sy
  4005f8:	b662      	cpsie	i
  4005fa:	e7fe      	b.n	4005fa <vPortEnterCritical+0x3e>
  4005fc:	4770      	bx	lr
  4005fe:	bf00      	nop
  400600:	2040000c 	.word	0x2040000c
  400604:	e000ed04 	.word	0xe000ed04

00400608 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400608:	4b0a      	ldr	r3, [pc, #40]	; (400634 <vPortExitCritical+0x2c>)
  40060a:	681b      	ldr	r3, [r3, #0]
  40060c:	b953      	cbnz	r3, 400624 <vPortExitCritical+0x1c>
  40060e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400612:	b672      	cpsid	i
  400614:	f383 8811 	msr	BASEPRI, r3
  400618:	f3bf 8f6f 	isb	sy
  40061c:	f3bf 8f4f 	dsb	sy
  400620:	b662      	cpsie	i
  400622:	e7fe      	b.n	400622 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400624:	3b01      	subs	r3, #1
  400626:	4a03      	ldr	r2, [pc, #12]	; (400634 <vPortExitCritical+0x2c>)
  400628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40062a:	b90b      	cbnz	r3, 400630 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40062c:	f383 8811 	msr	BASEPRI, r3
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	2040000c 	.word	0x2040000c

00400638 <PendSV_Handler>:
	__asm volatile
  400638:	f3ef 8009 	mrs	r0, PSP
  40063c:	f3bf 8f6f 	isb	sy
  400640:	4b15      	ldr	r3, [pc, #84]	; (400698 <pxCurrentTCBConst>)
  400642:	681a      	ldr	r2, [r3, #0]
  400644:	f01e 0f10 	tst.w	lr, #16
  400648:	bf08      	it	eq
  40064a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40064e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400652:	6010      	str	r0, [r2, #0]
  400654:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400658:	f04f 0080 	mov.w	r0, #128	; 0x80
  40065c:	b672      	cpsid	i
  40065e:	f380 8811 	msr	BASEPRI, r0
  400662:	f3bf 8f4f 	dsb	sy
  400666:	f3bf 8f6f 	isb	sy
  40066a:	b662      	cpsie	i
  40066c:	f001 f94a 	bl	401904 <vTaskSwitchContext>
  400670:	f04f 0000 	mov.w	r0, #0
  400674:	f380 8811 	msr	BASEPRI, r0
  400678:	bc08      	pop	{r3}
  40067a:	6819      	ldr	r1, [r3, #0]
  40067c:	6808      	ldr	r0, [r1, #0]
  40067e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400682:	f01e 0f10 	tst.w	lr, #16
  400686:	bf08      	it	eq
  400688:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40068c:	f380 8809 	msr	PSP, r0
  400690:	f3bf 8f6f 	isb	sy
  400694:	4770      	bx	lr
  400696:	bf00      	nop

00400698 <pxCurrentTCBConst>:
  400698:	2040c1fc 	.word	0x2040c1fc
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop

004006a0 <SysTick_Handler>:
{
  4006a0:	b508      	push	{r3, lr}
	__asm volatile
  4006a2:	f3ef 8311 	mrs	r3, BASEPRI
  4006a6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006aa:	b672      	cpsid	i
  4006ac:	f382 8811 	msr	BASEPRI, r2
  4006b0:	f3bf 8f6f 	isb	sy
  4006b4:	f3bf 8f4f 	dsb	sy
  4006b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4006ba:	4b05      	ldr	r3, [pc, #20]	; (4006d0 <SysTick_Handler+0x30>)
  4006bc:	4798      	blx	r3
  4006be:	b118      	cbz	r0, 4006c8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4006c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c4:	4b03      	ldr	r3, [pc, #12]	; (4006d4 <SysTick_Handler+0x34>)
  4006c6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4006c8:	2300      	movs	r3, #0
  4006ca:	f383 8811 	msr	BASEPRI, r3
  4006ce:	bd08      	pop	{r3, pc}
  4006d0:	00401571 	.word	0x00401571
  4006d4:	e000ed04 	.word	0xe000ed04

004006d8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4006d8:	4a03      	ldr	r2, [pc, #12]	; (4006e8 <vPortSetupTimerInterrupt+0x10>)
  4006da:	4b04      	ldr	r3, [pc, #16]	; (4006ec <vPortSetupTimerInterrupt+0x14>)
  4006dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4006de:	2207      	movs	r2, #7
  4006e0:	3b04      	subs	r3, #4
  4006e2:	601a      	str	r2, [r3, #0]
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	000927bf 	.word	0x000927bf
  4006ec:	e000e014 	.word	0xe000e014

004006f0 <xPortStartScheduler>:
{
  4006f0:	b500      	push	{lr}
  4006f2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4006f4:	4b25      	ldr	r3, [pc, #148]	; (40078c <xPortStartScheduler+0x9c>)
  4006f6:	781a      	ldrb	r2, [r3, #0]
  4006f8:	b2d2      	uxtb	r2, r2
  4006fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4006fc:	22ff      	movs	r2, #255	; 0xff
  4006fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400700:	781b      	ldrb	r3, [r3, #0]
  400702:	b2db      	uxtb	r3, r3
  400704:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400708:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400710:	4a1f      	ldr	r2, [pc, #124]	; (400790 <xPortStartScheduler+0xa0>)
  400712:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400714:	2207      	movs	r2, #7
  400716:	4b1f      	ldr	r3, [pc, #124]	; (400794 <xPortStartScheduler+0xa4>)
  400718:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40071a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40071e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400722:	d010      	beq.n	400746 <xPortStartScheduler+0x56>
  400724:	2206      	movs	r2, #6
  400726:	e000      	b.n	40072a <xPortStartScheduler+0x3a>
  400728:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40072a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40072e:	005b      	lsls	r3, r3, #1
  400730:	b2db      	uxtb	r3, r3
  400732:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400736:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40073a:	1e51      	subs	r1, r2, #1
  40073c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400740:	d1f2      	bne.n	400728 <xPortStartScheduler+0x38>
  400742:	4b14      	ldr	r3, [pc, #80]	; (400794 <xPortStartScheduler+0xa4>)
  400744:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400746:	4a13      	ldr	r2, [pc, #76]	; (400794 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400748:	6813      	ldr	r3, [r2, #0]
  40074a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40074c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400750:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400752:	9b01      	ldr	r3, [sp, #4]
  400754:	b2db      	uxtb	r3, r3
  400756:	4a0d      	ldr	r2, [pc, #52]	; (40078c <xPortStartScheduler+0x9c>)
  400758:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <xPortStartScheduler+0xa8>)
  40075c:	681a      	ldr	r2, [r3, #0]
  40075e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400762:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400764:	681a      	ldr	r2, [r3, #0]
  400766:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40076a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40076c:	4b0b      	ldr	r3, [pc, #44]	; (40079c <xPortStartScheduler+0xac>)
  40076e:	4798      	blx	r3
	uxCriticalNesting = 0;
  400770:	2200      	movs	r2, #0
  400772:	4b0b      	ldr	r3, [pc, #44]	; (4007a0 <xPortStartScheduler+0xb0>)
  400774:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400776:	4b0b      	ldr	r3, [pc, #44]	; (4007a4 <xPortStartScheduler+0xb4>)
  400778:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40077a:	4a0b      	ldr	r2, [pc, #44]	; (4007a8 <xPortStartScheduler+0xb8>)
  40077c:	6813      	ldr	r3, [r2, #0]
  40077e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400782:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400784:	4b09      	ldr	r3, [pc, #36]	; (4007ac <xPortStartScheduler+0xbc>)
  400786:	4798      	blx	r3
	prvTaskExitError();
  400788:	4b09      	ldr	r3, [pc, #36]	; (4007b0 <xPortStartScheduler+0xc0>)
  40078a:	4798      	blx	r3
  40078c:	e000e400 	.word	0xe000e400
  400790:	204009ec 	.word	0x204009ec
  400794:	204009f0 	.word	0x204009f0
  400798:	e000ed20 	.word	0xe000ed20
  40079c:	004006d9 	.word	0x004006d9
  4007a0:	2040000c 	.word	0x2040000c
  4007a4:	0040055d 	.word	0x0040055d
  4007a8:	e000ef34 	.word	0xe000ef34
  4007ac:	0040053d 	.word	0x0040053d
  4007b0:	00400501 	.word	0x00400501

004007b4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4007b4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4007b8:	2b0f      	cmp	r3, #15
  4007ba:	d911      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4007bc:	4a12      	ldr	r2, [pc, #72]	; (400808 <vPortValidateInterruptPriority+0x54>)
  4007be:	5c9b      	ldrb	r3, [r3, r2]
  4007c0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4007c2:	4a12      	ldr	r2, [pc, #72]	; (40080c <vPortValidateInterruptPriority+0x58>)
  4007c4:	7812      	ldrb	r2, [r2, #0]
  4007c6:	429a      	cmp	r2, r3
  4007c8:	d90a      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4007ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007ce:	b672      	cpsid	i
  4007d0:	f383 8811 	msr	BASEPRI, r3
  4007d4:	f3bf 8f6f 	isb	sy
  4007d8:	f3bf 8f4f 	dsb	sy
  4007dc:	b662      	cpsie	i
  4007de:	e7fe      	b.n	4007de <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4007e0:	4b0b      	ldr	r3, [pc, #44]	; (400810 <vPortValidateInterruptPriority+0x5c>)
  4007e2:	681b      	ldr	r3, [r3, #0]
  4007e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4007e8:	4a0a      	ldr	r2, [pc, #40]	; (400814 <vPortValidateInterruptPriority+0x60>)
  4007ea:	6812      	ldr	r2, [r2, #0]
  4007ec:	4293      	cmp	r3, r2
  4007ee:	d90a      	bls.n	400806 <vPortValidateInterruptPriority+0x52>
  4007f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007f4:	b672      	cpsid	i
  4007f6:	f383 8811 	msr	BASEPRI, r3
  4007fa:	f3bf 8f6f 	isb	sy
  4007fe:	f3bf 8f4f 	dsb	sy
  400802:	b662      	cpsie	i
  400804:	e7fe      	b.n	400804 <vPortValidateInterruptPriority+0x50>
  400806:	4770      	bx	lr
  400808:	e000e3f0 	.word	0xe000e3f0
  40080c:	204009ec 	.word	0x204009ec
  400810:	e000ed0c 	.word	0xe000ed0c
  400814:	204009f0 	.word	0x204009f0

00400818 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400818:	b538      	push	{r3, r4, r5, lr}
  40081a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40081c:	f010 0f07 	tst.w	r0, #7
  400820:	d002      	beq.n	400828 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400822:	f020 0407 	bic.w	r4, r0, #7
  400826:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400828:	4b11      	ldr	r3, [pc, #68]	; (400870 <pvPortMalloc+0x58>)
  40082a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  40082c:	4b11      	ldr	r3, [pc, #68]	; (400874 <pvPortMalloc+0x5c>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	b193      	cbz	r3, 400858 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400832:	4b11      	ldr	r3, [pc, #68]	; (400878 <pvPortMalloc+0x60>)
  400834:	681b      	ldr	r3, [r3, #0]
  400836:	441c      	add	r4, r3
  400838:	42a3      	cmp	r3, r4
  40083a:	d213      	bcs.n	400864 <pvPortMalloc+0x4c>
  40083c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400840:	4294      	cmp	r4, r2
  400842:	d80f      	bhi.n	400864 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400844:	4a0b      	ldr	r2, [pc, #44]	; (400874 <pvPortMalloc+0x5c>)
  400846:	6815      	ldr	r5, [r2, #0]
  400848:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40084a:	4b0b      	ldr	r3, [pc, #44]	; (400878 <pvPortMalloc+0x60>)
  40084c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40084e:	4b0b      	ldr	r3, [pc, #44]	; (40087c <pvPortMalloc+0x64>)
  400850:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400852:	b14d      	cbz	r5, 400868 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400854:	4628      	mov	r0, r5
  400856:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400858:	4b09      	ldr	r3, [pc, #36]	; (400880 <pvPortMalloc+0x68>)
  40085a:	f023 0307 	bic.w	r3, r3, #7
  40085e:	4a05      	ldr	r2, [pc, #20]	; (400874 <pvPortMalloc+0x5c>)
  400860:	6013      	str	r3, [r2, #0]
  400862:	e7e6      	b.n	400832 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400864:	4b05      	ldr	r3, [pc, #20]	; (40087c <pvPortMalloc+0x64>)
  400866:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400868:	4b06      	ldr	r3, [pc, #24]	; (400884 <pvPortMalloc+0x6c>)
  40086a:	4798      	blx	r3
  40086c:	2500      	movs	r5, #0
	return pvReturn;
  40086e:	e7f1      	b.n	400854 <pvPortMalloc+0x3c>
  400870:	00401555 	.word	0x00401555
  400874:	204009f4 	.word	0x204009f4
  400878:	2040c1f8 	.word	0x2040c1f8
  40087c:	004016bd 	.word	0x004016bd
  400880:	20400a00 	.word	0x20400a00
  400884:	0040612b 	.word	0x0040612b

00400888 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400888:	b150      	cbz	r0, 4008a0 <vPortFree+0x18>
  40088a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40088e:	b672      	cpsid	i
  400890:	f383 8811 	msr	BASEPRI, r3
  400894:	f3bf 8f6f 	isb	sy
  400898:	f3bf 8f4f 	dsb	sy
  40089c:	b662      	cpsie	i
  40089e:	e7fe      	b.n	40089e <vPortFree+0x16>
  4008a0:	4770      	bx	lr
	...

004008a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4008a4:	b538      	push	{r3, r4, r5, lr}
  4008a6:	4604      	mov	r4, r0
  4008a8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4008aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4008ac:	b95a      	cbnz	r2, 4008c6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4008ae:	6803      	ldr	r3, [r0, #0]
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d12e      	bne.n	400912 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4008b4:	6840      	ldr	r0, [r0, #4]
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <prvCopyDataToQueue+0x80>)
  4008b8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4008ba:	2300      	movs	r3, #0
  4008bc:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4008be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4008c0:	3301      	adds	r3, #1
  4008c2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4008c4:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4008c6:	b96d      	cbnz	r5, 4008e4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4008c8:	6880      	ldr	r0, [r0, #8]
  4008ca:	4b17      	ldr	r3, [pc, #92]	; (400928 <prvCopyDataToQueue+0x84>)
  4008cc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4008ce:	68a3      	ldr	r3, [r4, #8]
  4008d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008d2:	4413      	add	r3, r2
  4008d4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008d6:	6862      	ldr	r2, [r4, #4]
  4008d8:	4293      	cmp	r3, r2
  4008da:	d31c      	bcc.n	400916 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008dc:	6823      	ldr	r3, [r4, #0]
  4008de:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4008e0:	2000      	movs	r0, #0
  4008e2:	e7ec      	b.n	4008be <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4008e4:	68c0      	ldr	r0, [r0, #12]
  4008e6:	4b10      	ldr	r3, [pc, #64]	; (400928 <prvCopyDataToQueue+0x84>)
  4008e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4008ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4008ec:	425b      	negs	r3, r3
  4008ee:	68e2      	ldr	r2, [r4, #12]
  4008f0:	441a      	add	r2, r3
  4008f2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008f4:	6821      	ldr	r1, [r4, #0]
  4008f6:	428a      	cmp	r2, r1
  4008f8:	d202      	bcs.n	400900 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4008fa:	6862      	ldr	r2, [r4, #4]
  4008fc:	4413      	add	r3, r2
  4008fe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400900:	2d02      	cmp	r5, #2
  400902:	d10a      	bne.n	40091a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400906:	b153      	cbz	r3, 40091e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40090a:	3b01      	subs	r3, #1
  40090c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40090e:	2000      	movs	r0, #0
  400910:	e7d5      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400912:	2000      	movs	r0, #0
  400914:	e7d3      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400916:	2000      	movs	r0, #0
  400918:	e7d1      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091a:	2000      	movs	r0, #0
  40091c:	e7cf      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091e:	2000      	movs	r0, #0
  400920:	e7cd      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400922:	bf00      	nop
  400924:	00401d05 	.word	0x00401d05
  400928:	00406259 	.word	0x00406259

0040092c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40092c:	b530      	push	{r4, r5, lr}
  40092e:	b083      	sub	sp, #12
  400930:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400932:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400934:	b174      	cbz	r4, 400954 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40093a:	429a      	cmp	r2, r3
  40093c:	d315      	bcc.n	40096a <prvNotifyQueueSetContainer+0x3e>
  40093e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400942:	b672      	cpsid	i
  400944:	f383 8811 	msr	BASEPRI, r3
  400948:	f3bf 8f6f 	isb	sy
  40094c:	f3bf 8f4f 	dsb	sy
  400950:	b662      	cpsie	i
  400952:	e7fe      	b.n	400952 <prvNotifyQueueSetContainer+0x26>
  400954:	f04f 0380 	mov.w	r3, #128	; 0x80
  400958:	b672      	cpsid	i
  40095a:	f383 8811 	msr	BASEPRI, r3
  40095e:	f3bf 8f6f 	isb	sy
  400962:	f3bf 8f4f 	dsb	sy
  400966:	b662      	cpsie	i
  400968:	e7fe      	b.n	400968 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40096a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40096c:	4293      	cmp	r3, r2
  40096e:	d803      	bhi.n	400978 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400970:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400972:	4628      	mov	r0, r5
  400974:	b003      	add	sp, #12
  400976:	bd30      	pop	{r4, r5, pc}
  400978:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40097a:	a901      	add	r1, sp, #4
  40097c:	4620      	mov	r0, r4
  40097e:	4b0b      	ldr	r3, [pc, #44]	; (4009ac <prvNotifyQueueSetContainer+0x80>)
  400980:	4798      	blx	r3
  400982:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400986:	f1b3 3fff 	cmp.w	r3, #4294967295
  40098a:	d10a      	bne.n	4009a2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40098c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40098e:	2b00      	cmp	r3, #0
  400990:	d0ef      	beq.n	400972 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400992:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400996:	4b06      	ldr	r3, [pc, #24]	; (4009b0 <prvNotifyQueueSetContainer+0x84>)
  400998:	4798      	blx	r3
  40099a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40099c:	bf18      	it	ne
  40099e:	2501      	movne	r5, #1
  4009a0:	e7e7      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4009a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009a4:	3301      	adds	r3, #1
  4009a6:	64a3      	str	r3, [r4, #72]	; 0x48
  4009a8:	e7e3      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
  4009aa:	bf00      	nop
  4009ac:	004008a5 	.word	0x004008a5
  4009b0:	00401ad9 	.word	0x00401ad9

004009b4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4009b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009b6:	b172      	cbz	r2, 4009d6 <prvCopyDataFromQueue+0x22>
{
  4009b8:	b510      	push	{r4, lr}
  4009ba:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4009bc:	68c4      	ldr	r4, [r0, #12]
  4009be:	4414      	add	r4, r2
  4009c0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4009c2:	6840      	ldr	r0, [r0, #4]
  4009c4:	4284      	cmp	r4, r0
  4009c6:	d301      	bcc.n	4009cc <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4009c8:	6818      	ldr	r0, [r3, #0]
  4009ca:	60d8      	str	r0, [r3, #12]
  4009cc:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4009ce:	68d9      	ldr	r1, [r3, #12]
  4009d0:	4b01      	ldr	r3, [pc, #4]	; (4009d8 <prvCopyDataFromQueue+0x24>)
  4009d2:	4798      	blx	r3
  4009d4:	bd10      	pop	{r4, pc}
  4009d6:	4770      	bx	lr
  4009d8:	00406259 	.word	0x00406259

004009dc <prvUnlockQueue>:
{
  4009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4009e0:	4b22      	ldr	r3, [pc, #136]	; (400a6c <prvUnlockQueue+0x90>)
  4009e2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4009e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	dd1b      	ble.n	400a22 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4009ea:	4d21      	ldr	r5, [pc, #132]	; (400a70 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4009ec:	4f21      	ldr	r7, [pc, #132]	; (400a74 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ee:	4e22      	ldr	r6, [pc, #136]	; (400a78 <prvUnlockQueue+0x9c>)
  4009f0:	e00b      	b.n	400a0a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4009f4:	b1ab      	cbz	r3, 400a22 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009fa:	47b0      	blx	r6
  4009fc:	b978      	cbnz	r0, 400a1e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4009fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a00:	3b01      	subs	r3, #1
  400a02:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a06:	2b00      	cmp	r3, #0
  400a08:	dd0b      	ble.n	400a22 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f0      	beq.n	4009f2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400a10:	2100      	movs	r1, #0
  400a12:	4620      	mov	r0, r4
  400a14:	47a8      	blx	r5
  400a16:	2801      	cmp	r0, #1
  400a18:	d1f1      	bne.n	4009fe <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400a1a:	47b8      	blx	r7
  400a1c:	e7ef      	b.n	4009fe <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400a1e:	47b8      	blx	r7
  400a20:	e7ed      	b.n	4009fe <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400a22:	f04f 33ff 	mov.w	r3, #4294967295
  400a26:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400a28:	4b14      	ldr	r3, [pc, #80]	; (400a7c <prvUnlockQueue+0xa0>)
  400a2a:	4798      	blx	r3
	taskENTER_CRITICAL();
  400a2c:	4b0f      	ldr	r3, [pc, #60]	; (400a6c <prvUnlockQueue+0x90>)
  400a2e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a32:	2b00      	cmp	r3, #0
  400a34:	dd14      	ble.n	400a60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a36:	6923      	ldr	r3, [r4, #16]
  400a38:	b193      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a3a:	f104 0610 	add.w	r6, r4, #16
  400a3e:	4d0e      	ldr	r5, [pc, #56]	; (400a78 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400a40:	4f0c      	ldr	r7, [pc, #48]	; (400a74 <prvUnlockQueue+0x98>)
  400a42:	e007      	b.n	400a54 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a46:	3b01      	subs	r3, #1
  400a48:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	dd07      	ble.n	400a60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a50:	6923      	ldr	r3, [r4, #16]
  400a52:	b12b      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a54:	4630      	mov	r0, r6
  400a56:	47a8      	blx	r5
  400a58:	2800      	cmp	r0, #0
  400a5a:	d0f3      	beq.n	400a44 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400a5c:	47b8      	blx	r7
  400a5e:	e7f1      	b.n	400a44 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400a60:	f04f 33ff 	mov.w	r3, #4294967295
  400a64:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a66:	4b05      	ldr	r3, [pc, #20]	; (400a7c <prvUnlockQueue+0xa0>)
  400a68:	4798      	blx	r3
  400a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a6c:	004005bd 	.word	0x004005bd
  400a70:	0040092d 	.word	0x0040092d
  400a74:	00401c35 	.word	0x00401c35
  400a78:	00401ad9 	.word	0x00401ad9
  400a7c:	00400609 	.word	0x00400609

00400a80 <xQueueGenericReset>:
{
  400a80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400a82:	b308      	cbz	r0, 400ac8 <xQueueGenericReset+0x48>
  400a84:	4604      	mov	r4, r0
  400a86:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400a88:	4b1d      	ldr	r3, [pc, #116]	; (400b00 <xQueueGenericReset+0x80>)
  400a8a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400a8c:	6822      	ldr	r2, [r4, #0]
  400a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a92:	fb03 f301 	mul.w	r3, r3, r1
  400a96:	18d0      	adds	r0, r2, r3
  400a98:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a9a:	2000      	movs	r0, #0
  400a9c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a9e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400aa0:	1a5b      	subs	r3, r3, r1
  400aa2:	4413      	add	r3, r2
  400aa4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400aa6:	f04f 33ff 	mov.w	r3, #4294967295
  400aaa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400aac:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400aae:	b9fd      	cbnz	r5, 400af0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ab0:	6923      	ldr	r3, [r4, #16]
  400ab2:	b12b      	cbz	r3, 400ac0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400ab4:	f104 0010 	add.w	r0, r4, #16
  400ab8:	4b12      	ldr	r3, [pc, #72]	; (400b04 <xQueueGenericReset+0x84>)
  400aba:	4798      	blx	r3
  400abc:	2801      	cmp	r0, #1
  400abe:	d00e      	beq.n	400ade <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400ac0:	4b11      	ldr	r3, [pc, #68]	; (400b08 <xQueueGenericReset+0x88>)
  400ac2:	4798      	blx	r3
}
  400ac4:	2001      	movs	r0, #1
  400ac6:	bd38      	pop	{r3, r4, r5, pc}
  400ac8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400acc:	b672      	cpsid	i
  400ace:	f383 8811 	msr	BASEPRI, r3
  400ad2:	f3bf 8f6f 	isb	sy
  400ad6:	f3bf 8f4f 	dsb	sy
  400ada:	b662      	cpsie	i
  400adc:	e7fe      	b.n	400adc <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ae2:	4b0a      	ldr	r3, [pc, #40]	; (400b0c <xQueueGenericReset+0x8c>)
  400ae4:	601a      	str	r2, [r3, #0]
  400ae6:	f3bf 8f4f 	dsb	sy
  400aea:	f3bf 8f6f 	isb	sy
  400aee:	e7e7      	b.n	400ac0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400af0:	f104 0010 	add.w	r0, r4, #16
  400af4:	4d06      	ldr	r5, [pc, #24]	; (400b10 <xQueueGenericReset+0x90>)
  400af6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400af8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400afc:	47a8      	blx	r5
  400afe:	e7df      	b.n	400ac0 <xQueueGenericReset+0x40>
  400b00:	004005bd 	.word	0x004005bd
  400b04:	00401ad9 	.word	0x00401ad9
  400b08:	00400609 	.word	0x00400609
  400b0c:	e000ed04 	.word	0xe000ed04
  400b10:	00400471 	.word	0x00400471

00400b14 <xQueueGenericCreate>:
{
  400b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	b950      	cbnz	r0, 400b2e <xQueueGenericCreate+0x1a>
  400b18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b1c:	b672      	cpsid	i
  400b1e:	f383 8811 	msr	BASEPRI, r3
  400b22:	f3bf 8f6f 	isb	sy
  400b26:	f3bf 8f4f 	dsb	sy
  400b2a:	b662      	cpsie	i
  400b2c:	e7fe      	b.n	400b2c <xQueueGenericCreate+0x18>
  400b2e:	4606      	mov	r6, r0
  400b30:	4617      	mov	r7, r2
  400b32:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400b34:	b189      	cbz	r1, 400b5a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400b36:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b3a:	3059      	adds	r0, #89	; 0x59
  400b3c:	4b12      	ldr	r3, [pc, #72]	; (400b88 <xQueueGenericCreate+0x74>)
  400b3e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400b40:	4604      	mov	r4, r0
  400b42:	b9e8      	cbnz	r0, 400b80 <xQueueGenericCreate+0x6c>
  400b44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b48:	b672      	cpsid	i
  400b4a:	f383 8811 	msr	BASEPRI, r3
  400b4e:	f3bf 8f6f 	isb	sy
  400b52:	f3bf 8f4f 	dsb	sy
  400b56:	b662      	cpsie	i
  400b58:	e7fe      	b.n	400b58 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b5a:	2058      	movs	r0, #88	; 0x58
  400b5c:	4b0a      	ldr	r3, [pc, #40]	; (400b88 <xQueueGenericCreate+0x74>)
  400b5e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400b60:	4604      	mov	r4, r0
  400b62:	2800      	cmp	r0, #0
  400b64:	d0ee      	beq.n	400b44 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b66:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400b68:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400b6a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b6c:	2101      	movs	r1, #1
  400b6e:	4620      	mov	r0, r4
  400b70:	4b06      	ldr	r3, [pc, #24]	; (400b8c <xQueueGenericCreate+0x78>)
  400b72:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400b74:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400b78:	2300      	movs	r3, #0
  400b7a:	6563      	str	r3, [r4, #84]	; 0x54
}
  400b7c:	4620      	mov	r0, r4
  400b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400b80:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400b84:	6003      	str	r3, [r0, #0]
  400b86:	e7ef      	b.n	400b68 <xQueueGenericCreate+0x54>
  400b88:	00400819 	.word	0x00400819
  400b8c:	00400a81 	.word	0x00400a81

00400b90 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
  400b90:	b950      	cbnz	r0, 400ba8 <xQueueCreateCountingSemaphore+0x18>
  400b92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b96:	b672      	cpsid	i
  400b98:	f383 8811 	msr	BASEPRI, r3
  400b9c:	f3bf 8f6f 	isb	sy
  400ba0:	f3bf 8f4f 	dsb	sy
  400ba4:	b662      	cpsie	i
  400ba6:	e7fe      	b.n	400ba6 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
  400ba8:	4288      	cmp	r0, r1
  400baa:	d20a      	bcs.n	400bc2 <xQueueCreateCountingSemaphore+0x32>
  400bac:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb0:	b672      	cpsid	i
  400bb2:	f383 8811 	msr	BASEPRI, r3
  400bb6:	f3bf 8f6f 	isb	sy
  400bba:	f3bf 8f4f 	dsb	sy
  400bbe:	b662      	cpsie	i
  400bc0:	e7fe      	b.n	400bc0 <xQueueCreateCountingSemaphore+0x30>
	{
  400bc2:	b510      	push	{r4, lr}
  400bc4:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  400bc6:	2202      	movs	r2, #2
  400bc8:	2100      	movs	r1, #0
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <xQueueCreateCountingSemaphore+0x5c>)
  400bcc:	4798      	blx	r3
		if( xHandle != NULL )
  400bce:	b108      	cbz	r0, 400bd4 <xQueueCreateCountingSemaphore+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
  400bd0:	6384      	str	r4, [r0, #56]	; 0x38
	}
  400bd2:	bd10      	pop	{r4, pc}
  400bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd8:	b672      	cpsid	i
  400bda:	f383 8811 	msr	BASEPRI, r3
  400bde:	f3bf 8f6f 	isb	sy
  400be2:	f3bf 8f4f 	dsb	sy
  400be6:	b662      	cpsie	i
  400be8:	e7fe      	b.n	400be8 <xQueueCreateCountingSemaphore+0x58>
  400bea:	bf00      	nop
  400bec:	00400b15 	.word	0x00400b15

00400bf0 <xQueueGenericSend>:
{
  400bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf4:	b085      	sub	sp, #20
  400bf6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400bf8:	b1b8      	cbz	r0, 400c2a <xQueueGenericSend+0x3a>
  400bfa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bfc:	b301      	cbz	r1, 400c40 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400bfe:	2b02      	cmp	r3, #2
  400c00:	d02c      	beq.n	400c5c <xQueueGenericSend+0x6c>
  400c02:	461d      	mov	r5, r3
  400c04:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400c06:	4b66      	ldr	r3, [pc, #408]	; (400da0 <xQueueGenericSend+0x1b0>)
  400c08:	4798      	blx	r3
  400c0a:	2800      	cmp	r0, #0
  400c0c:	d134      	bne.n	400c78 <xQueueGenericSend+0x88>
  400c0e:	9b01      	ldr	r3, [sp, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d038      	beq.n	400c86 <xQueueGenericSend+0x96>
  400c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c18:	b672      	cpsid	i
  400c1a:	f383 8811 	msr	BASEPRI, r3
  400c1e:	f3bf 8f6f 	isb	sy
  400c22:	f3bf 8f4f 	dsb	sy
  400c26:	b662      	cpsie	i
  400c28:	e7fe      	b.n	400c28 <xQueueGenericSend+0x38>
  400c2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c2e:	b672      	cpsid	i
  400c30:	f383 8811 	msr	BASEPRI, r3
  400c34:	f3bf 8f6f 	isb	sy
  400c38:	f3bf 8f4f 	dsb	sy
  400c3c:	b662      	cpsie	i
  400c3e:	e7fe      	b.n	400c3e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c40:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c42:	2a00      	cmp	r2, #0
  400c44:	d0db      	beq.n	400bfe <xQueueGenericSend+0xe>
  400c46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c4a:	b672      	cpsid	i
  400c4c:	f383 8811 	msr	BASEPRI, r3
  400c50:	f3bf 8f6f 	isb	sy
  400c54:	f3bf 8f4f 	dsb	sy
  400c58:	b662      	cpsie	i
  400c5a:	e7fe      	b.n	400c5a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c5e:	2a01      	cmp	r2, #1
  400c60:	d0cf      	beq.n	400c02 <xQueueGenericSend+0x12>
  400c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c66:	b672      	cpsid	i
  400c68:	f383 8811 	msr	BASEPRI, r3
  400c6c:	f3bf 8f6f 	isb	sy
  400c70:	f3bf 8f4f 	dsb	sy
  400c74:	b662      	cpsie	i
  400c76:	e7fe      	b.n	400c76 <xQueueGenericSend+0x86>
  400c78:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400c7a:	4e4a      	ldr	r6, [pc, #296]	; (400da4 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400c7c:	f8df a150 	ldr.w	sl, [pc, #336]	; 400dd0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400c80:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400db0 <xQueueGenericSend+0x1c0>
  400c84:	e042      	b.n	400d0c <xQueueGenericSend+0x11c>
  400c86:	2700      	movs	r7, #0
  400c88:	e7f7      	b.n	400c7a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c8a:	462a      	mov	r2, r5
  400c8c:	4641      	mov	r1, r8
  400c8e:	4620      	mov	r0, r4
  400c90:	4b45      	ldr	r3, [pc, #276]	; (400da8 <xQueueGenericSend+0x1b8>)
  400c92:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400c96:	b19b      	cbz	r3, 400cc0 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400c98:	4629      	mov	r1, r5
  400c9a:	4620      	mov	r0, r4
  400c9c:	4b43      	ldr	r3, [pc, #268]	; (400dac <xQueueGenericSend+0x1bc>)
  400c9e:	4798      	blx	r3
  400ca0:	2801      	cmp	r0, #1
  400ca2:	d107      	bne.n	400cb4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ca8:	4b41      	ldr	r3, [pc, #260]	; (400db0 <xQueueGenericSend+0x1c0>)
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	f3bf 8f4f 	dsb	sy
  400cb0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400cb4:	4b3f      	ldr	r3, [pc, #252]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cb6:	4798      	blx	r3
				return pdPASS;
  400cb8:	2001      	movs	r0, #1
}
  400cba:	b005      	add	sp, #20
  400cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400cc2:	b173      	cbz	r3, 400ce2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cc8:	4b3b      	ldr	r3, [pc, #236]	; (400db8 <xQueueGenericSend+0x1c8>)
  400cca:	4798      	blx	r3
  400ccc:	2801      	cmp	r0, #1
  400cce:	d1f1      	bne.n	400cb4 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cd4:	4b36      	ldr	r3, [pc, #216]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cd6:	601a      	str	r2, [r3, #0]
  400cd8:	f3bf 8f4f 	dsb	sy
  400cdc:	f3bf 8f6f 	isb	sy
  400ce0:	e7e8      	b.n	400cb4 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400ce2:	2800      	cmp	r0, #0
  400ce4:	d0e6      	beq.n	400cb4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cea:	4b31      	ldr	r3, [pc, #196]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	f3bf 8f4f 	dsb	sy
  400cf2:	f3bf 8f6f 	isb	sy
  400cf6:	e7dd      	b.n	400cb4 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400cf8:	4b2e      	ldr	r3, [pc, #184]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cfa:	4798      	blx	r3
					return errQUEUE_FULL;
  400cfc:	2000      	movs	r0, #0
  400cfe:	e7dc      	b.n	400cba <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400d00:	4620      	mov	r0, r4
  400d02:	4b2e      	ldr	r3, [pc, #184]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d04:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d06:	4b2e      	ldr	r3, [pc, #184]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d08:	4798      	blx	r3
  400d0a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400d0c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d12:	429a      	cmp	r2, r3
  400d14:	d3b9      	bcc.n	400c8a <xQueueGenericSend+0x9a>
  400d16:	2d02      	cmp	r5, #2
  400d18:	d0b7      	beq.n	400c8a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d1a:	9b01      	ldr	r3, [sp, #4]
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d0eb      	beq.n	400cf8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400d20:	b90f      	cbnz	r7, 400d26 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400d22:	a802      	add	r0, sp, #8
  400d24:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400d26:	4b23      	ldr	r3, [pc, #140]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d28:	4798      	blx	r3
		vTaskSuspendAll();
  400d2a:	4b26      	ldr	r3, [pc, #152]	; (400dc4 <xQueueGenericSend+0x1d4>)
  400d2c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d2e:	47b0      	blx	r6
  400d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d32:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d36:	d101      	bne.n	400d3c <xQueueGenericSend+0x14c>
  400d38:	2300      	movs	r3, #0
  400d3a:	6463      	str	r3, [r4, #68]	; 0x44
  400d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d42:	d101      	bne.n	400d48 <xQueueGenericSend+0x158>
  400d44:	2300      	movs	r3, #0
  400d46:	64a3      	str	r3, [r4, #72]	; 0x48
  400d48:	4b1a      	ldr	r3, [pc, #104]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d4a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d4c:	a901      	add	r1, sp, #4
  400d4e:	a802      	add	r0, sp, #8
  400d50:	4b1d      	ldr	r3, [pc, #116]	; (400dc8 <xQueueGenericSend+0x1d8>)
  400d52:	4798      	blx	r3
  400d54:	b9e0      	cbnz	r0, 400d90 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400d56:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400d58:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400d5c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400d5e:	4b15      	ldr	r3, [pc, #84]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d60:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400d62:	45bb      	cmp	fp, r7
  400d64:	d1cc      	bne.n	400d00 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400d66:	9901      	ldr	r1, [sp, #4]
  400d68:	f104 0010 	add.w	r0, r4, #16
  400d6c:	4b17      	ldr	r3, [pc, #92]	; (400dcc <xQueueGenericSend+0x1dc>)
  400d6e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d70:	4620      	mov	r0, r4
  400d72:	4b12      	ldr	r3, [pc, #72]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d74:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d76:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d78:	4798      	blx	r3
  400d7a:	2800      	cmp	r0, #0
  400d7c:	d1c5      	bne.n	400d0a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d82:	f8c9 3000 	str.w	r3, [r9]
  400d86:	f3bf 8f4f 	dsb	sy
  400d8a:	f3bf 8f6f 	isb	sy
  400d8e:	e7bc      	b.n	400d0a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400d90:	4620      	mov	r0, r4
  400d92:	4b0a      	ldr	r3, [pc, #40]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d94:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d96:	4b0a      	ldr	r3, [pc, #40]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d98:	4798      	blx	r3
			return errQUEUE_FULL;
  400d9a:	2000      	movs	r0, #0
  400d9c:	e78d      	b.n	400cba <xQueueGenericSend+0xca>
  400d9e:	bf00      	nop
  400da0:	00401c41 	.word	0x00401c41
  400da4:	004005bd 	.word	0x004005bd
  400da8:	004008a5 	.word	0x004008a5
  400dac:	0040092d 	.word	0x0040092d
  400db0:	e000ed04 	.word	0xe000ed04
  400db4:	00400609 	.word	0x00400609
  400db8:	00401ad9 	.word	0x00401ad9
  400dbc:	004009dd 	.word	0x004009dd
  400dc0:	004016bd 	.word	0x004016bd
  400dc4:	00401555 	.word	0x00401555
  400dc8:	00401ba1 	.word	0x00401ba1
  400dcc:	004019d5 	.word	0x004019d5
  400dd0:	00401b71 	.word	0x00401b71

00400dd4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400dd4:	2800      	cmp	r0, #0
  400dd6:	d036      	beq.n	400e46 <xQueueGenericSendFromISR+0x72>
{
  400dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ddc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400dde:	2900      	cmp	r1, #0
  400de0:	d03c      	beq.n	400e5c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400de2:	2b02      	cmp	r3, #2
  400de4:	d048      	beq.n	400e78 <xQueueGenericSendFromISR+0xa4>
  400de6:	461e      	mov	r6, r3
  400de8:	4615      	mov	r5, r2
  400dea:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400dec:	4b35      	ldr	r3, [pc, #212]	; (400ec4 <xQueueGenericSendFromISR+0xf0>)
  400dee:	4798      	blx	r3
	__asm volatile
  400df0:	f3ef 8711 	mrs	r7, BASEPRI
  400df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df8:	b672      	cpsid	i
  400dfa:	f383 8811 	msr	BASEPRI, r3
  400dfe:	f3bf 8f6f 	isb	sy
  400e02:	f3bf 8f4f 	dsb	sy
  400e06:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e0c:	429a      	cmp	r2, r3
  400e0e:	d301      	bcc.n	400e14 <xQueueGenericSendFromISR+0x40>
  400e10:	2e02      	cmp	r6, #2
  400e12:	d14f      	bne.n	400eb4 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e14:	4632      	mov	r2, r6
  400e16:	4641      	mov	r1, r8
  400e18:	4620      	mov	r0, r4
  400e1a:	4b2b      	ldr	r3, [pc, #172]	; (400ec8 <xQueueGenericSendFromISR+0xf4>)
  400e1c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400e1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e20:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e24:	d141      	bne.n	400eaa <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e28:	2b00      	cmp	r3, #0
  400e2a:	d033      	beq.n	400e94 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400e2c:	4631      	mov	r1, r6
  400e2e:	4620      	mov	r0, r4
  400e30:	4b26      	ldr	r3, [pc, #152]	; (400ecc <xQueueGenericSendFromISR+0xf8>)
  400e32:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400e34:	2d00      	cmp	r5, #0
  400e36:	d03f      	beq.n	400eb8 <xQueueGenericSendFromISR+0xe4>
  400e38:	2801      	cmp	r0, #1
  400e3a:	d13d      	bne.n	400eb8 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e3c:	6028      	str	r0, [r5, #0]
	__asm volatile
  400e3e:	f387 8811 	msr	BASEPRI, r7
}
  400e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400e46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e4a:	b672      	cpsid	i
  400e4c:	f383 8811 	msr	BASEPRI, r3
  400e50:	f3bf 8f6f 	isb	sy
  400e54:	f3bf 8f4f 	dsb	sy
  400e58:	b662      	cpsie	i
  400e5a:	e7fe      	b.n	400e5a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e5c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e5e:	2800      	cmp	r0, #0
  400e60:	d0bf      	beq.n	400de2 <xQueueGenericSendFromISR+0xe>
  400e62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e66:	b672      	cpsid	i
  400e68:	f383 8811 	msr	BASEPRI, r3
  400e6c:	f3bf 8f6f 	isb	sy
  400e70:	f3bf 8f4f 	dsb	sy
  400e74:	b662      	cpsie	i
  400e76:	e7fe      	b.n	400e76 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e7a:	2801      	cmp	r0, #1
  400e7c:	d0b3      	beq.n	400de6 <xQueueGenericSendFromISR+0x12>
  400e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e82:	b672      	cpsid	i
  400e84:	f383 8811 	msr	BASEPRI, r3
  400e88:	f3bf 8f6f 	isb	sy
  400e8c:	f3bf 8f4f 	dsb	sy
  400e90:	b662      	cpsie	i
  400e92:	e7fe      	b.n	400e92 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e96:	b18b      	cbz	r3, 400ebc <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e9c:	4b0c      	ldr	r3, [pc, #48]	; (400ed0 <xQueueGenericSendFromISR+0xfc>)
  400e9e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400ea0:	b175      	cbz	r5, 400ec0 <xQueueGenericSendFromISR+0xec>
  400ea2:	b168      	cbz	r0, 400ec0 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400ea4:	2001      	movs	r0, #1
  400ea6:	6028      	str	r0, [r5, #0]
  400ea8:	e7c9      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eac:	3301      	adds	r3, #1
  400eae:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400eb0:	2001      	movs	r0, #1
  400eb2:	e7c4      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400eb4:	2000      	movs	r0, #0
  400eb6:	e7c2      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400eb8:	2001      	movs	r0, #1
  400eba:	e7c0      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ebc:	2001      	movs	r0, #1
  400ebe:	e7be      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec0:	2001      	movs	r0, #1
  400ec2:	e7bc      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec4:	004007b5 	.word	0x004007b5
  400ec8:	004008a5 	.word	0x004008a5
  400ecc:	0040092d 	.word	0x0040092d
  400ed0:	00401ad9 	.word	0x00401ad9

00400ed4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  400ed4:	b170      	cbz	r0, 400ef4 <xQueueGiveFromISR+0x20>
{
  400ed6:	b570      	push	{r4, r5, r6, lr}
  400ed8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  400eda:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400edc:	b1ab      	cbz	r3, 400f0a <xQueueGiveFromISR+0x36>
  400ede:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ee2:	b672      	cpsid	i
  400ee4:	f383 8811 	msr	BASEPRI, r3
  400ee8:	f3bf 8f6f 	isb	sy
  400eec:	f3bf 8f4f 	dsb	sy
  400ef0:	b662      	cpsie	i
  400ef2:	e7fe      	b.n	400ef2 <xQueueGiveFromISR+0x1e>
  400ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef8:	b672      	cpsid	i
  400efa:	f383 8811 	msr	BASEPRI, r3
  400efe:	f3bf 8f6f 	isb	sy
  400f02:	f3bf 8f4f 	dsb	sy
  400f06:	b662      	cpsie	i
  400f08:	e7fe      	b.n	400f08 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f0a:	6803      	ldr	r3, [r0, #0]
  400f0c:	b333      	cbz	r3, 400f5c <xQueueGiveFromISR+0x88>
  400f0e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400f10:	4b25      	ldr	r3, [pc, #148]	; (400fa8 <xQueueGiveFromISR+0xd4>)
  400f12:	4798      	blx	r3
	__asm volatile
  400f14:	f3ef 8611 	mrs	r6, BASEPRI
  400f18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f1c:	b672      	cpsid	i
  400f1e:	f383 8811 	msr	BASEPRI, r3
  400f22:	f3bf 8f6f 	isb	sy
  400f26:	f3bf 8f4f 	dsb	sy
  400f2a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400f2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f30:	429a      	cmp	r2, r3
  400f32:	d231      	bcs.n	400f98 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  400f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f36:	3301      	adds	r3, #1
  400f38:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  400f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f40:	d125      	bne.n	400f8e <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  400f42:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f44:	b1c3      	cbz	r3, 400f78 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400f46:	2100      	movs	r1, #0
  400f48:	4620      	mov	r0, r4
  400f4a:	4b18      	ldr	r3, [pc, #96]	; (400fac <xQueueGiveFromISR+0xd8>)
  400f4c:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400f4e:	b32d      	cbz	r5, 400f9c <xQueueGiveFromISR+0xc8>
  400f50:	2801      	cmp	r0, #1
  400f52:	d123      	bne.n	400f9c <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400f54:	6028      	str	r0, [r5, #0]
	__asm volatile
  400f56:	f386 8811 	msr	BASEPRI, r6
}
  400f5a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f5c:	6843      	ldr	r3, [r0, #4]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d0d5      	beq.n	400f0e <xQueueGiveFromISR+0x3a>
	__asm volatile
  400f62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f66:	b672      	cpsid	i
  400f68:	f383 8811 	msr	BASEPRI, r3
  400f6c:	f3bf 8f6f 	isb	sy
  400f70:	f3bf 8f4f 	dsb	sy
  400f74:	b662      	cpsie	i
  400f76:	e7fe      	b.n	400f76 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f7a:	b18b      	cbz	r3, 400fa0 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f80:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <xQueueGiveFromISR+0xdc>)
  400f82:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400f84:	b175      	cbz	r5, 400fa4 <xQueueGiveFromISR+0xd0>
  400f86:	b168      	cbz	r0, 400fa4 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400f88:	2001      	movs	r0, #1
  400f8a:	6028      	str	r0, [r5, #0]
  400f8c:	e7e3      	b.n	400f56 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  400f8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f90:	3301      	adds	r3, #1
  400f92:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400f94:	2001      	movs	r0, #1
  400f96:	e7de      	b.n	400f56 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  400f98:	2000      	movs	r0, #0
  400f9a:	e7dc      	b.n	400f56 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  400f9c:	2001      	movs	r0, #1
  400f9e:	e7da      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa0:	2001      	movs	r0, #1
  400fa2:	e7d8      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa4:	2001      	movs	r0, #1
  400fa6:	e7d6      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa8:	004007b5 	.word	0x004007b5
  400fac:	0040092d 	.word	0x0040092d
  400fb0:	00401ad9 	.word	0x00401ad9

00400fb4 <xQueueGenericReceive>:
{
  400fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400fb8:	b084      	sub	sp, #16
  400fba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400fbc:	b198      	cbz	r0, 400fe6 <xQueueGenericReceive+0x32>
  400fbe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fc0:	b1e1      	cbz	r1, 400ffc <xQueueGenericReceive+0x48>
  400fc2:	4698      	mov	r8, r3
  400fc4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400fc6:	4b61      	ldr	r3, [pc, #388]	; (40114c <xQueueGenericReceive+0x198>)
  400fc8:	4798      	blx	r3
  400fca:	bb28      	cbnz	r0, 401018 <xQueueGenericReceive+0x64>
  400fcc:	9b01      	ldr	r3, [sp, #4]
  400fce:	b353      	cbz	r3, 401026 <xQueueGenericReceive+0x72>
  400fd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fd4:	b672      	cpsid	i
  400fd6:	f383 8811 	msr	BASEPRI, r3
  400fda:	f3bf 8f6f 	isb	sy
  400fde:	f3bf 8f4f 	dsb	sy
  400fe2:	b662      	cpsie	i
  400fe4:	e7fe      	b.n	400fe4 <xQueueGenericReceive+0x30>
  400fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fea:	b672      	cpsid	i
  400fec:	f383 8811 	msr	BASEPRI, r3
  400ff0:	f3bf 8f6f 	isb	sy
  400ff4:	f3bf 8f4f 	dsb	sy
  400ff8:	b662      	cpsie	i
  400ffa:	e7fe      	b.n	400ffa <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400ffc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ffe:	2a00      	cmp	r2, #0
  401000:	d0df      	beq.n	400fc2 <xQueueGenericReceive+0xe>
  401002:	f04f 0380 	mov.w	r3, #128	; 0x80
  401006:	b672      	cpsid	i
  401008:	f383 8811 	msr	BASEPRI, r3
  40100c:	f3bf 8f6f 	isb	sy
  401010:	f3bf 8f4f 	dsb	sy
  401014:	b662      	cpsie	i
  401016:	e7fe      	b.n	401016 <xQueueGenericReceive+0x62>
  401018:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  40101a:	4d4d      	ldr	r5, [pc, #308]	; (401150 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  40101c:	f8df a160 	ldr.w	sl, [pc, #352]	; 401180 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401020:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401160 <xQueueGenericReceive+0x1ac>
  401024:	e04b      	b.n	4010be <xQueueGenericReceive+0x10a>
  401026:	2600      	movs	r6, #0
  401028:	e7f7      	b.n	40101a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40102a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40102c:	4639      	mov	r1, r7
  40102e:	4620      	mov	r0, r4
  401030:	4b48      	ldr	r3, [pc, #288]	; (401154 <xQueueGenericReceive+0x1a0>)
  401032:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401034:	f1b8 0f00 	cmp.w	r8, #0
  401038:	d11d      	bne.n	401076 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  40103a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40103c:	3b01      	subs	r3, #1
  40103e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401040:	6823      	ldr	r3, [r4, #0]
  401042:	b913      	cbnz	r3, 40104a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401044:	4b44      	ldr	r3, [pc, #272]	; (401158 <xQueueGenericReceive+0x1a4>)
  401046:	4798      	blx	r3
  401048:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40104a:	6923      	ldr	r3, [r4, #16]
  40104c:	b16b      	cbz	r3, 40106a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40104e:	f104 0010 	add.w	r0, r4, #16
  401052:	4b42      	ldr	r3, [pc, #264]	; (40115c <xQueueGenericReceive+0x1a8>)
  401054:	4798      	blx	r3
  401056:	2801      	cmp	r0, #1
  401058:	d107      	bne.n	40106a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40105e:	4b40      	ldr	r3, [pc, #256]	; (401160 <xQueueGenericReceive+0x1ac>)
  401060:	601a      	str	r2, [r3, #0]
  401062:	f3bf 8f4f 	dsb	sy
  401066:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40106a:	4b3e      	ldr	r3, [pc, #248]	; (401164 <xQueueGenericReceive+0x1b0>)
  40106c:	4798      	blx	r3
				return pdPASS;
  40106e:	2001      	movs	r0, #1
}
  401070:	b004      	add	sp, #16
  401072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401076:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401078:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40107a:	2b00      	cmp	r3, #0
  40107c:	d0f5      	beq.n	40106a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40107e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401082:	4b36      	ldr	r3, [pc, #216]	; (40115c <xQueueGenericReceive+0x1a8>)
  401084:	4798      	blx	r3
  401086:	2800      	cmp	r0, #0
  401088:	d0ef      	beq.n	40106a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40108e:	4b34      	ldr	r3, [pc, #208]	; (401160 <xQueueGenericReceive+0x1ac>)
  401090:	601a      	str	r2, [r3, #0]
  401092:	f3bf 8f4f 	dsb	sy
  401096:	f3bf 8f6f 	isb	sy
  40109a:	e7e6      	b.n	40106a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  40109c:	4b31      	ldr	r3, [pc, #196]	; (401164 <xQueueGenericReceive+0x1b0>)
  40109e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4010a0:	2000      	movs	r0, #0
  4010a2:	e7e5      	b.n	401070 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4010a4:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4010a6:	6860      	ldr	r0, [r4, #4]
  4010a8:	4b2f      	ldr	r3, [pc, #188]	; (401168 <xQueueGenericReceive+0x1b4>)
  4010aa:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4010ac:	4b2d      	ldr	r3, [pc, #180]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010ae:	4798      	blx	r3
  4010b0:	e030      	b.n	401114 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4010b2:	4620      	mov	r0, r4
  4010b4:	4b2d      	ldr	r3, [pc, #180]	; (40116c <xQueueGenericReceive+0x1b8>)
  4010b6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4010b8:	4b2d      	ldr	r3, [pc, #180]	; (401170 <xQueueGenericReceive+0x1bc>)
  4010ba:	4798      	blx	r3
  4010bc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4010be:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010c2:	2b00      	cmp	r3, #0
  4010c4:	d1b1      	bne.n	40102a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4010c6:	9b01      	ldr	r3, [sp, #4]
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0e7      	beq.n	40109c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4010cc:	b90e      	cbnz	r6, 4010d2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4010ce:	a802      	add	r0, sp, #8
  4010d0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4010d2:	4b24      	ldr	r3, [pc, #144]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010d4:	4798      	blx	r3
		vTaskSuspendAll();
  4010d6:	4b27      	ldr	r3, [pc, #156]	; (401174 <xQueueGenericReceive+0x1c0>)
  4010d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4010da:	47a8      	blx	r5
  4010dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4010de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010e2:	d101      	bne.n	4010e8 <xQueueGenericReceive+0x134>
  4010e4:	2300      	movs	r3, #0
  4010e6:	6463      	str	r3, [r4, #68]	; 0x44
  4010e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ee:	d101      	bne.n	4010f4 <xQueueGenericReceive+0x140>
  4010f0:	2300      	movs	r3, #0
  4010f2:	64a3      	str	r3, [r4, #72]	; 0x48
  4010f4:	4b1b      	ldr	r3, [pc, #108]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010f6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4010f8:	a901      	add	r1, sp, #4
  4010fa:	a802      	add	r0, sp, #8
  4010fc:	4b1e      	ldr	r3, [pc, #120]	; (401178 <xQueueGenericReceive+0x1c4>)
  4010fe:	4798      	blx	r3
  401100:	b9e8      	cbnz	r0, 40113e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401102:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401106:	4b17      	ldr	r3, [pc, #92]	; (401164 <xQueueGenericReceive+0x1b0>)
  401108:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40110a:	2e00      	cmp	r6, #0
  40110c:	d1d1      	bne.n	4010b2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40110e:	6823      	ldr	r3, [r4, #0]
  401110:	2b00      	cmp	r3, #0
  401112:	d0c7      	beq.n	4010a4 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401114:	9901      	ldr	r1, [sp, #4]
  401116:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40111a:	4b18      	ldr	r3, [pc, #96]	; (40117c <xQueueGenericReceive+0x1c8>)
  40111c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40111e:	4620      	mov	r0, r4
  401120:	4b12      	ldr	r3, [pc, #72]	; (40116c <xQueueGenericReceive+0x1b8>)
  401122:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401124:	4b12      	ldr	r3, [pc, #72]	; (401170 <xQueueGenericReceive+0x1bc>)
  401126:	4798      	blx	r3
  401128:	2800      	cmp	r0, #0
  40112a:	d1c7      	bne.n	4010bc <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  40112c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401130:	f8c9 3000 	str.w	r3, [r9]
  401134:	f3bf 8f4f 	dsb	sy
  401138:	f3bf 8f6f 	isb	sy
  40113c:	e7be      	b.n	4010bc <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40113e:	4620      	mov	r0, r4
  401140:	4b0a      	ldr	r3, [pc, #40]	; (40116c <xQueueGenericReceive+0x1b8>)
  401142:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401144:	4b0a      	ldr	r3, [pc, #40]	; (401170 <xQueueGenericReceive+0x1bc>)
  401146:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401148:	2000      	movs	r0, #0
  40114a:	e791      	b.n	401070 <xQueueGenericReceive+0xbc>
  40114c:	00401c41 	.word	0x00401c41
  401150:	004005bd 	.word	0x004005bd
  401154:	004009b5 	.word	0x004009b5
  401158:	00401dc1 	.word	0x00401dc1
  40115c:	00401ad9 	.word	0x00401ad9
  401160:	e000ed04 	.word	0xe000ed04
  401164:	00400609 	.word	0x00400609
  401168:	00401c61 	.word	0x00401c61
  40116c:	004009dd 	.word	0x004009dd
  401170:	004016bd 	.word	0x004016bd
  401174:	00401555 	.word	0x00401555
  401178:	00401ba1 	.word	0x00401ba1
  40117c:	004019d5 	.word	0x004019d5
  401180:	00401b71 	.word	0x00401b71

00401184 <vQueueAddToRegistry>:
	{
  401184:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401186:	4b0b      	ldr	r3, [pc, #44]	; (4011b4 <vQueueAddToRegistry+0x30>)
  401188:	681b      	ldr	r3, [r3, #0]
  40118a:	b153      	cbz	r3, 4011a2 <vQueueAddToRegistry+0x1e>
  40118c:	2301      	movs	r3, #1
  40118e:	4c09      	ldr	r4, [pc, #36]	; (4011b4 <vQueueAddToRegistry+0x30>)
  401190:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401194:	b132      	cbz	r2, 4011a4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401196:	3301      	adds	r3, #1
  401198:	2b08      	cmp	r3, #8
  40119a:	d1f9      	bne.n	401190 <vQueueAddToRegistry+0xc>
	}
  40119c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011a0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011a2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4011a4:	4a03      	ldr	r2, [pc, #12]	; (4011b4 <vQueueAddToRegistry+0x30>)
  4011a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4011aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4011ae:	6058      	str	r0, [r3, #4]
				break;
  4011b0:	e7f4      	b.n	40119c <vQueueAddToRegistry+0x18>
  4011b2:	bf00      	nop
  4011b4:	2040cf14 	.word	0x2040cf14

004011b8 <vQueueWaitForMessageRestricted>:
	{
  4011b8:	b570      	push	{r4, r5, r6, lr}
  4011ba:	4604      	mov	r4, r0
  4011bc:	460d      	mov	r5, r1
  4011be:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4011c0:	4b0f      	ldr	r3, [pc, #60]	; (401200 <vQueueWaitForMessageRestricted+0x48>)
  4011c2:	4798      	blx	r3
  4011c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011ca:	d00b      	beq.n	4011e4 <vQueueWaitForMessageRestricted+0x2c>
  4011cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011d2:	d00a      	beq.n	4011ea <vQueueWaitForMessageRestricted+0x32>
  4011d4:	4b0b      	ldr	r3, [pc, #44]	; (401204 <vQueueWaitForMessageRestricted+0x4c>)
  4011d6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4011d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011da:	b14b      	cbz	r3, 4011f0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4011dc:	4620      	mov	r0, r4
  4011de:	4b0a      	ldr	r3, [pc, #40]	; (401208 <vQueueWaitForMessageRestricted+0x50>)
  4011e0:	4798      	blx	r3
  4011e2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4011e4:	2300      	movs	r3, #0
  4011e6:	6463      	str	r3, [r4, #68]	; 0x44
  4011e8:	e7f0      	b.n	4011cc <vQueueWaitForMessageRestricted+0x14>
  4011ea:	2300      	movs	r3, #0
  4011ec:	64a3      	str	r3, [r4, #72]	; 0x48
  4011ee:	e7f1      	b.n	4011d4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4011f0:	4632      	mov	r2, r6
  4011f2:	4629      	mov	r1, r5
  4011f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011f8:	4b04      	ldr	r3, [pc, #16]	; (40120c <vQueueWaitForMessageRestricted+0x54>)
  4011fa:	4798      	blx	r3
  4011fc:	e7ee      	b.n	4011dc <vQueueWaitForMessageRestricted+0x24>
  4011fe:	bf00      	nop
  401200:	004005bd 	.word	0x004005bd
  401204:	00400609 	.word	0x00400609
  401208:	004009dd 	.word	0x004009dd
  40120c:	00401a59 	.word	0x00401a59

00401210 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401210:	4b08      	ldr	r3, [pc, #32]	; (401234 <prvResetNextTaskUnblockTime+0x24>)
  401212:	681b      	ldr	r3, [r3, #0]
  401214:	681b      	ldr	r3, [r3, #0]
  401216:	b13b      	cbz	r3, 401228 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401218:	4b06      	ldr	r3, [pc, #24]	; (401234 <prvResetNextTaskUnblockTime+0x24>)
  40121a:	681b      	ldr	r3, [r3, #0]
  40121c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40121e:	68db      	ldr	r3, [r3, #12]
  401220:	685a      	ldr	r2, [r3, #4]
  401222:	4b05      	ldr	r3, [pc, #20]	; (401238 <prvResetNextTaskUnblockTime+0x28>)
  401224:	601a      	str	r2, [r3, #0]
  401226:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401228:	f04f 32ff 	mov.w	r2, #4294967295
  40122c:	4b02      	ldr	r3, [pc, #8]	; (401238 <prvResetNextTaskUnblockTime+0x28>)
  40122e:	601a      	str	r2, [r3, #0]
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	2040c200 	.word	0x2040c200
  401238:	2040c2ac 	.word	0x2040c2ac

0040123c <prvAddCurrentTaskToDelayedList>:
{
  40123c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40123e:	4b0f      	ldr	r3, [pc, #60]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401240:	681b      	ldr	r3, [r3, #0]
  401242:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401244:	4b0e      	ldr	r3, [pc, #56]	; (401280 <prvAddCurrentTaskToDelayedList+0x44>)
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	4298      	cmp	r0, r3
  40124a:	d30e      	bcc.n	40126a <prvAddCurrentTaskToDelayedList+0x2e>
  40124c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40124e:	4b0d      	ldr	r3, [pc, #52]	; (401284 <prvAddCurrentTaskToDelayedList+0x48>)
  401250:	6818      	ldr	r0, [r3, #0]
  401252:	4b0a      	ldr	r3, [pc, #40]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401254:	6819      	ldr	r1, [r3, #0]
  401256:	3104      	adds	r1, #4
  401258:	4b0b      	ldr	r3, [pc, #44]	; (401288 <prvAddCurrentTaskToDelayedList+0x4c>)
  40125a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40125c:	4b0b      	ldr	r3, [pc, #44]	; (40128c <prvAddCurrentTaskToDelayedList+0x50>)
  40125e:	681b      	ldr	r3, [r3, #0]
  401260:	429c      	cmp	r4, r3
  401262:	d201      	bcs.n	401268 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401264:	4b09      	ldr	r3, [pc, #36]	; (40128c <prvAddCurrentTaskToDelayedList+0x50>)
  401266:	601c      	str	r4, [r3, #0]
  401268:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40126a:	4b09      	ldr	r3, [pc, #36]	; (401290 <prvAddCurrentTaskToDelayedList+0x54>)
  40126c:	6818      	ldr	r0, [r3, #0]
  40126e:	4b03      	ldr	r3, [pc, #12]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401270:	6819      	ldr	r1, [r3, #0]
  401272:	3104      	adds	r1, #4
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <prvAddCurrentTaskToDelayedList+0x4c>)
  401276:	4798      	blx	r3
  401278:	bd10      	pop	{r4, pc}
  40127a:	bf00      	nop
  40127c:	2040c1fc 	.word	0x2040c1fc
  401280:	2040c2f4 	.word	0x2040c2f4
  401284:	2040c200 	.word	0x2040c200
  401288:	004004a5 	.word	0x004004a5
  40128c:	2040c2ac 	.word	0x2040c2ac
  401290:	2040c204 	.word	0x2040c204

00401294 <xTaskGenericCreate>:
{
  401294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401298:	b083      	sub	sp, #12
  40129a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40129c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4012a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4012a2:	b160      	cbz	r0, 4012be <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4012a4:	2d04      	cmp	r5, #4
  4012a6:	d915      	bls.n	4012d4 <xTaskGenericCreate+0x40>
  4012a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ac:	b672      	cpsid	i
  4012ae:	f383 8811 	msr	BASEPRI, r3
  4012b2:	f3bf 8f6f 	isb	sy
  4012b6:	f3bf 8f4f 	dsb	sy
  4012ba:	b662      	cpsie	i
  4012bc:	e7fe      	b.n	4012bc <xTaskGenericCreate+0x28>
  4012be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012c2:	b672      	cpsid	i
  4012c4:	f383 8811 	msr	BASEPRI, r3
  4012c8:	f3bf 8f6f 	isb	sy
  4012cc:	f3bf 8f4f 	dsb	sy
  4012d0:	b662      	cpsie	i
  4012d2:	e7fe      	b.n	4012d2 <xTaskGenericCreate+0x3e>
  4012d4:	9001      	str	r0, [sp, #4]
  4012d6:	4698      	mov	r8, r3
  4012d8:	4691      	mov	r9, r2
  4012da:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012dc:	b936      	cbnz	r6, 4012ec <xTaskGenericCreate+0x58>
  4012de:	0090      	lsls	r0, r2, #2
  4012e0:	4b62      	ldr	r3, [pc, #392]	; (40146c <xTaskGenericCreate+0x1d8>)
  4012e2:	4798      	blx	r3
		if( pxStack != NULL )
  4012e4:	4606      	mov	r6, r0
  4012e6:	2800      	cmp	r0, #0
  4012e8:	f000 809e 	beq.w	401428 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4012ec:	2058      	movs	r0, #88	; 0x58
  4012ee:	4b5f      	ldr	r3, [pc, #380]	; (40146c <xTaskGenericCreate+0x1d8>)
  4012f0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4012f2:	4604      	mov	r4, r0
  4012f4:	2800      	cmp	r0, #0
  4012f6:	f000 8094 	beq.w	401422 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4012fa:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4012fc:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401300:	21a5      	movs	r1, #165	; 0xa5
  401302:	4630      	mov	r0, r6
  401304:	4b5a      	ldr	r3, [pc, #360]	; (401470 <xTaskGenericCreate+0x1dc>)
  401306:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401308:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40130c:	444e      	add	r6, r9
  40130e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401310:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401314:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401318:	783b      	ldrb	r3, [r7, #0]
  40131a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40131e:	783b      	ldrb	r3, [r7, #0]
  401320:	2b00      	cmp	r3, #0
  401322:	f040 8084 	bne.w	40142e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401326:	2700      	movs	r7, #0
  401328:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40132c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40132e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401330:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401332:	f104 0904 	add.w	r9, r4, #4
  401336:	4648      	mov	r0, r9
  401338:	f8df b184 	ldr.w	fp, [pc, #388]	; 4014c0 <xTaskGenericCreate+0x22c>
  40133c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40133e:	f104 0018 	add.w	r0, r4, #24
  401342:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401344:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401346:	f1c5 0305 	rsb	r3, r5, #5
  40134a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40134c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40134e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401350:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401354:	4642      	mov	r2, r8
  401356:	9901      	ldr	r1, [sp, #4]
  401358:	4630      	mov	r0, r6
  40135a:	4b46      	ldr	r3, [pc, #280]	; (401474 <xTaskGenericCreate+0x1e0>)
  40135c:	4798      	blx	r3
  40135e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401360:	f1ba 0f00 	cmp.w	sl, #0
  401364:	d001      	beq.n	40136a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401366:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40136a:	4b43      	ldr	r3, [pc, #268]	; (401478 <xTaskGenericCreate+0x1e4>)
  40136c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40136e:	4a43      	ldr	r2, [pc, #268]	; (40147c <xTaskGenericCreate+0x1e8>)
  401370:	6813      	ldr	r3, [r2, #0]
  401372:	3301      	adds	r3, #1
  401374:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401376:	4b42      	ldr	r3, [pc, #264]	; (401480 <xTaskGenericCreate+0x1ec>)
  401378:	681b      	ldr	r3, [r3, #0]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d166      	bne.n	40144c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40137e:	4b40      	ldr	r3, [pc, #256]	; (401480 <xTaskGenericCreate+0x1ec>)
  401380:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401382:	6813      	ldr	r3, [r2, #0]
  401384:	2b01      	cmp	r3, #1
  401386:	d121      	bne.n	4013cc <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401388:	4f3e      	ldr	r7, [pc, #248]	; (401484 <xTaskGenericCreate+0x1f0>)
  40138a:	4638      	mov	r0, r7
  40138c:	4e3e      	ldr	r6, [pc, #248]	; (401488 <xTaskGenericCreate+0x1f4>)
  40138e:	47b0      	blx	r6
  401390:	f107 0014 	add.w	r0, r7, #20
  401394:	47b0      	blx	r6
  401396:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40139a:	47b0      	blx	r6
  40139c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4013a0:	47b0      	blx	r6
  4013a2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4013a6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4013a8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4014c4 <xTaskGenericCreate+0x230>
  4013ac:	4640      	mov	r0, r8
  4013ae:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4013b0:	4f36      	ldr	r7, [pc, #216]	; (40148c <xTaskGenericCreate+0x1f8>)
  4013b2:	4638      	mov	r0, r7
  4013b4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4013b6:	4836      	ldr	r0, [pc, #216]	; (401490 <xTaskGenericCreate+0x1fc>)
  4013b8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4013ba:	4836      	ldr	r0, [pc, #216]	; (401494 <xTaskGenericCreate+0x200>)
  4013bc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4013be:	4836      	ldr	r0, [pc, #216]	; (401498 <xTaskGenericCreate+0x204>)
  4013c0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4013c2:	4b36      	ldr	r3, [pc, #216]	; (40149c <xTaskGenericCreate+0x208>)
  4013c4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4013c8:	4b35      	ldr	r3, [pc, #212]	; (4014a0 <xTaskGenericCreate+0x20c>)
  4013ca:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4013cc:	4a35      	ldr	r2, [pc, #212]	; (4014a4 <xTaskGenericCreate+0x210>)
  4013ce:	6813      	ldr	r3, [r2, #0]
  4013d0:	3301      	adds	r3, #1
  4013d2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4013d4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4013d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4013d8:	4a33      	ldr	r2, [pc, #204]	; (4014a8 <xTaskGenericCreate+0x214>)
  4013da:	6811      	ldr	r1, [r2, #0]
  4013dc:	2301      	movs	r3, #1
  4013de:	4083      	lsls	r3, r0
  4013e0:	430b      	orrs	r3, r1
  4013e2:	6013      	str	r3, [r2, #0]
  4013e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4013e8:	4649      	mov	r1, r9
  4013ea:	4b26      	ldr	r3, [pc, #152]	; (401484 <xTaskGenericCreate+0x1f0>)
  4013ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4013f0:	4b2e      	ldr	r3, [pc, #184]	; (4014ac <xTaskGenericCreate+0x218>)
  4013f2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4013f4:	4b2e      	ldr	r3, [pc, #184]	; (4014b0 <xTaskGenericCreate+0x21c>)
  4013f6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4013f8:	4b2e      	ldr	r3, [pc, #184]	; (4014b4 <xTaskGenericCreate+0x220>)
  4013fa:	681b      	ldr	r3, [r3, #0]
  4013fc:	2b00      	cmp	r3, #0
  4013fe:	d031      	beq.n	401464 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401400:	4b1f      	ldr	r3, [pc, #124]	; (401480 <xTaskGenericCreate+0x1ec>)
  401402:	681b      	ldr	r3, [r3, #0]
  401404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401406:	429d      	cmp	r5, r3
  401408:	d92e      	bls.n	401468 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40140e:	4b2a      	ldr	r3, [pc, #168]	; (4014b8 <xTaskGenericCreate+0x224>)
  401410:	601a      	str	r2, [r3, #0]
  401412:	f3bf 8f4f 	dsb	sy
  401416:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40141a:	2001      	movs	r0, #1
}
  40141c:	b003      	add	sp, #12
  40141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401422:	4630      	mov	r0, r6
  401424:	4b25      	ldr	r3, [pc, #148]	; (4014bc <xTaskGenericCreate+0x228>)
  401426:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401428:	f04f 30ff 	mov.w	r0, #4294967295
  40142c:	e7f6      	b.n	40141c <xTaskGenericCreate+0x188>
  40142e:	463b      	mov	r3, r7
  401430:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401434:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401436:	7859      	ldrb	r1, [r3, #1]
  401438:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40143c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401440:	2900      	cmp	r1, #0
  401442:	f43f af70 	beq.w	401326 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401446:	42bb      	cmp	r3, r7
  401448:	d1f5      	bne.n	401436 <xTaskGenericCreate+0x1a2>
  40144a:	e76c      	b.n	401326 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40144c:	4b19      	ldr	r3, [pc, #100]	; (4014b4 <xTaskGenericCreate+0x220>)
  40144e:	681b      	ldr	r3, [r3, #0]
  401450:	2b00      	cmp	r3, #0
  401452:	d1bb      	bne.n	4013cc <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401454:	4b0a      	ldr	r3, [pc, #40]	; (401480 <xTaskGenericCreate+0x1ec>)
  401456:	681b      	ldr	r3, [r3, #0]
  401458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40145a:	429d      	cmp	r5, r3
  40145c:	d3b6      	bcc.n	4013cc <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40145e:	4b08      	ldr	r3, [pc, #32]	; (401480 <xTaskGenericCreate+0x1ec>)
  401460:	601c      	str	r4, [r3, #0]
  401462:	e7b3      	b.n	4013cc <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401464:	2001      	movs	r0, #1
  401466:	e7d9      	b.n	40141c <xTaskGenericCreate+0x188>
  401468:	2001      	movs	r0, #1
	return xReturn;
  40146a:	e7d7      	b.n	40141c <xTaskGenericCreate+0x188>
  40146c:	00400819 	.word	0x00400819
  401470:	0040638d 	.word	0x0040638d
  401474:	00400571 	.word	0x00400571
  401478:	004005bd 	.word	0x004005bd
  40147c:	2040c26c 	.word	0x2040c26c
  401480:	2040c1fc 	.word	0x2040c1fc
  401484:	2040c208 	.word	0x2040c208
  401488:	00400471 	.word	0x00400471
  40148c:	2040c298 	.word	0x2040c298
  401490:	2040c2b4 	.word	0x2040c2b4
  401494:	2040c2e0 	.word	0x2040c2e0
  401498:	2040c2cc 	.word	0x2040c2cc
  40149c:	2040c200 	.word	0x2040c200
  4014a0:	2040c204 	.word	0x2040c204
  4014a4:	2040c278 	.word	0x2040c278
  4014a8:	2040c280 	.word	0x2040c280
  4014ac:	0040048d 	.word	0x0040048d
  4014b0:	00400609 	.word	0x00400609
  4014b4:	2040c2c8 	.word	0x2040c2c8
  4014b8:	e000ed04 	.word	0xe000ed04
  4014bc:	00400889 	.word	0x00400889
  4014c0:	00400487 	.word	0x00400487
  4014c4:	2040c284 	.word	0x2040c284

004014c8 <vTaskStartScheduler>:
{
  4014c8:	b510      	push	{r4, lr}
  4014ca:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4014cc:	2300      	movs	r3, #0
  4014ce:	9303      	str	r3, [sp, #12]
  4014d0:	9302      	str	r3, [sp, #8]
  4014d2:	9301      	str	r3, [sp, #4]
  4014d4:	9300      	str	r3, [sp, #0]
  4014d6:	2282      	movs	r2, #130	; 0x82
  4014d8:	4916      	ldr	r1, [pc, #88]	; (401534 <vTaskStartScheduler+0x6c>)
  4014da:	4817      	ldr	r0, [pc, #92]	; (401538 <vTaskStartScheduler+0x70>)
  4014dc:	4c17      	ldr	r4, [pc, #92]	; (40153c <vTaskStartScheduler+0x74>)
  4014de:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4014e0:	2801      	cmp	r0, #1
  4014e2:	d00b      	beq.n	4014fc <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4014e4:	bb20      	cbnz	r0, 401530 <vTaskStartScheduler+0x68>
  4014e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ea:	b672      	cpsid	i
  4014ec:	f383 8811 	msr	BASEPRI, r3
  4014f0:	f3bf 8f6f 	isb	sy
  4014f4:	f3bf 8f4f 	dsb	sy
  4014f8:	b662      	cpsie	i
  4014fa:	e7fe      	b.n	4014fa <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4014fc:	4b10      	ldr	r3, [pc, #64]	; (401540 <vTaskStartScheduler+0x78>)
  4014fe:	4798      	blx	r3
	if( xReturn == pdPASS )
  401500:	2801      	cmp	r0, #1
  401502:	d1ef      	bne.n	4014e4 <vTaskStartScheduler+0x1c>
  401504:	f04f 0380 	mov.w	r3, #128	; 0x80
  401508:	b672      	cpsid	i
  40150a:	f383 8811 	msr	BASEPRI, r3
  40150e:	f3bf 8f6f 	isb	sy
  401512:	f3bf 8f4f 	dsb	sy
  401516:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401518:	f04f 32ff 	mov.w	r2, #4294967295
  40151c:	4b09      	ldr	r3, [pc, #36]	; (401544 <vTaskStartScheduler+0x7c>)
  40151e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401520:	2201      	movs	r2, #1
  401522:	4b09      	ldr	r3, [pc, #36]	; (401548 <vTaskStartScheduler+0x80>)
  401524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401526:	2200      	movs	r2, #0
  401528:	4b08      	ldr	r3, [pc, #32]	; (40154c <vTaskStartScheduler+0x84>)
  40152a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40152c:	4b08      	ldr	r3, [pc, #32]	; (401550 <vTaskStartScheduler+0x88>)
  40152e:	4798      	blx	r3
}
  401530:	b004      	add	sp, #16
  401532:	bd10      	pop	{r4, pc}
  401534:	0040981c 	.word	0x0040981c
  401538:	0040186d 	.word	0x0040186d
  40153c:	00401295 	.word	0x00401295
  401540:	00401ead 	.word	0x00401ead
  401544:	2040c2ac 	.word	0x2040c2ac
  401548:	2040c2c8 	.word	0x2040c2c8
  40154c:	2040c2f4 	.word	0x2040c2f4
  401550:	004006f1 	.word	0x004006f1

00401554 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401554:	4a02      	ldr	r2, [pc, #8]	; (401560 <vTaskSuspendAll+0xc>)
  401556:	6813      	ldr	r3, [r2, #0]
  401558:	3301      	adds	r3, #1
  40155a:	6013      	str	r3, [r2, #0]
  40155c:	4770      	bx	lr
  40155e:	bf00      	nop
  401560:	2040c274 	.word	0x2040c274

00401564 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401564:	4b01      	ldr	r3, [pc, #4]	; (40156c <xTaskGetTickCount+0x8>)
  401566:	6818      	ldr	r0, [r3, #0]
}
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	2040c2f4 	.word	0x2040c2f4

00401570 <xTaskIncrementTick>:
{
  401570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401574:	4b42      	ldr	r3, [pc, #264]	; (401680 <xTaskIncrementTick+0x110>)
  401576:	681b      	ldr	r3, [r3, #0]
  401578:	2b00      	cmp	r3, #0
  40157a:	d178      	bne.n	40166e <xTaskIncrementTick+0xfe>
		++xTickCount;
  40157c:	4b41      	ldr	r3, [pc, #260]	; (401684 <xTaskIncrementTick+0x114>)
  40157e:	681a      	ldr	r2, [r3, #0]
  401580:	3201      	adds	r2, #1
  401582:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401584:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401586:	b9d6      	cbnz	r6, 4015be <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401588:	4b3f      	ldr	r3, [pc, #252]	; (401688 <xTaskIncrementTick+0x118>)
  40158a:	681b      	ldr	r3, [r3, #0]
  40158c:	681b      	ldr	r3, [r3, #0]
  40158e:	b153      	cbz	r3, 4015a6 <xTaskIncrementTick+0x36>
  401590:	f04f 0380 	mov.w	r3, #128	; 0x80
  401594:	b672      	cpsid	i
  401596:	f383 8811 	msr	BASEPRI, r3
  40159a:	f3bf 8f6f 	isb	sy
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	b662      	cpsie	i
  4015a4:	e7fe      	b.n	4015a4 <xTaskIncrementTick+0x34>
  4015a6:	4a38      	ldr	r2, [pc, #224]	; (401688 <xTaskIncrementTick+0x118>)
  4015a8:	6811      	ldr	r1, [r2, #0]
  4015aa:	4b38      	ldr	r3, [pc, #224]	; (40168c <xTaskIncrementTick+0x11c>)
  4015ac:	6818      	ldr	r0, [r3, #0]
  4015ae:	6010      	str	r0, [r2, #0]
  4015b0:	6019      	str	r1, [r3, #0]
  4015b2:	4a37      	ldr	r2, [pc, #220]	; (401690 <xTaskIncrementTick+0x120>)
  4015b4:	6813      	ldr	r3, [r2, #0]
  4015b6:	3301      	adds	r3, #1
  4015b8:	6013      	str	r3, [r2, #0]
  4015ba:	4b36      	ldr	r3, [pc, #216]	; (401694 <xTaskIncrementTick+0x124>)
  4015bc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4015be:	4b36      	ldr	r3, [pc, #216]	; (401698 <xTaskIncrementTick+0x128>)
  4015c0:	681b      	ldr	r3, [r3, #0]
  4015c2:	429e      	cmp	r6, r3
  4015c4:	d218      	bcs.n	4015f8 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4015c6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4015c8:	4b34      	ldr	r3, [pc, #208]	; (40169c <xTaskIncrementTick+0x12c>)
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015d2:	4a33      	ldr	r2, [pc, #204]	; (4016a0 <xTaskIncrementTick+0x130>)
  4015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4015d8:	2b02      	cmp	r3, #2
  4015da:	bf28      	it	cs
  4015dc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4015de:	4b31      	ldr	r3, [pc, #196]	; (4016a4 <xTaskIncrementTick+0x134>)
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	b90b      	cbnz	r3, 4015e8 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4015e4:	4b30      	ldr	r3, [pc, #192]	; (4016a8 <xTaskIncrementTick+0x138>)
  4015e6:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4015e8:	4b30      	ldr	r3, [pc, #192]	; (4016ac <xTaskIncrementTick+0x13c>)
  4015ea:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4015ec:	2b00      	cmp	r3, #0
}
  4015ee:	bf0c      	ite	eq
  4015f0:	4620      	moveq	r0, r4
  4015f2:	2001      	movne	r0, #1
  4015f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015f8:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401688 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4015fe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4016b8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401602:	4f2b      	ldr	r7, [pc, #172]	; (4016b0 <xTaskIncrementTick+0x140>)
  401604:	e01f      	b.n	401646 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401606:	f04f 32ff 	mov.w	r2, #4294967295
  40160a:	4b23      	ldr	r3, [pc, #140]	; (401698 <xTaskIncrementTick+0x128>)
  40160c:	601a      	str	r2, [r3, #0]
						break;
  40160e:	e7db      	b.n	4015c8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401610:	4a21      	ldr	r2, [pc, #132]	; (401698 <xTaskIncrementTick+0x128>)
  401612:	6013      	str	r3, [r2, #0]
							break;
  401614:	e7d8      	b.n	4015c8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401616:	f105 0018 	add.w	r0, r5, #24
  40161a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40161c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40161e:	683a      	ldr	r2, [r7, #0]
  401620:	2301      	movs	r3, #1
  401622:	4083      	lsls	r3, r0
  401624:	4313      	orrs	r3, r2
  401626:	603b      	str	r3, [r7, #0]
  401628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40162c:	4651      	mov	r1, sl
  40162e:	4b1c      	ldr	r3, [pc, #112]	; (4016a0 <xTaskIncrementTick+0x130>)
  401630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401634:	4b1f      	ldr	r3, [pc, #124]	; (4016b4 <xTaskIncrementTick+0x144>)
  401636:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401638:	4b18      	ldr	r3, [pc, #96]	; (40169c <xTaskIncrementTick+0x12c>)
  40163a:	681b      	ldr	r3, [r3, #0]
  40163c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401640:	429a      	cmp	r2, r3
  401642:	bf28      	it	cs
  401644:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401646:	f8d9 3000 	ldr.w	r3, [r9]
  40164a:	681b      	ldr	r3, [r3, #0]
  40164c:	2b00      	cmp	r3, #0
  40164e:	d0da      	beq.n	401606 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401650:	f8d9 3000 	ldr.w	r3, [r9]
  401654:	68db      	ldr	r3, [r3, #12]
  401656:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401658:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40165a:	429e      	cmp	r6, r3
  40165c:	d3d8      	bcc.n	401610 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40165e:	f105 0a04 	add.w	sl, r5, #4
  401662:	4650      	mov	r0, sl
  401664:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401666:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401668:	2b00      	cmp	r3, #0
  40166a:	d1d4      	bne.n	401616 <xTaskIncrementTick+0xa6>
  40166c:	e7d6      	b.n	40161c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40166e:	4a0d      	ldr	r2, [pc, #52]	; (4016a4 <xTaskIncrementTick+0x134>)
  401670:	6813      	ldr	r3, [r2, #0]
  401672:	3301      	adds	r3, #1
  401674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401676:	4b0c      	ldr	r3, [pc, #48]	; (4016a8 <xTaskIncrementTick+0x138>)
  401678:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40167a:	2400      	movs	r4, #0
  40167c:	e7b4      	b.n	4015e8 <xTaskIncrementTick+0x78>
  40167e:	bf00      	nop
  401680:	2040c274 	.word	0x2040c274
  401684:	2040c2f4 	.word	0x2040c2f4
  401688:	2040c200 	.word	0x2040c200
  40168c:	2040c204 	.word	0x2040c204
  401690:	2040c2b0 	.word	0x2040c2b0
  401694:	00401211 	.word	0x00401211
  401698:	2040c2ac 	.word	0x2040c2ac
  40169c:	2040c1fc 	.word	0x2040c1fc
  4016a0:	2040c208 	.word	0x2040c208
  4016a4:	2040c270 	.word	0x2040c270
  4016a8:	00406129 	.word	0x00406129
  4016ac:	2040c2f8 	.word	0x2040c2f8
  4016b0:	2040c280 	.word	0x2040c280
  4016b4:	0040048d 	.word	0x0040048d
  4016b8:	004004d9 	.word	0x004004d9

004016bc <xTaskResumeAll>:
{
  4016bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4016c0:	4b38      	ldr	r3, [pc, #224]	; (4017a4 <xTaskResumeAll+0xe8>)
  4016c2:	681b      	ldr	r3, [r3, #0]
  4016c4:	b953      	cbnz	r3, 4016dc <xTaskResumeAll+0x20>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4016dc:	4b32      	ldr	r3, [pc, #200]	; (4017a8 <xTaskResumeAll+0xec>)
  4016de:	4798      	blx	r3
		--uxSchedulerSuspended;
  4016e0:	4b30      	ldr	r3, [pc, #192]	; (4017a4 <xTaskResumeAll+0xe8>)
  4016e2:	681a      	ldr	r2, [r3, #0]
  4016e4:	3a01      	subs	r2, #1
  4016e6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016e8:	681b      	ldr	r3, [r3, #0]
  4016ea:	2b00      	cmp	r3, #0
  4016ec:	d155      	bne.n	40179a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4016ee:	4b2f      	ldr	r3, [pc, #188]	; (4017ac <xTaskResumeAll+0xf0>)
  4016f0:	681b      	ldr	r3, [r3, #0]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d132      	bne.n	40175c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4016f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4016f8:	4b2d      	ldr	r3, [pc, #180]	; (4017b0 <xTaskResumeAll+0xf4>)
  4016fa:	4798      	blx	r3
}
  4016fc:	4620      	mov	r0, r4
  4016fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401702:	68fb      	ldr	r3, [r7, #12]
  401704:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401706:	f104 0018 	add.w	r0, r4, #24
  40170a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40170c:	f104 0804 	add.w	r8, r4, #4
  401710:	4640      	mov	r0, r8
  401712:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401716:	682a      	ldr	r2, [r5, #0]
  401718:	2301      	movs	r3, #1
  40171a:	4083      	lsls	r3, r0
  40171c:	4313      	orrs	r3, r2
  40171e:	602b      	str	r3, [r5, #0]
  401720:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401724:	4641      	mov	r1, r8
  401726:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40172a:	4b22      	ldr	r3, [pc, #136]	; (4017b4 <xTaskResumeAll+0xf8>)
  40172c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40172e:	4b22      	ldr	r3, [pc, #136]	; (4017b8 <xTaskResumeAll+0xfc>)
  401730:	681b      	ldr	r3, [r3, #0]
  401732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401736:	429a      	cmp	r2, r3
  401738:	d20c      	bcs.n	401754 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40173a:	683b      	ldr	r3, [r7, #0]
  40173c:	2b00      	cmp	r3, #0
  40173e:	d1e0      	bne.n	401702 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401740:	4b1e      	ldr	r3, [pc, #120]	; (4017bc <xTaskResumeAll+0x100>)
  401742:	681b      	ldr	r3, [r3, #0]
  401744:	b1db      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401746:	4b1d      	ldr	r3, [pc, #116]	; (4017bc <xTaskResumeAll+0x100>)
  401748:	681b      	ldr	r3, [r3, #0]
  40174a:	b1c3      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40174c:	4e1c      	ldr	r6, [pc, #112]	; (4017c0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40174e:	4d1d      	ldr	r5, [pc, #116]	; (4017c4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401750:	4c1a      	ldr	r4, [pc, #104]	; (4017bc <xTaskResumeAll+0x100>)
  401752:	e00e      	b.n	401772 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401754:	2201      	movs	r2, #1
  401756:	4b1b      	ldr	r3, [pc, #108]	; (4017c4 <xTaskResumeAll+0x108>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	e7ee      	b.n	40173a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40175c:	4f1a      	ldr	r7, [pc, #104]	; (4017c8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40175e:	4e1b      	ldr	r6, [pc, #108]	; (4017cc <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401760:	4d1b      	ldr	r5, [pc, #108]	; (4017d0 <xTaskResumeAll+0x114>)
  401762:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4017d8 <xTaskResumeAll+0x11c>
  401766:	e7e8      	b.n	40173a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401768:	6823      	ldr	r3, [r4, #0]
  40176a:	3b01      	subs	r3, #1
  40176c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40176e:	6823      	ldr	r3, [r4, #0]
  401770:	b12b      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401772:	47b0      	blx	r6
  401774:	2800      	cmp	r0, #0
  401776:	d0f7      	beq.n	401768 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401778:	2301      	movs	r3, #1
  40177a:	602b      	str	r3, [r5, #0]
  40177c:	e7f4      	b.n	401768 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40177e:	4b11      	ldr	r3, [pc, #68]	; (4017c4 <xTaskResumeAll+0x108>)
  401780:	681b      	ldr	r3, [r3, #0]
  401782:	2b01      	cmp	r3, #1
  401784:	d10b      	bne.n	40179e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40178a:	4b12      	ldr	r3, [pc, #72]	; (4017d4 <xTaskResumeAll+0x118>)
  40178c:	601a      	str	r2, [r3, #0]
  40178e:	f3bf 8f4f 	dsb	sy
  401792:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401796:	2401      	movs	r4, #1
  401798:	e7ae      	b.n	4016f8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40179a:	2400      	movs	r4, #0
  40179c:	e7ac      	b.n	4016f8 <xTaskResumeAll+0x3c>
  40179e:	2400      	movs	r4, #0
  4017a0:	e7aa      	b.n	4016f8 <xTaskResumeAll+0x3c>
  4017a2:	bf00      	nop
  4017a4:	2040c274 	.word	0x2040c274
  4017a8:	004005bd 	.word	0x004005bd
  4017ac:	2040c26c 	.word	0x2040c26c
  4017b0:	00400609 	.word	0x00400609
  4017b4:	0040048d 	.word	0x0040048d
  4017b8:	2040c1fc 	.word	0x2040c1fc
  4017bc:	2040c270 	.word	0x2040c270
  4017c0:	00401571 	.word	0x00401571
  4017c4:	2040c2f8 	.word	0x2040c2f8
  4017c8:	2040c2b4 	.word	0x2040c2b4
  4017cc:	004004d9 	.word	0x004004d9
  4017d0:	2040c280 	.word	0x2040c280
  4017d4:	e000ed04 	.word	0xe000ed04
  4017d8:	2040c208 	.word	0x2040c208

004017dc <vTaskDelay>:
	{
  4017dc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4017de:	2800      	cmp	r0, #0
  4017e0:	d029      	beq.n	401836 <vTaskDelay+0x5a>
  4017e2:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4017e4:	4b18      	ldr	r3, [pc, #96]	; (401848 <vTaskDelay+0x6c>)
  4017e6:	681b      	ldr	r3, [r3, #0]
  4017e8:	b153      	cbz	r3, 401800 <vTaskDelay+0x24>
  4017ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ee:	b672      	cpsid	i
  4017f0:	f383 8811 	msr	BASEPRI, r3
  4017f4:	f3bf 8f6f 	isb	sy
  4017f8:	f3bf 8f4f 	dsb	sy
  4017fc:	b662      	cpsie	i
  4017fe:	e7fe      	b.n	4017fe <vTaskDelay+0x22>
			vTaskSuspendAll();
  401800:	4b12      	ldr	r3, [pc, #72]	; (40184c <vTaskDelay+0x70>)
  401802:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401804:	4b12      	ldr	r3, [pc, #72]	; (401850 <vTaskDelay+0x74>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40180a:	4b12      	ldr	r3, [pc, #72]	; (401854 <vTaskDelay+0x78>)
  40180c:	6818      	ldr	r0, [r3, #0]
  40180e:	3004      	adds	r0, #4
  401810:	4b11      	ldr	r3, [pc, #68]	; (401858 <vTaskDelay+0x7c>)
  401812:	4798      	blx	r3
  401814:	b948      	cbnz	r0, 40182a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401816:	4b0f      	ldr	r3, [pc, #60]	; (401854 <vTaskDelay+0x78>)
  401818:	681a      	ldr	r2, [r3, #0]
  40181a:	4910      	ldr	r1, [pc, #64]	; (40185c <vTaskDelay+0x80>)
  40181c:	680b      	ldr	r3, [r1, #0]
  40181e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401820:	2201      	movs	r2, #1
  401822:	4082      	lsls	r2, r0
  401824:	ea23 0302 	bic.w	r3, r3, r2
  401828:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40182a:	4620      	mov	r0, r4
  40182c:	4b0c      	ldr	r3, [pc, #48]	; (401860 <vTaskDelay+0x84>)
  40182e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401830:	4b0c      	ldr	r3, [pc, #48]	; (401864 <vTaskDelay+0x88>)
  401832:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401834:	b938      	cbnz	r0, 401846 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  401836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40183a:	4b0b      	ldr	r3, [pc, #44]	; (401868 <vTaskDelay+0x8c>)
  40183c:	601a      	str	r2, [r3, #0]
  40183e:	f3bf 8f4f 	dsb	sy
  401842:	f3bf 8f6f 	isb	sy
  401846:	bd10      	pop	{r4, pc}
  401848:	2040c274 	.word	0x2040c274
  40184c:	00401555 	.word	0x00401555
  401850:	2040c2f4 	.word	0x2040c2f4
  401854:	2040c1fc 	.word	0x2040c1fc
  401858:	004004d9 	.word	0x004004d9
  40185c:	2040c280 	.word	0x2040c280
  401860:	0040123d 	.word	0x0040123d
  401864:	004016bd 	.word	0x004016bd
  401868:	e000ed04 	.word	0xe000ed04

0040186c <prvIdleTask>:
{
  40186c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40186e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4018f8 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401872:	4e19      	ldr	r6, [pc, #100]	; (4018d8 <prvIdleTask+0x6c>)
				taskYIELD();
  401874:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4018fc <prvIdleTask+0x90>
  401878:	e02a      	b.n	4018d0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40187a:	4b18      	ldr	r3, [pc, #96]	; (4018dc <prvIdleTask+0x70>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	2b01      	cmp	r3, #1
  401880:	d81e      	bhi.n	4018c0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401882:	682b      	ldr	r3, [r5, #0]
  401884:	2b00      	cmp	r3, #0
  401886:	d0f8      	beq.n	40187a <prvIdleTask+0xe>
			vTaskSuspendAll();
  401888:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40188a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40188c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40188e:	2c00      	cmp	r4, #0
  401890:	d0f7      	beq.n	401882 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401892:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <prvIdleTask+0x74>)
  401894:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401896:	68f3      	ldr	r3, [r6, #12]
  401898:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40189a:	1d20      	adds	r0, r4, #4
  40189c:	4b11      	ldr	r3, [pc, #68]	; (4018e4 <prvIdleTask+0x78>)
  40189e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4018a0:	4a11      	ldr	r2, [pc, #68]	; (4018e8 <prvIdleTask+0x7c>)
  4018a2:	6813      	ldr	r3, [r2, #0]
  4018a4:	3b01      	subs	r3, #1
  4018a6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4018a8:	682b      	ldr	r3, [r5, #0]
  4018aa:	3b01      	subs	r3, #1
  4018ac:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4018ae:	4b0f      	ldr	r3, [pc, #60]	; (4018ec <prvIdleTask+0x80>)
  4018b0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4018b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4018b4:	f8df a048 	ldr.w	sl, [pc, #72]	; 401900 <prvIdleTask+0x94>
  4018b8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4018ba:	4620      	mov	r0, r4
  4018bc:	47d0      	blx	sl
  4018be:	e7e0      	b.n	401882 <prvIdleTask+0x16>
				taskYIELD();
  4018c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018c4:	f8c9 3000 	str.w	r3, [r9]
  4018c8:	f3bf 8f4f 	dsb	sy
  4018cc:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4018d0:	4d07      	ldr	r5, [pc, #28]	; (4018f0 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4018d2:	4f08      	ldr	r7, [pc, #32]	; (4018f4 <prvIdleTask+0x88>)
  4018d4:	e7d5      	b.n	401882 <prvIdleTask+0x16>
  4018d6:	bf00      	nop
  4018d8:	2040c2e0 	.word	0x2040c2e0
  4018dc:	2040c208 	.word	0x2040c208
  4018e0:	004005bd 	.word	0x004005bd
  4018e4:	004004d9 	.word	0x004004d9
  4018e8:	2040c26c 	.word	0x2040c26c
  4018ec:	00400609 	.word	0x00400609
  4018f0:	2040c27c 	.word	0x2040c27c
  4018f4:	004016bd 	.word	0x004016bd
  4018f8:	00401555 	.word	0x00401555
  4018fc:	e000ed04 	.word	0xe000ed04
  401900:	00400889 	.word	0x00400889

00401904 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401904:	4b2d      	ldr	r3, [pc, #180]	; (4019bc <vTaskSwitchContext+0xb8>)
  401906:	681b      	ldr	r3, [r3, #0]
  401908:	2b00      	cmp	r3, #0
  40190a:	d12c      	bne.n	401966 <vTaskSwitchContext+0x62>
{
  40190c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40190e:	2200      	movs	r2, #0
  401910:	4b2b      	ldr	r3, [pc, #172]	; (4019c0 <vTaskSwitchContext+0xbc>)
  401912:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401914:	4b2b      	ldr	r3, [pc, #172]	; (4019c4 <vTaskSwitchContext+0xc0>)
  401916:	681b      	ldr	r3, [r3, #0]
  401918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40191a:	681a      	ldr	r2, [r3, #0]
  40191c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401920:	d103      	bne.n	40192a <vTaskSwitchContext+0x26>
  401922:	685a      	ldr	r2, [r3, #4]
  401924:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401928:	d021      	beq.n	40196e <vTaskSwitchContext+0x6a>
  40192a:	4b26      	ldr	r3, [pc, #152]	; (4019c4 <vTaskSwitchContext+0xc0>)
  40192c:	6818      	ldr	r0, [r3, #0]
  40192e:	6819      	ldr	r1, [r3, #0]
  401930:	3134      	adds	r1, #52	; 0x34
  401932:	4b25      	ldr	r3, [pc, #148]	; (4019c8 <vTaskSwitchContext+0xc4>)
  401934:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401936:	4b25      	ldr	r3, [pc, #148]	; (4019cc <vTaskSwitchContext+0xc8>)
  401938:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40193a:	fab3 f383 	clz	r3, r3
  40193e:	b2db      	uxtb	r3, r3
  401940:	f1c3 031f 	rsb	r3, r3, #31
  401944:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401948:	4a21      	ldr	r2, [pc, #132]	; (4019d0 <vTaskSwitchContext+0xcc>)
  40194a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40194e:	b9ba      	cbnz	r2, 401980 <vTaskSwitchContext+0x7c>
	__asm volatile
  401950:	f04f 0380 	mov.w	r3, #128	; 0x80
  401954:	b672      	cpsid	i
  401956:	f383 8811 	msr	BASEPRI, r3
  40195a:	f3bf 8f6f 	isb	sy
  40195e:	f3bf 8f4f 	dsb	sy
  401962:	b662      	cpsie	i
  401964:	e7fe      	b.n	401964 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401966:	2201      	movs	r2, #1
  401968:	4b15      	ldr	r3, [pc, #84]	; (4019c0 <vTaskSwitchContext+0xbc>)
  40196a:	601a      	str	r2, [r3, #0]
  40196c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40196e:	689a      	ldr	r2, [r3, #8]
  401970:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401974:	d1d9      	bne.n	40192a <vTaskSwitchContext+0x26>
  401976:	68db      	ldr	r3, [r3, #12]
  401978:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40197c:	d1d5      	bne.n	40192a <vTaskSwitchContext+0x26>
  40197e:	e7da      	b.n	401936 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401980:	4a13      	ldr	r2, [pc, #76]	; (4019d0 <vTaskSwitchContext+0xcc>)
  401982:	0099      	lsls	r1, r3, #2
  401984:	18c8      	adds	r0, r1, r3
  401986:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40198a:	6844      	ldr	r4, [r0, #4]
  40198c:	6864      	ldr	r4, [r4, #4]
  40198e:	6044      	str	r4, [r0, #4]
  401990:	4419      	add	r1, r3
  401992:	4602      	mov	r2, r0
  401994:	3208      	adds	r2, #8
  401996:	4294      	cmp	r4, r2
  401998:	d009      	beq.n	4019ae <vTaskSwitchContext+0xaa>
  40199a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40199e:	4a0c      	ldr	r2, [pc, #48]	; (4019d0 <vTaskSwitchContext+0xcc>)
  4019a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4019a4:	685b      	ldr	r3, [r3, #4]
  4019a6:	68da      	ldr	r2, [r3, #12]
  4019a8:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <vTaskSwitchContext+0xc0>)
  4019aa:	601a      	str	r2, [r3, #0]
  4019ac:	bd10      	pop	{r4, pc}
  4019ae:	6860      	ldr	r0, [r4, #4]
  4019b0:	4a07      	ldr	r2, [pc, #28]	; (4019d0 <vTaskSwitchContext+0xcc>)
  4019b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4019b6:	6050      	str	r0, [r2, #4]
  4019b8:	e7ef      	b.n	40199a <vTaskSwitchContext+0x96>
  4019ba:	bf00      	nop
  4019bc:	2040c274 	.word	0x2040c274
  4019c0:	2040c2f8 	.word	0x2040c2f8
  4019c4:	2040c1fc 	.word	0x2040c1fc
  4019c8:	00406111 	.word	0x00406111
  4019cc:	2040c280 	.word	0x2040c280
  4019d0:	2040c208 	.word	0x2040c208

004019d4 <vTaskPlaceOnEventList>:
{
  4019d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4019d6:	b1e0      	cbz	r0, 401a12 <vTaskPlaceOnEventList+0x3e>
  4019d8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019da:	4d17      	ldr	r5, [pc, #92]	; (401a38 <vTaskPlaceOnEventList+0x64>)
  4019dc:	6829      	ldr	r1, [r5, #0]
  4019de:	3118      	adds	r1, #24
  4019e0:	4b16      	ldr	r3, [pc, #88]	; (401a3c <vTaskPlaceOnEventList+0x68>)
  4019e2:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019e4:	6828      	ldr	r0, [r5, #0]
  4019e6:	3004      	adds	r0, #4
  4019e8:	4b15      	ldr	r3, [pc, #84]	; (401a40 <vTaskPlaceOnEventList+0x6c>)
  4019ea:	4798      	blx	r3
  4019ec:	b940      	cbnz	r0, 401a00 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019ee:	682a      	ldr	r2, [r5, #0]
  4019f0:	4914      	ldr	r1, [pc, #80]	; (401a44 <vTaskPlaceOnEventList+0x70>)
  4019f2:	680b      	ldr	r3, [r1, #0]
  4019f4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019f6:	2201      	movs	r2, #1
  4019f8:	4082      	lsls	r2, r0
  4019fa:	ea23 0302 	bic.w	r3, r3, r2
  4019fe:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401a00:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a04:	d010      	beq.n	401a28 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401a06:	4b10      	ldr	r3, [pc, #64]	; (401a48 <vTaskPlaceOnEventList+0x74>)
  401a08:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a0a:	4420      	add	r0, r4
  401a0c:	4b0f      	ldr	r3, [pc, #60]	; (401a4c <vTaskPlaceOnEventList+0x78>)
  401a0e:	4798      	blx	r3
  401a10:	bd38      	pop	{r3, r4, r5, pc}
  401a12:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a16:	b672      	cpsid	i
  401a18:	f383 8811 	msr	BASEPRI, r3
  401a1c:	f3bf 8f6f 	isb	sy
  401a20:	f3bf 8f4f 	dsb	sy
  401a24:	b662      	cpsie	i
  401a26:	e7fe      	b.n	401a26 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a28:	4b03      	ldr	r3, [pc, #12]	; (401a38 <vTaskPlaceOnEventList+0x64>)
  401a2a:	6819      	ldr	r1, [r3, #0]
  401a2c:	3104      	adds	r1, #4
  401a2e:	4808      	ldr	r0, [pc, #32]	; (401a50 <vTaskPlaceOnEventList+0x7c>)
  401a30:	4b08      	ldr	r3, [pc, #32]	; (401a54 <vTaskPlaceOnEventList+0x80>)
  401a32:	4798      	blx	r3
  401a34:	bd38      	pop	{r3, r4, r5, pc}
  401a36:	bf00      	nop
  401a38:	2040c1fc 	.word	0x2040c1fc
  401a3c:	004004a5 	.word	0x004004a5
  401a40:	004004d9 	.word	0x004004d9
  401a44:	2040c280 	.word	0x2040c280
  401a48:	2040c2f4 	.word	0x2040c2f4
  401a4c:	0040123d 	.word	0x0040123d
  401a50:	2040c2cc 	.word	0x2040c2cc
  401a54:	0040048d 	.word	0x0040048d

00401a58 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401a58:	b1e8      	cbz	r0, 401a96 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401a5a:	b570      	push	{r4, r5, r6, lr}
  401a5c:	4615      	mov	r5, r2
  401a5e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a60:	4e16      	ldr	r6, [pc, #88]	; (401abc <vTaskPlaceOnEventListRestricted+0x64>)
  401a62:	6831      	ldr	r1, [r6, #0]
  401a64:	3118      	adds	r1, #24
  401a66:	4b16      	ldr	r3, [pc, #88]	; (401ac0 <vTaskPlaceOnEventListRestricted+0x68>)
  401a68:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a6a:	6830      	ldr	r0, [r6, #0]
  401a6c:	3004      	adds	r0, #4
  401a6e:	4b15      	ldr	r3, [pc, #84]	; (401ac4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401a70:	4798      	blx	r3
  401a72:	b940      	cbnz	r0, 401a86 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a74:	6832      	ldr	r2, [r6, #0]
  401a76:	4914      	ldr	r1, [pc, #80]	; (401ac8 <vTaskPlaceOnEventListRestricted+0x70>)
  401a78:	680b      	ldr	r3, [r1, #0]
  401a7a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a7c:	2201      	movs	r2, #1
  401a7e:	4082      	lsls	r2, r0
  401a80:	ea23 0302 	bic.w	r3, r3, r2
  401a84:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401a86:	2d01      	cmp	r5, #1
  401a88:	d010      	beq.n	401aac <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401a8a:	4b10      	ldr	r3, [pc, #64]	; (401acc <vTaskPlaceOnEventListRestricted+0x74>)
  401a8c:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a8e:	4420      	add	r0, r4
  401a90:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <vTaskPlaceOnEventListRestricted+0x78>)
  401a92:	4798      	blx	r3
  401a94:	bd70      	pop	{r4, r5, r6, pc}
  401a96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9a:	b672      	cpsid	i
  401a9c:	f383 8811 	msr	BASEPRI, r3
  401aa0:	f3bf 8f6f 	isb	sy
  401aa4:	f3bf 8f4f 	dsb	sy
  401aa8:	b662      	cpsie	i
  401aaa:	e7fe      	b.n	401aaa <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401aac:	4b03      	ldr	r3, [pc, #12]	; (401abc <vTaskPlaceOnEventListRestricted+0x64>)
  401aae:	6819      	ldr	r1, [r3, #0]
  401ab0:	3104      	adds	r1, #4
  401ab2:	4808      	ldr	r0, [pc, #32]	; (401ad4 <vTaskPlaceOnEventListRestricted+0x7c>)
  401ab4:	4b02      	ldr	r3, [pc, #8]	; (401ac0 <vTaskPlaceOnEventListRestricted+0x68>)
  401ab6:	4798      	blx	r3
  401ab8:	bd70      	pop	{r4, r5, r6, pc}
  401aba:	bf00      	nop
  401abc:	2040c1fc 	.word	0x2040c1fc
  401ac0:	0040048d 	.word	0x0040048d
  401ac4:	004004d9 	.word	0x004004d9
  401ac8:	2040c280 	.word	0x2040c280
  401acc:	2040c2f4 	.word	0x2040c2f4
  401ad0:	0040123d 	.word	0x0040123d
  401ad4:	2040c2cc 	.word	0x2040c2cc

00401ad8 <xTaskRemoveFromEventList>:
{
  401ad8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ada:	68c3      	ldr	r3, [r0, #12]
  401adc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ade:	b324      	cbz	r4, 401b2a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ae0:	f104 0518 	add.w	r5, r4, #24
  401ae4:	4628      	mov	r0, r5
  401ae6:	4b1a      	ldr	r3, [pc, #104]	; (401b50 <xTaskRemoveFromEventList+0x78>)
  401ae8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401aea:	4b1a      	ldr	r3, [pc, #104]	; (401b54 <xTaskRemoveFromEventList+0x7c>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	bb3b      	cbnz	r3, 401b40 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401af0:	1d25      	adds	r5, r4, #4
  401af2:	4628      	mov	r0, r5
  401af4:	4b16      	ldr	r3, [pc, #88]	; (401b50 <xTaskRemoveFromEventList+0x78>)
  401af6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401af8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401afa:	4a17      	ldr	r2, [pc, #92]	; (401b58 <xTaskRemoveFromEventList+0x80>)
  401afc:	6811      	ldr	r1, [r2, #0]
  401afe:	2301      	movs	r3, #1
  401b00:	4083      	lsls	r3, r0
  401b02:	430b      	orrs	r3, r1
  401b04:	6013      	str	r3, [r2, #0]
  401b06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b0a:	4629      	mov	r1, r5
  401b0c:	4b13      	ldr	r3, [pc, #76]	; (401b5c <xTaskRemoveFromEventList+0x84>)
  401b0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b12:	4b13      	ldr	r3, [pc, #76]	; (401b60 <xTaskRemoveFromEventList+0x88>)
  401b14:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b16:	4b13      	ldr	r3, [pc, #76]	; (401b64 <xTaskRemoveFromEventList+0x8c>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b1e:	429a      	cmp	r2, r3
  401b20:	d913      	bls.n	401b4a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401b22:	2001      	movs	r0, #1
  401b24:	4b10      	ldr	r3, [pc, #64]	; (401b68 <xTaskRemoveFromEventList+0x90>)
  401b26:	6018      	str	r0, [r3, #0]
  401b28:	bd38      	pop	{r3, r4, r5, pc}
  401b2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2e:	b672      	cpsid	i
  401b30:	f383 8811 	msr	BASEPRI, r3
  401b34:	f3bf 8f6f 	isb	sy
  401b38:	f3bf 8f4f 	dsb	sy
  401b3c:	b662      	cpsie	i
  401b3e:	e7fe      	b.n	401b3e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b40:	4629      	mov	r1, r5
  401b42:	480a      	ldr	r0, [pc, #40]	; (401b6c <xTaskRemoveFromEventList+0x94>)
  401b44:	4b06      	ldr	r3, [pc, #24]	; (401b60 <xTaskRemoveFromEventList+0x88>)
  401b46:	4798      	blx	r3
  401b48:	e7e5      	b.n	401b16 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401b4a:	2000      	movs	r0, #0
}
  401b4c:	bd38      	pop	{r3, r4, r5, pc}
  401b4e:	bf00      	nop
  401b50:	004004d9 	.word	0x004004d9
  401b54:	2040c274 	.word	0x2040c274
  401b58:	2040c280 	.word	0x2040c280
  401b5c:	2040c208 	.word	0x2040c208
  401b60:	0040048d 	.word	0x0040048d
  401b64:	2040c1fc 	.word	0x2040c1fc
  401b68:	2040c2f8 	.word	0x2040c2f8
  401b6c:	2040c2b4 	.word	0x2040c2b4

00401b70 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401b70:	b130      	cbz	r0, 401b80 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b72:	4a09      	ldr	r2, [pc, #36]	; (401b98 <vTaskSetTimeOutState+0x28>)
  401b74:	6812      	ldr	r2, [r2, #0]
  401b76:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b78:	4a08      	ldr	r2, [pc, #32]	; (401b9c <vTaskSetTimeOutState+0x2c>)
  401b7a:	6812      	ldr	r2, [r2, #0]
  401b7c:	6042      	str	r2, [r0, #4]
  401b7e:	4770      	bx	lr
  401b80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b84:	b672      	cpsid	i
  401b86:	f383 8811 	msr	BASEPRI, r3
  401b8a:	f3bf 8f6f 	isb	sy
  401b8e:	f3bf 8f4f 	dsb	sy
  401b92:	b662      	cpsie	i
  401b94:	e7fe      	b.n	401b94 <vTaskSetTimeOutState+0x24>
  401b96:	bf00      	nop
  401b98:	2040c2b0 	.word	0x2040c2b0
  401b9c:	2040c2f4 	.word	0x2040c2f4

00401ba0 <xTaskCheckForTimeOut>:
{
  401ba0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401ba2:	b1c0      	cbz	r0, 401bd6 <xTaskCheckForTimeOut+0x36>
  401ba4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401ba6:	b309      	cbz	r1, 401bec <xTaskCheckForTimeOut+0x4c>
  401ba8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401baa:	4b1d      	ldr	r3, [pc, #116]	; (401c20 <xTaskCheckForTimeOut+0x80>)
  401bac:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401bae:	4b1d      	ldr	r3, [pc, #116]	; (401c24 <xTaskCheckForTimeOut+0x84>)
  401bb0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401bb2:	682b      	ldr	r3, [r5, #0]
  401bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bb8:	d02e      	beq.n	401c18 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bba:	491b      	ldr	r1, [pc, #108]	; (401c28 <xTaskCheckForTimeOut+0x88>)
  401bbc:	6809      	ldr	r1, [r1, #0]
  401bbe:	6820      	ldr	r0, [r4, #0]
  401bc0:	4288      	cmp	r0, r1
  401bc2:	d002      	beq.n	401bca <xTaskCheckForTimeOut+0x2a>
  401bc4:	6861      	ldr	r1, [r4, #4]
  401bc6:	428a      	cmp	r2, r1
  401bc8:	d228      	bcs.n	401c1c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401bca:	6861      	ldr	r1, [r4, #4]
  401bcc:	1a50      	subs	r0, r2, r1
  401bce:	4283      	cmp	r3, r0
  401bd0:	d817      	bhi.n	401c02 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401bd2:	2401      	movs	r4, #1
  401bd4:	e01c      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
  401bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bda:	b672      	cpsid	i
  401bdc:	f383 8811 	msr	BASEPRI, r3
  401be0:	f3bf 8f6f 	isb	sy
  401be4:	f3bf 8f4f 	dsb	sy
  401be8:	b662      	cpsie	i
  401bea:	e7fe      	b.n	401bea <xTaskCheckForTimeOut+0x4a>
  401bec:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf0:	b672      	cpsid	i
  401bf2:	f383 8811 	msr	BASEPRI, r3
  401bf6:	f3bf 8f6f 	isb	sy
  401bfa:	f3bf 8f4f 	dsb	sy
  401bfe:	b662      	cpsie	i
  401c00:	e7fe      	b.n	401c00 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401c02:	1a9b      	subs	r3, r3, r2
  401c04:	440b      	add	r3, r1
  401c06:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401c08:	4620      	mov	r0, r4
  401c0a:	4b08      	ldr	r3, [pc, #32]	; (401c2c <xTaskCheckForTimeOut+0x8c>)
  401c0c:	4798      	blx	r3
			xReturn = pdFALSE;
  401c0e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401c10:	4b07      	ldr	r3, [pc, #28]	; (401c30 <xTaskCheckForTimeOut+0x90>)
  401c12:	4798      	blx	r3
}
  401c14:	4620      	mov	r0, r4
  401c16:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401c18:	2400      	movs	r4, #0
  401c1a:	e7f9      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401c1c:	2401      	movs	r4, #1
  401c1e:	e7f7      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
  401c20:	004005bd 	.word	0x004005bd
  401c24:	2040c2f4 	.word	0x2040c2f4
  401c28:	2040c2b0 	.word	0x2040c2b0
  401c2c:	00401b71 	.word	0x00401b71
  401c30:	00400609 	.word	0x00400609

00401c34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401c34:	2201      	movs	r2, #1
  401c36:	4b01      	ldr	r3, [pc, #4]	; (401c3c <vTaskMissedYield+0x8>)
  401c38:	601a      	str	r2, [r3, #0]
  401c3a:	4770      	bx	lr
  401c3c:	2040c2f8 	.word	0x2040c2f8

00401c40 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c40:	4b05      	ldr	r3, [pc, #20]	; (401c58 <xTaskGetSchedulerState+0x18>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	b133      	cbz	r3, 401c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c46:	4b05      	ldr	r3, [pc, #20]	; (401c5c <xTaskGetSchedulerState+0x1c>)
  401c48:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c4a:	2b00      	cmp	r3, #0
  401c4c:	bf0c      	ite	eq
  401c4e:	2002      	moveq	r0, #2
  401c50:	2000      	movne	r0, #0
  401c52:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c54:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401c56:	4770      	bx	lr
  401c58:	2040c2c8 	.word	0x2040c2c8
  401c5c:	2040c274 	.word	0x2040c274

00401c60 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c60:	2800      	cmp	r0, #0
  401c62:	d044      	beq.n	401cee <vTaskPriorityInherit+0x8e>
	{
  401c64:	b538      	push	{r3, r4, r5, lr}
  401c66:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c6a:	4921      	ldr	r1, [pc, #132]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c6c:	6809      	ldr	r1, [r1, #0]
  401c6e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c70:	428a      	cmp	r2, r1
  401c72:	d214      	bcs.n	401c9e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401c74:	6981      	ldr	r1, [r0, #24]
  401c76:	2900      	cmp	r1, #0
  401c78:	db05      	blt.n	401c86 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c7a:	491d      	ldr	r1, [pc, #116]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c7c:	6809      	ldr	r1, [r1, #0]
  401c7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c80:	f1c1 0105 	rsb	r1, r1, #5
  401c84:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c8a:	491a      	ldr	r1, [pc, #104]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401c8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401c90:	6961      	ldr	r1, [r4, #20]
  401c92:	4291      	cmp	r1, r2
  401c94:	d004      	beq.n	401ca0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c96:	4a16      	ldr	r2, [pc, #88]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c98:	6812      	ldr	r2, [r2, #0]
  401c9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401c9c:	62e2      	str	r2, [r4, #44]	; 0x2c
  401c9e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ca0:	1d25      	adds	r5, r4, #4
  401ca2:	4628      	mov	r0, r5
  401ca4:	4b14      	ldr	r3, [pc, #80]	; (401cf8 <vTaskPriorityInherit+0x98>)
  401ca6:	4798      	blx	r3
  401ca8:	b970      	cbnz	r0, 401cc8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401cac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401cb0:	4a10      	ldr	r2, [pc, #64]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401cb2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401cb6:	b93a      	cbnz	r2, 401cc8 <vTaskPriorityInherit+0x68>
  401cb8:	4810      	ldr	r0, [pc, #64]	; (401cfc <vTaskPriorityInherit+0x9c>)
  401cba:	6802      	ldr	r2, [r0, #0]
  401cbc:	2101      	movs	r1, #1
  401cbe:	fa01 f303 	lsl.w	r3, r1, r3
  401cc2:	ea22 0303 	bic.w	r3, r2, r3
  401cc6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cc8:	4b09      	ldr	r3, [pc, #36]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401cce:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401cd0:	4a0a      	ldr	r2, [pc, #40]	; (401cfc <vTaskPriorityInherit+0x9c>)
  401cd2:	6811      	ldr	r1, [r2, #0]
  401cd4:	2301      	movs	r3, #1
  401cd6:	4083      	lsls	r3, r0
  401cd8:	430b      	orrs	r3, r1
  401cda:	6013      	str	r3, [r2, #0]
  401cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ce0:	4629      	mov	r1, r5
  401ce2:	4b04      	ldr	r3, [pc, #16]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ce8:	4b05      	ldr	r3, [pc, #20]	; (401d00 <vTaskPriorityInherit+0xa0>)
  401cea:	4798      	blx	r3
  401cec:	bd38      	pop	{r3, r4, r5, pc}
  401cee:	4770      	bx	lr
  401cf0:	2040c1fc 	.word	0x2040c1fc
  401cf4:	2040c208 	.word	0x2040c208
  401cf8:	004004d9 	.word	0x004004d9
  401cfc:	2040c280 	.word	0x2040c280
  401d00:	0040048d 	.word	0x0040048d

00401d04 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401d04:	2800      	cmp	r0, #0
  401d06:	d04d      	beq.n	401da4 <xTaskPriorityDisinherit+0xa0>
	{
  401d08:	b538      	push	{r3, r4, r5, lr}
  401d0a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401d0c:	4a27      	ldr	r2, [pc, #156]	; (401dac <xTaskPriorityDisinherit+0xa8>)
  401d0e:	6812      	ldr	r2, [r2, #0]
  401d10:	4290      	cmp	r0, r2
  401d12:	d00a      	beq.n	401d2a <xTaskPriorityDisinherit+0x26>
  401d14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d18:	b672      	cpsid	i
  401d1a:	f383 8811 	msr	BASEPRI, r3
  401d1e:	f3bf 8f6f 	isb	sy
  401d22:	f3bf 8f4f 	dsb	sy
  401d26:	b662      	cpsie	i
  401d28:	e7fe      	b.n	401d28 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401d2a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d2c:	b952      	cbnz	r2, 401d44 <xTaskPriorityDisinherit+0x40>
  401d2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d32:	b672      	cpsid	i
  401d34:	f383 8811 	msr	BASEPRI, r3
  401d38:	f3bf 8f6f 	isb	sy
  401d3c:	f3bf 8f4f 	dsb	sy
  401d40:	b662      	cpsie	i
  401d42:	e7fe      	b.n	401d42 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401d44:	3a01      	subs	r2, #1
  401d46:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401d4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d4c:	4288      	cmp	r0, r1
  401d4e:	d02b      	beq.n	401da8 <xTaskPriorityDisinherit+0xa4>
  401d50:	bb52      	cbnz	r2, 401da8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d52:	1d25      	adds	r5, r4, #4
  401d54:	4628      	mov	r0, r5
  401d56:	4b16      	ldr	r3, [pc, #88]	; (401db0 <xTaskPriorityDisinherit+0xac>)
  401d58:	4798      	blx	r3
  401d5a:	b968      	cbnz	r0, 401d78 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d5e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d62:	4b14      	ldr	r3, [pc, #80]	; (401db4 <xTaskPriorityDisinherit+0xb0>)
  401d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d68:	b933      	cbnz	r3, 401d78 <xTaskPriorityDisinherit+0x74>
  401d6a:	4813      	ldr	r0, [pc, #76]	; (401db8 <xTaskPriorityDisinherit+0xb4>)
  401d6c:	6803      	ldr	r3, [r0, #0]
  401d6e:	2201      	movs	r2, #1
  401d70:	408a      	lsls	r2, r1
  401d72:	ea23 0302 	bic.w	r3, r3, r2
  401d76:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401d7a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d7c:	f1c0 0305 	rsb	r3, r0, #5
  401d80:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401d82:	4a0d      	ldr	r2, [pc, #52]	; (401db8 <xTaskPriorityDisinherit+0xb4>)
  401d84:	6811      	ldr	r1, [r2, #0]
  401d86:	2401      	movs	r4, #1
  401d88:	fa04 f300 	lsl.w	r3, r4, r0
  401d8c:	430b      	orrs	r3, r1
  401d8e:	6013      	str	r3, [r2, #0]
  401d90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d94:	4629      	mov	r1, r5
  401d96:	4b07      	ldr	r3, [pc, #28]	; (401db4 <xTaskPriorityDisinherit+0xb0>)
  401d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d9c:	4b07      	ldr	r3, [pc, #28]	; (401dbc <xTaskPriorityDisinherit+0xb8>)
  401d9e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401da0:	4620      	mov	r0, r4
  401da2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401da4:	2000      	movs	r0, #0
  401da6:	4770      	bx	lr
  401da8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401daa:	bd38      	pop	{r3, r4, r5, pc}
  401dac:	2040c1fc 	.word	0x2040c1fc
  401db0:	004004d9 	.word	0x004004d9
  401db4:	2040c208 	.word	0x2040c208
  401db8:	2040c280 	.word	0x2040c280
  401dbc:	0040048d 	.word	0x0040048d

00401dc0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401dc0:	4b05      	ldr	r3, [pc, #20]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	b123      	cbz	r3, 401dd0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401dc6:	4b04      	ldr	r3, [pc, #16]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dc8:	681a      	ldr	r2, [r3, #0]
  401dca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401dcc:	3301      	adds	r3, #1
  401dce:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401dd0:	4b01      	ldr	r3, [pc, #4]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dd2:	6818      	ldr	r0, [r3, #0]
	}
  401dd4:	4770      	bx	lr
  401dd6:	bf00      	nop
  401dd8:	2040c1fc 	.word	0x2040c1fc

00401ddc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401ddc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401dde:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401de0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401de2:	4291      	cmp	r1, r2
  401de4:	d80c      	bhi.n	401e00 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401de6:	1ad2      	subs	r2, r2, r3
  401de8:	6983      	ldr	r3, [r0, #24]
  401dea:	429a      	cmp	r2, r3
  401dec:	d301      	bcc.n	401df2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401dee:	2001      	movs	r0, #1
  401df0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401df2:	1d01      	adds	r1, r0, #4
  401df4:	4b09      	ldr	r3, [pc, #36]	; (401e1c <prvInsertTimerInActiveList+0x40>)
  401df6:	6818      	ldr	r0, [r3, #0]
  401df8:	4b09      	ldr	r3, [pc, #36]	; (401e20 <prvInsertTimerInActiveList+0x44>)
  401dfa:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401dfc:	2000      	movs	r0, #0
  401dfe:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401e00:	429a      	cmp	r2, r3
  401e02:	d203      	bcs.n	401e0c <prvInsertTimerInActiveList+0x30>
  401e04:	4299      	cmp	r1, r3
  401e06:	d301      	bcc.n	401e0c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401e08:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401e0a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401e0c:	1d01      	adds	r1, r0, #4
  401e0e:	4b05      	ldr	r3, [pc, #20]	; (401e24 <prvInsertTimerInActiveList+0x48>)
  401e10:	6818      	ldr	r0, [r3, #0]
  401e12:	4b03      	ldr	r3, [pc, #12]	; (401e20 <prvInsertTimerInActiveList+0x44>)
  401e14:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401e16:	2000      	movs	r0, #0
  401e18:	bd08      	pop	{r3, pc}
  401e1a:	bf00      	nop
  401e1c:	2040c300 	.word	0x2040c300
  401e20:	004004a5 	.word	0x004004a5
  401e24:	2040c2fc 	.word	0x2040c2fc

00401e28 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401e28:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401e2a:	4b15      	ldr	r3, [pc, #84]	; (401e80 <prvCheckForValidListAndQueue+0x58>)
  401e2c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401e2e:	4b15      	ldr	r3, [pc, #84]	; (401e84 <prvCheckForValidListAndQueue+0x5c>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	b113      	cbz	r3, 401e3a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401e34:	4b14      	ldr	r3, [pc, #80]	; (401e88 <prvCheckForValidListAndQueue+0x60>)
  401e36:	4798      	blx	r3
  401e38:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401e3a:	4d14      	ldr	r5, [pc, #80]	; (401e8c <prvCheckForValidListAndQueue+0x64>)
  401e3c:	4628      	mov	r0, r5
  401e3e:	4e14      	ldr	r6, [pc, #80]	; (401e90 <prvCheckForValidListAndQueue+0x68>)
  401e40:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401e42:	4c14      	ldr	r4, [pc, #80]	; (401e94 <prvCheckForValidListAndQueue+0x6c>)
  401e44:	4620      	mov	r0, r4
  401e46:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401e48:	4b13      	ldr	r3, [pc, #76]	; (401e98 <prvCheckForValidListAndQueue+0x70>)
  401e4a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401e4c:	4b13      	ldr	r3, [pc, #76]	; (401e9c <prvCheckForValidListAndQueue+0x74>)
  401e4e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401e50:	2200      	movs	r2, #0
  401e52:	2110      	movs	r1, #16
  401e54:	2005      	movs	r0, #5
  401e56:	4b12      	ldr	r3, [pc, #72]	; (401ea0 <prvCheckForValidListAndQueue+0x78>)
  401e58:	4798      	blx	r3
  401e5a:	4b0a      	ldr	r3, [pc, #40]	; (401e84 <prvCheckForValidListAndQueue+0x5c>)
  401e5c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e5e:	b118      	cbz	r0, 401e68 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401e60:	4910      	ldr	r1, [pc, #64]	; (401ea4 <prvCheckForValidListAndQueue+0x7c>)
  401e62:	4b11      	ldr	r3, [pc, #68]	; (401ea8 <prvCheckForValidListAndQueue+0x80>)
  401e64:	4798      	blx	r3
  401e66:	e7e5      	b.n	401e34 <prvCheckForValidListAndQueue+0xc>
  401e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6c:	b672      	cpsid	i
  401e6e:	f383 8811 	msr	BASEPRI, r3
  401e72:	f3bf 8f6f 	isb	sy
  401e76:	f3bf 8f4f 	dsb	sy
  401e7a:	b662      	cpsie	i
  401e7c:	e7fe      	b.n	401e7c <prvCheckForValidListAndQueue+0x54>
  401e7e:	bf00      	nop
  401e80:	004005bd 	.word	0x004005bd
  401e84:	2040c330 	.word	0x2040c330
  401e88:	00400609 	.word	0x00400609
  401e8c:	2040c304 	.word	0x2040c304
  401e90:	00400471 	.word	0x00400471
  401e94:	2040c318 	.word	0x2040c318
  401e98:	2040c2fc 	.word	0x2040c2fc
  401e9c:	2040c300 	.word	0x2040c300
  401ea0:	00400b15 	.word	0x00400b15
  401ea4:	00409824 	.word	0x00409824
  401ea8:	00401185 	.word	0x00401185

00401eac <xTimerCreateTimerTask>:
{
  401eac:	b510      	push	{r4, lr}
  401eae:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401eb0:	4b0f      	ldr	r3, [pc, #60]	; (401ef0 <xTimerCreateTimerTask+0x44>)
  401eb2:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401eb4:	4b0f      	ldr	r3, [pc, #60]	; (401ef4 <xTimerCreateTimerTask+0x48>)
  401eb6:	681b      	ldr	r3, [r3, #0]
  401eb8:	b173      	cbz	r3, 401ed8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401eba:	2300      	movs	r3, #0
  401ebc:	9303      	str	r3, [sp, #12]
  401ebe:	9302      	str	r3, [sp, #8]
  401ec0:	9301      	str	r3, [sp, #4]
  401ec2:	2204      	movs	r2, #4
  401ec4:	9200      	str	r2, [sp, #0]
  401ec6:	f44f 7282 	mov.w	r2, #260	; 0x104
  401eca:	490b      	ldr	r1, [pc, #44]	; (401ef8 <xTimerCreateTimerTask+0x4c>)
  401ecc:	480b      	ldr	r0, [pc, #44]	; (401efc <xTimerCreateTimerTask+0x50>)
  401ece:	4c0c      	ldr	r4, [pc, #48]	; (401f00 <xTimerCreateTimerTask+0x54>)
  401ed0:	47a0      	blx	r4
	configASSERT( xReturn );
  401ed2:	b108      	cbz	r0, 401ed8 <xTimerCreateTimerTask+0x2c>
}
  401ed4:	b004      	add	sp, #16
  401ed6:	bd10      	pop	{r4, pc}
  401ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401edc:	b672      	cpsid	i
  401ede:	f383 8811 	msr	BASEPRI, r3
  401ee2:	f3bf 8f6f 	isb	sy
  401ee6:	f3bf 8f4f 	dsb	sy
  401eea:	b662      	cpsie	i
  401eec:	e7fe      	b.n	401eec <xTimerCreateTimerTask+0x40>
  401eee:	bf00      	nop
  401ef0:	00401e29 	.word	0x00401e29
  401ef4:	2040c330 	.word	0x2040c330
  401ef8:	0040982c 	.word	0x0040982c
  401efc:	0040202d 	.word	0x0040202d
  401f00:	00401295 	.word	0x00401295

00401f04 <xTimerGenericCommand>:
	configASSERT( xTimer );
  401f04:	b1d8      	cbz	r0, 401f3e <xTimerGenericCommand+0x3a>
{
  401f06:	b530      	push	{r4, r5, lr}
  401f08:	b085      	sub	sp, #20
  401f0a:	4615      	mov	r5, r2
  401f0c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  401f0e:	4a15      	ldr	r2, [pc, #84]	; (401f64 <xTimerGenericCommand+0x60>)
  401f10:	6810      	ldr	r0, [r2, #0]
  401f12:	b320      	cbz	r0, 401f5e <xTimerGenericCommand+0x5a>
  401f14:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  401f16:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401f18:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401f1a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401f1c:	2905      	cmp	r1, #5
  401f1e:	dc19      	bgt.n	401f54 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401f20:	4b11      	ldr	r3, [pc, #68]	; (401f68 <xTimerGenericCommand+0x64>)
  401f22:	4798      	blx	r3
  401f24:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401f26:	f04f 0300 	mov.w	r3, #0
  401f2a:	bf0c      	ite	eq
  401f2c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401f2e:	461a      	movne	r2, r3
  401f30:	4669      	mov	r1, sp
  401f32:	480c      	ldr	r0, [pc, #48]	; (401f64 <xTimerGenericCommand+0x60>)
  401f34:	6800      	ldr	r0, [r0, #0]
  401f36:	4c0d      	ldr	r4, [pc, #52]	; (401f6c <xTimerGenericCommand+0x68>)
  401f38:	47a0      	blx	r4
}
  401f3a:	b005      	add	sp, #20
  401f3c:	bd30      	pop	{r4, r5, pc}
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401f54:	2300      	movs	r3, #0
  401f56:	4669      	mov	r1, sp
  401f58:	4c05      	ldr	r4, [pc, #20]	; (401f70 <xTimerGenericCommand+0x6c>)
  401f5a:	47a0      	blx	r4
  401f5c:	e7ed      	b.n	401f3a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  401f5e:	2000      	movs	r0, #0
	return xReturn;
  401f60:	e7eb      	b.n	401f3a <xTimerGenericCommand+0x36>
  401f62:	bf00      	nop
  401f64:	2040c330 	.word	0x2040c330
  401f68:	00401c41 	.word	0x00401c41
  401f6c:	00400bf1 	.word	0x00400bf1
  401f70:	00400dd5 	.word	0x00400dd5

00401f74 <prvSampleTimeNow>:
{
  401f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f78:	b082      	sub	sp, #8
  401f7a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401f7c:	4b24      	ldr	r3, [pc, #144]	; (402010 <prvSampleTimeNow+0x9c>)
  401f7e:	4798      	blx	r3
  401f80:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401f82:	4b24      	ldr	r3, [pc, #144]	; (402014 <prvSampleTimeNow+0xa0>)
  401f84:	681b      	ldr	r3, [r3, #0]
  401f86:	4298      	cmp	r0, r3
  401f88:	d31b      	bcc.n	401fc2 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  401f8a:	2300      	movs	r3, #0
  401f8c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401f90:	4b20      	ldr	r3, [pc, #128]	; (402014 <prvSampleTimeNow+0xa0>)
  401f92:	601f      	str	r7, [r3, #0]
}
  401f94:	4638      	mov	r0, r7
  401f96:	b002      	add	sp, #8
  401f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f9c:	2100      	movs	r1, #0
  401f9e:	9100      	str	r1, [sp, #0]
  401fa0:	460b      	mov	r3, r1
  401fa2:	4652      	mov	r2, sl
  401fa4:	4620      	mov	r0, r4
  401fa6:	4c1c      	ldr	r4, [pc, #112]	; (402018 <prvSampleTimeNow+0xa4>)
  401fa8:	47a0      	blx	r4
				configASSERT( xResult );
  401faa:	b960      	cbnz	r0, 401fc6 <prvSampleTimeNow+0x52>
  401fac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fb0:	b672      	cpsid	i
  401fb2:	f383 8811 	msr	BASEPRI, r3
  401fb6:	f3bf 8f6f 	isb	sy
  401fba:	f3bf 8f4f 	dsb	sy
  401fbe:	b662      	cpsie	i
  401fc0:	e7fe      	b.n	401fc0 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc2:	4d16      	ldr	r5, [pc, #88]	; (40201c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fc4:	4e16      	ldr	r6, [pc, #88]	; (402020 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc6:	682b      	ldr	r3, [r5, #0]
  401fc8:	681a      	ldr	r2, [r3, #0]
  401fca:	b1c2      	cbz	r2, 401ffe <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fcc:	68db      	ldr	r3, [r3, #12]
  401fce:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fd2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fd4:	f104 0904 	add.w	r9, r4, #4
  401fd8:	4648      	mov	r0, r9
  401fda:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fde:	4620      	mov	r0, r4
  401fe0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401fe2:	69e3      	ldr	r3, [r4, #28]
  401fe4:	2b01      	cmp	r3, #1
  401fe6:	d1ee      	bne.n	401fc6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401fe8:	69a3      	ldr	r3, [r4, #24]
  401fea:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401fec:	459a      	cmp	sl, r3
  401fee:	d2d5      	bcs.n	401f9c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401ff0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ff2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ff4:	4649      	mov	r1, r9
  401ff6:	6828      	ldr	r0, [r5, #0]
  401ff8:	4b0a      	ldr	r3, [pc, #40]	; (402024 <prvSampleTimeNow+0xb0>)
  401ffa:	4798      	blx	r3
  401ffc:	e7e3      	b.n	401fc6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  401ffe:	4a0a      	ldr	r2, [pc, #40]	; (402028 <prvSampleTimeNow+0xb4>)
  402000:	6810      	ldr	r0, [r2, #0]
  402002:	4906      	ldr	r1, [pc, #24]	; (40201c <prvSampleTimeNow+0xa8>)
  402004:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402006:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402008:	2301      	movs	r3, #1
  40200a:	f8c8 3000 	str.w	r3, [r8]
  40200e:	e7bf      	b.n	401f90 <prvSampleTimeNow+0x1c>
  402010:	00401565 	.word	0x00401565
  402014:	2040c32c 	.word	0x2040c32c
  402018:	00401f05 	.word	0x00401f05
  40201c:	2040c2fc 	.word	0x2040c2fc
  402020:	004004d9 	.word	0x004004d9
  402024:	004004a5 	.word	0x004004a5
  402028:	2040c300 	.word	0x2040c300

0040202c <prvTimerTask>:
{
  40202c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402030:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402032:	4e75      	ldr	r6, [pc, #468]	; (402208 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402034:	4f75      	ldr	r7, [pc, #468]	; (40220c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402036:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402234 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40203a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402238 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40203e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402040:	681a      	ldr	r2, [r3, #0]
  402042:	2a00      	cmp	r2, #0
  402044:	f000 80ce 	beq.w	4021e4 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402048:	68db      	ldr	r3, [r3, #12]
  40204a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  40204c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40204e:	a804      	add	r0, sp, #16
  402050:	4b6f      	ldr	r3, [pc, #444]	; (402210 <prvTimerTask+0x1e4>)
  402052:	4798      	blx	r3
  402054:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402056:	9b04      	ldr	r3, [sp, #16]
  402058:	2b00      	cmp	r3, #0
  40205a:	d144      	bne.n	4020e6 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40205c:	42a0      	cmp	r0, r4
  40205e:	d212      	bcs.n	402086 <prvTimerTask+0x5a>
  402060:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402062:	1b61      	subs	r1, r4, r5
  402064:	4b6b      	ldr	r3, [pc, #428]	; (402214 <prvTimerTask+0x1e8>)
  402066:	6818      	ldr	r0, [r3, #0]
  402068:	4b6b      	ldr	r3, [pc, #428]	; (402218 <prvTimerTask+0x1ec>)
  40206a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40206c:	4b6b      	ldr	r3, [pc, #428]	; (40221c <prvTimerTask+0x1f0>)
  40206e:	4798      	blx	r3
  402070:	2800      	cmp	r0, #0
  402072:	d13a      	bne.n	4020ea <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402078:	f8c9 3000 	str.w	r3, [r9]
  40207c:	f3bf 8f4f 	dsb	sy
  402080:	f3bf 8f6f 	isb	sy
  402084:	e031      	b.n	4020ea <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402086:	4b65      	ldr	r3, [pc, #404]	; (40221c <prvTimerTask+0x1f0>)
  402088:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40208a:	6833      	ldr	r3, [r6, #0]
  40208c:	68db      	ldr	r3, [r3, #12]
  40208e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402092:	f10a 0004 	add.w	r0, sl, #4
  402096:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402098:	f8da 301c 	ldr.w	r3, [sl, #28]
  40209c:	2b01      	cmp	r3, #1
  40209e:	d004      	beq.n	4020aa <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4020a4:	4650      	mov	r0, sl
  4020a6:	4798      	blx	r3
  4020a8:	e01f      	b.n	4020ea <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4020aa:	f8da 1018 	ldr.w	r1, [sl, #24]
  4020ae:	4623      	mov	r3, r4
  4020b0:	462a      	mov	r2, r5
  4020b2:	4421      	add	r1, r4
  4020b4:	4650      	mov	r0, sl
  4020b6:	4d5a      	ldr	r5, [pc, #360]	; (402220 <prvTimerTask+0x1f4>)
  4020b8:	47a8      	blx	r5
  4020ba:	2801      	cmp	r0, #1
  4020bc:	d1f0      	bne.n	4020a0 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020be:	2100      	movs	r1, #0
  4020c0:	9100      	str	r1, [sp, #0]
  4020c2:	460b      	mov	r3, r1
  4020c4:	4622      	mov	r2, r4
  4020c6:	4650      	mov	r0, sl
  4020c8:	4c56      	ldr	r4, [pc, #344]	; (402224 <prvTimerTask+0x1f8>)
  4020ca:	47a0      	blx	r4
			configASSERT( xResult );
  4020cc:	2800      	cmp	r0, #0
  4020ce:	d1e7      	bne.n	4020a0 <prvTimerTask+0x74>
  4020d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d4:	b672      	cpsid	i
  4020d6:	f383 8811 	msr	BASEPRI, r3
  4020da:	f3bf 8f6f 	isb	sy
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	b662      	cpsie	i
  4020e4:	e7fe      	b.n	4020e4 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4020e6:	4b4d      	ldr	r3, [pc, #308]	; (40221c <prvTimerTask+0x1f0>)
  4020e8:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020ea:	4d4a      	ldr	r5, [pc, #296]	; (402214 <prvTimerTask+0x1e8>)
  4020ec:	4c4e      	ldr	r4, [pc, #312]	; (402228 <prvTimerTask+0x1fc>)
  4020ee:	e006      	b.n	4020fe <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4020f0:	9907      	ldr	r1, [sp, #28]
  4020f2:	9806      	ldr	r0, [sp, #24]
  4020f4:	9b05      	ldr	r3, [sp, #20]
  4020f6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4020f8:	9b04      	ldr	r3, [sp, #16]
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	da09      	bge.n	402112 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020fe:	2300      	movs	r3, #0
  402100:	461a      	mov	r2, r3
  402102:	a904      	add	r1, sp, #16
  402104:	6828      	ldr	r0, [r5, #0]
  402106:	47a0      	blx	r4
  402108:	2800      	cmp	r0, #0
  40210a:	d098      	beq.n	40203e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40210c:	9b04      	ldr	r3, [sp, #16]
  40210e:	2b00      	cmp	r3, #0
  402110:	dbee      	blt.n	4020f0 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402112:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402116:	f8da 3014 	ldr.w	r3, [sl, #20]
  40211a:	b113      	cbz	r3, 402122 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40211c:	f10a 0004 	add.w	r0, sl, #4
  402120:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402122:	a803      	add	r0, sp, #12
  402124:	4b3a      	ldr	r3, [pc, #232]	; (402210 <prvTimerTask+0x1e4>)
  402126:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402128:	9b04      	ldr	r3, [sp, #16]
  40212a:	2b09      	cmp	r3, #9
  40212c:	d8e7      	bhi.n	4020fe <prvTimerTask+0xd2>
  40212e:	a201      	add	r2, pc, #4	; (adr r2, 402134 <prvTimerTask+0x108>)
  402130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402134:	0040215d 	.word	0x0040215d
  402138:	0040215d 	.word	0x0040215d
  40213c:	0040215d 	.word	0x0040215d
  402140:	004020ff 	.word	0x004020ff
  402144:	004021b1 	.word	0x004021b1
  402148:	004021dd 	.word	0x004021dd
  40214c:	0040215d 	.word	0x0040215d
  402150:	0040215d 	.word	0x0040215d
  402154:	004020ff 	.word	0x004020ff
  402158:	004021b1 	.word	0x004021b1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40215c:	9c05      	ldr	r4, [sp, #20]
  40215e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402162:	4623      	mov	r3, r4
  402164:	4602      	mov	r2, r0
  402166:	4421      	add	r1, r4
  402168:	4650      	mov	r0, sl
  40216a:	4c2d      	ldr	r4, [pc, #180]	; (402220 <prvTimerTask+0x1f4>)
  40216c:	47a0      	blx	r4
  40216e:	2801      	cmp	r0, #1
  402170:	d1bc      	bne.n	4020ec <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402172:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402176:	4650      	mov	r0, sl
  402178:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40217a:	f8da 301c 	ldr.w	r3, [sl, #28]
  40217e:	2b01      	cmp	r3, #1
  402180:	d1b4      	bne.n	4020ec <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402182:	f8da 2018 	ldr.w	r2, [sl, #24]
  402186:	2100      	movs	r1, #0
  402188:	9100      	str	r1, [sp, #0]
  40218a:	460b      	mov	r3, r1
  40218c:	9805      	ldr	r0, [sp, #20]
  40218e:	4402      	add	r2, r0
  402190:	4650      	mov	r0, sl
  402192:	4c24      	ldr	r4, [pc, #144]	; (402224 <prvTimerTask+0x1f8>)
  402194:	47a0      	blx	r4
							configASSERT( xResult );
  402196:	2800      	cmp	r0, #0
  402198:	d1a8      	bne.n	4020ec <prvTimerTask+0xc0>
  40219a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40219e:	b672      	cpsid	i
  4021a0:	f383 8811 	msr	BASEPRI, r3
  4021a4:	f3bf 8f6f 	isb	sy
  4021a8:	f3bf 8f4f 	dsb	sy
  4021ac:	b662      	cpsie	i
  4021ae:	e7fe      	b.n	4021ae <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4021b0:	9905      	ldr	r1, [sp, #20]
  4021b2:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021b6:	b131      	cbz	r1, 4021c6 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021b8:	4603      	mov	r3, r0
  4021ba:	4602      	mov	r2, r0
  4021bc:	4401      	add	r1, r0
  4021be:	4650      	mov	r0, sl
  4021c0:	4c17      	ldr	r4, [pc, #92]	; (402220 <prvTimerTask+0x1f4>)
  4021c2:	47a0      	blx	r4
  4021c4:	e792      	b.n	4020ec <prvTimerTask+0xc0>
  4021c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ca:	b672      	cpsid	i
  4021cc:	f383 8811 	msr	BASEPRI, r3
  4021d0:	f3bf 8f6f 	isb	sy
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	b662      	cpsie	i
  4021da:	e7fe      	b.n	4021da <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4021dc:	4650      	mov	r0, sl
  4021de:	4b13      	ldr	r3, [pc, #76]	; (40222c <prvTimerTask+0x200>)
  4021e0:	4798      	blx	r3
  4021e2:	e783      	b.n	4020ec <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4021e4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4021e6:	a804      	add	r0, sp, #16
  4021e8:	4b09      	ldr	r3, [pc, #36]	; (402210 <prvTimerTask+0x1e4>)
  4021ea:	4798      	blx	r3
  4021ec:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4021ee:	9b04      	ldr	r3, [sp, #16]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	f47f af78 	bne.w	4020e6 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4021f6:	4b0e      	ldr	r3, [pc, #56]	; (402230 <prvTimerTask+0x204>)
  4021f8:	681b      	ldr	r3, [r3, #0]
  4021fa:	681a      	ldr	r2, [r3, #0]
  4021fc:	fab2 f282 	clz	r2, r2
  402200:	0952      	lsrs	r2, r2, #5
  402202:	2400      	movs	r4, #0
  402204:	e72d      	b.n	402062 <prvTimerTask+0x36>
  402206:	bf00      	nop
  402208:	2040c2fc 	.word	0x2040c2fc
  40220c:	00401555 	.word	0x00401555
  402210:	00401f75 	.word	0x00401f75
  402214:	2040c330 	.word	0x2040c330
  402218:	004011b9 	.word	0x004011b9
  40221c:	004016bd 	.word	0x004016bd
  402220:	00401ddd 	.word	0x00401ddd
  402224:	00401f05 	.word	0x00401f05
  402228:	00400fb5 	.word	0x00400fb5
  40222c:	00400889 	.word	0x00400889
  402230:	2040c300 	.word	0x2040c300
  402234:	e000ed04 	.word	0xe000ed04
  402238:	004004d9 	.word	0x004004d9

0040223c <chip_isr>:
  //CORSI acorda task wifi freertos
  //BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  //xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  //vTaskNotifyGiveFromISR( xHandleWifi, &xHigherPriorityTaskWoken );
  
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40223c:	2810      	cmp	r0, #16
  40223e:	d108      	bne.n	402252 <chip_isr+0x16>
  402240:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402244:	d105      	bne.n	402252 <chip_isr+0x16>
{
  402246:	b508      	push	{r3, lr}
		if (gpfIsr) {
  402248:	4b02      	ldr	r3, [pc, #8]	; (402254 <chip_isr+0x18>)
  40224a:	681b      	ldr	r3, [r3, #0]
  40224c:	b103      	cbz	r3, 402250 <chip_isr+0x14>
			gpfIsr();
  40224e:	4798      	blx	r3
  402250:	bd08      	pop	{r3, pc}
  402252:	4770      	bx	lr
  402254:	2040c334 	.word	0x2040c334

00402258 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  402258:	b150      	cbz	r0, 402270 <nm_bsp_sleep+0x18>
{
  40225a:	b570      	push	{r4, r5, r6, lr}
  40225c:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  40225e:	4e05      	ldr	r6, [pc, #20]	; (402274 <nm_bsp_sleep+0x1c>)
  402260:	4d05      	ldr	r5, [pc, #20]	; (402278 <nm_bsp_sleep+0x20>)
  402262:	4630      	mov	r0, r6
  402264:	47a8      	blx	r5
	while(u32TimeMsec--) {
  402266:	3c01      	subs	r4, #1
  402268:	f1b4 3fff 	cmp.w	r4, #4294967295
  40226c:	d1f9      	bne.n	402262 <nm_bsp_sleep+0xa>
  40226e:	bd70      	pop	{r4, r5, r6, pc}
  402270:	4770      	bx	lr
  402272:	bf00      	nop
  402274:	00031635 	.word	0x00031635
  402278:	20400001 	.word	0x20400001

0040227c <nm_bsp_reset>:
{
  40227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402280:	4f09      	ldr	r7, [pc, #36]	; (4022a8 <nm_bsp_reset+0x2c>)
  402282:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  402286:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  40228a:	4d08      	ldr	r5, [pc, #32]	; (4022ac <nm_bsp_reset+0x30>)
  40228c:	2608      	movs	r6, #8
  40228e:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  402290:	2064      	movs	r0, #100	; 0x64
  402292:	4c07      	ldr	r4, [pc, #28]	; (4022b0 <nm_bsp_reset+0x34>)
  402294:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402296:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  40229a:	2064      	movs	r0, #100	; 0x64
  40229c:	47a0      	blx	r4
  40229e:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4022a0:	2064      	movs	r0, #100	; 0x64
  4022a2:	47a0      	blx	r4
  4022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022a8:	400e1200 	.word	0x400e1200
  4022ac:	400e1000 	.word	0x400e1000
  4022b0:	00402259 	.word	0x00402259

004022b4 <nm_bsp_init>:
{
  4022b4:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4022b6:	2200      	movs	r2, #0
  4022b8:	4b14      	ldr	r3, [pc, #80]	; (40230c <nm_bsp_init+0x58>)
  4022ba:	601a      	str	r2, [r3, #0]
  4022bc:	200a      	movs	r0, #10
  4022be:	4c14      	ldr	r4, [pc, #80]	; (402310 <nm_bsp_init+0x5c>)
  4022c0:	47a0      	blx	r4
  4022c2:	200b      	movs	r0, #11
  4022c4:	47a0      	blx	r4
  4022c6:	200c      	movs	r0, #12
  4022c8:	47a0      	blx	r4
  4022ca:	2010      	movs	r0, #16
  4022cc:	47a0      	blx	r4
  4022ce:	2011      	movs	r0, #17
  4022d0:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022d2:	4b10      	ldr	r3, [pc, #64]	; (402314 <nm_bsp_init+0x60>)
  4022d4:	2208      	movs	r2, #8
  4022d6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022dc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022de:	4a0e      	ldr	r2, [pc, #56]	; (402318 <nm_bsp_init+0x64>)
  4022e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4022e4:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022e6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022ea:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022ec:	2204      	movs	r2, #4
  4022ee:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4022f6:	4b09      	ldr	r3, [pc, #36]	; (40231c <nm_bsp_init+0x68>)
  4022f8:	681b      	ldr	r3, [r3, #0]
  4022fa:	f013 0f01 	tst.w	r3, #1
  4022fe:	d001      	beq.n	402304 <nm_bsp_init+0x50>
  402300:	4b06      	ldr	r3, [pc, #24]	; (40231c <nm_bsp_init+0x68>)
  402302:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  402304:	4b06      	ldr	r3, [pc, #24]	; (402320 <nm_bsp_init+0x6c>)
  402306:	4798      	blx	r3
}
  402308:	2000      	movs	r0, #0
  40230a:	bd10      	pop	{r4, pc}
  40230c:	2040c334 	.word	0x2040c334
  402310:	004055b5 	.word	0x004055b5
  402314:	400e1000 	.word	0x400e1000
  402318:	400e1200 	.word	0x400e1200
  40231c:	e000e010 	.word	0xe000e010
  402320:	0040227d 	.word	0x0040227d

00402324 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  402324:	b530      	push	{r4, r5, lr}
  402326:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  402328:	4b17      	ldr	r3, [pc, #92]	; (402388 <nm_bsp_register_isr+0x64>)
  40232a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40232c:	2010      	movs	r0, #16
  40232e:	4b17      	ldr	r3, [pc, #92]	; (40238c <nm_bsp_register_isr+0x68>)
  402330:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  402332:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402336:	207c      	movs	r0, #124	; 0x7c
  402338:	4b15      	ldr	r3, [pc, #84]	; (402390 <nm_bsp_register_isr+0x6c>)
  40233a:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40233c:	4c15      	ldr	r4, [pc, #84]	; (402394 <nm_bsp_register_isr+0x70>)
  40233e:	2201      	movs	r2, #1
  402340:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402344:	4620      	mov	r0, r4
  402346:	4b14      	ldr	r3, [pc, #80]	; (402398 <nm_bsp_register_isr+0x74>)
  402348:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40234a:	4b14      	ldr	r3, [pc, #80]	; (40239c <nm_bsp_register_isr+0x78>)
  40234c:	9300      	str	r3, [sp, #0]
  40234e:	2351      	movs	r3, #81	; 0x51
  402350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402354:	2110      	movs	r1, #16
  402356:	4620      	mov	r0, r4
  402358:	4d11      	ldr	r5, [pc, #68]	; (4023a0 <nm_bsp_register_isr+0x7c>)
  40235a:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40235c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402360:	4620      	mov	r0, r4
  402362:	4b10      	ldr	r3, [pc, #64]	; (4023a4 <nm_bsp_register_isr+0x80>)
  402364:	4798      	blx	r3
  // corsi: clear PIO IRQ before enable nvic
  pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  402366:	4620      	mov	r0, r4
  402368:	4b0f      	ldr	r3, [pc, #60]	; (4023a8 <nm_bsp_register_isr+0x84>)
  40236a:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40236c:	4b0f      	ldr	r3, [pc, #60]	; (4023ac <nm_bsp_register_isr+0x88>)
  40236e:	22a0      	movs	r2, #160	; 0xa0
  402370:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402378:	601a      	str	r2, [r3, #0]
  // corsi: for use with RTOS priority shall be < configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 
 	NVIC_SetPriority((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID, 5);
 	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40237a:	2205      	movs	r2, #5
  40237c:	2110      	movs	r1, #16
  40237e:	4620      	mov	r0, r4
  402380:	4b0b      	ldr	r3, [pc, #44]	; (4023b0 <nm_bsp_register_isr+0x8c>)
  402382:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  402384:	b003      	add	sp, #12
  402386:	bd30      	pop	{r4, r5, pc}
  402388:	2040c334 	.word	0x2040c334
  40238c:	004055b5 	.word	0x004055b5
  402390:	004051bd 	.word	0x004051bd
  402394:	400e1400 	.word	0x400e1400
  402398:	00404fb1 	.word	0x00404fb1
  40239c:	0040223d 	.word	0x0040223d
  4023a0:	0040533d 	.word	0x0040533d
  4023a4:	004051ab 	.word	0x004051ab
  4023a8:	004051b3 	.word	0x004051b3
  4023ac:	e000e100 	.word	0xe000e100
  4023b0:	00405411 	.word	0x00405411

004023b4 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4023b4:	b508      	push	{r3, lr}
	if (u8Enable) {
  4023b6:	b928      	cbnz	r0, 4023c4 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4023b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4023bc:	4804      	ldr	r0, [pc, #16]	; (4023d0 <nm_bsp_interrupt_ctrl+0x1c>)
  4023be:	4b05      	ldr	r3, [pc, #20]	; (4023d4 <nm_bsp_interrupt_ctrl+0x20>)
  4023c0:	4798      	blx	r3
  4023c2:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4023c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4023c8:	4801      	ldr	r0, [pc, #4]	; (4023d0 <nm_bsp_interrupt_ctrl+0x1c>)
  4023ca:	4b03      	ldr	r3, [pc, #12]	; (4023d8 <nm_bsp_interrupt_ctrl+0x24>)
  4023cc:	4798      	blx	r3
  4023ce:	bd08      	pop	{r3, pc}
  4023d0:	400e1400 	.word	0x400e1400
  4023d4:	004051af 	.word	0x004051af
  4023d8:	004051ab 	.word	0x004051ab

004023dc <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  4023de:	4c39      	ldr	r4, [pc, #228]	; (4024c4 <nm_bus_init+0xe8>)
  4023e0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4023e4:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4023e6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023ea:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4023ec:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4023ee:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4023f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4023f4:	430b      	orrs	r3, r1
  4023f6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4023fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4023fe:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402404:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402406:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40240a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40240c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40240e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402412:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402414:	4313      	orrs	r3, r2
  402416:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402418:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40241a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40241e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402424:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402426:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40242a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40242c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40242e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402432:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402434:	4318      	orrs	r0, r3
  402436:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402438:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40243a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40243e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402440:	6061      	str	r1, [r4, #4]
  402442:	6062      	str	r2, [r4, #4]
  402444:	6063      	str	r3, [r4, #4]
  402446:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40244a:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  40244c:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40244e:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  402450:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  402452:	4d1d      	ldr	r5, [pc, #116]	; (4024c8 <nm_bus_init+0xec>)
  402454:	4628      	mov	r0, r5
  402456:	4b1d      	ldr	r3, [pc, #116]	; (4024cc <nm_bus_init+0xf0>)
  402458:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40245a:	2302      	movs	r3, #2
  40245c:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40245e:	2380      	movs	r3, #128	; 0x80
  402460:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402462:	686b      	ldr	r3, [r5, #4]
  402464:	f043 0301 	orr.w	r3, r3, #1
  402468:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40246a:	686b      	ldr	r3, [r5, #4]
  40246c:	f043 0310 	orr.w	r3, r3, #16
  402470:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  402472:	2101      	movs	r1, #1
  402474:	4628      	mov	r0, r5
  402476:	4b16      	ldr	r3, [pc, #88]	; (4024d0 <nm_bus_init+0xf4>)
  402478:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40247a:	2200      	movs	r2, #0
  40247c:	2101      	movs	r1, #1
  40247e:	4628      	mov	r0, r5
  402480:	4b14      	ldr	r3, [pc, #80]	; (4024d4 <nm_bus_init+0xf8>)
  402482:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  402484:	2201      	movs	r2, #1
  402486:	4611      	mov	r1, r2
  402488:	4628      	mov	r0, r5
  40248a:	4b13      	ldr	r3, [pc, #76]	; (4024d8 <nm_bus_init+0xfc>)
  40248c:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40248e:	2200      	movs	r2, #0
  402490:	2101      	movs	r1, #1
  402492:	4628      	mov	r0, r5
  402494:	4b11      	ldr	r3, [pc, #68]	; (4024dc <nm_bus_init+0x100>)
  402496:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  402498:	4911      	ldr	r1, [pc, #68]	; (4024e0 <nm_bus_init+0x104>)
  40249a:	4812      	ldr	r0, [pc, #72]	; (4024e4 <nm_bus_init+0x108>)
  40249c:	4b12      	ldr	r3, [pc, #72]	; (4024e8 <nm_bus_init+0x10c>)
  40249e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4024a0:	b2c2      	uxtb	r2, r0
  4024a2:	2101      	movs	r1, #1
  4024a4:	4628      	mov	r0, r5
  4024a6:	4b11      	ldr	r3, [pc, #68]	; (4024ec <nm_bus_init+0x110>)
  4024a8:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4024aa:	2300      	movs	r3, #0
  4024ac:	461a      	mov	r2, r3
  4024ae:	2101      	movs	r1, #1
  4024b0:	4628      	mov	r0, r5
  4024b2:	4f0f      	ldr	r7, [pc, #60]	; (4024f0 <nm_bus_init+0x114>)
  4024b4:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4024b6:	2301      	movs	r3, #1
  4024b8:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4024ba:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4024bc:	4b0d      	ldr	r3, [pc, #52]	; (4024f4 <nm_bus_init+0x118>)
  4024be:	4798      	blx	r3
#endif
	return result;
}
  4024c0:	2000      	movs	r0, #0
  4024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024c4:	400e1400 	.word	0x400e1400
  4024c8:	40008000 	.word	0x40008000
  4024cc:	00405609 	.word	0x00405609
  4024d0:	00405635 	.word	0x00405635
  4024d4:	004056af 	.word	0x004056af
  4024d8:	004056cd 	.word	0x004056cd
  4024dc:	004056eb 	.word	0x004056eb
  4024e0:	11e1a300 	.word	0x11e1a300
  4024e4:	02dc6c00 	.word	0x02dc6c00
  4024e8:	004056ff 	.word	0x004056ff
  4024ec:	00405715 	.word	0x00405715
  4024f0:	0040573d 	.word	0x0040573d
  4024f4:	0040227d 	.word	0x0040227d

004024f8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024fc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4024fe:	2803      	cmp	r0, #3
  402500:	d144      	bne.n	40258c <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  402502:	680e      	ldr	r6, [r1, #0]
  402504:	684d      	ldr	r5, [r1, #4]
  402506:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402508:	2300      	movs	r3, #0
  40250a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40250e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  402512:	b186      	cbz	r6, 402536 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402514:	2d00      	cmp	r5, #0
  402516:	d136      	bne.n	402586 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402518:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40251c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40251e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  402520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402524:	4b20      	ldr	r3, [pc, #128]	; (4025a8 <nm_bus_ioctl+0xb0>)
  402526:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402528:	b32c      	cbz	r4, 402576 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40252a:	4f20      	ldr	r7, [pc, #128]	; (4025ac <nm_bus_ioctl+0xb4>)
  40252c:	f8df b094 	ldr.w	fp, [pc, #148]	; 4025c4 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402530:	f8df a094 	ldr.w	sl, [pc, #148]	; 4025c8 <nm_bus_ioctl+0xd0>
  402534:	e006      	b.n	402544 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402536:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40253a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40253e:	ae01      	add	r6, sp, #4
  402540:	e7ee      	b.n	402520 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  402542:	b1c4      	cbz	r4, 402576 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402544:	2300      	movs	r3, #0
  402546:	461a      	mov	r2, r3
  402548:	7831      	ldrb	r1, [r6, #0]
  40254a:	4638      	mov	r0, r7
  40254c:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40254e:	f10d 0205 	add.w	r2, sp, #5
  402552:	f10d 0106 	add.w	r1, sp, #6
  402556:	4638      	mov	r0, r7
  402558:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  40255a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40255e:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  402560:	3c01      	subs	r4, #1
  402562:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  402564:	f1b8 0f00 	cmp.w	r8, #0
  402568:	d100      	bne.n	40256c <nm_bus_ioctl+0x74>
			pu8Miso++;
  40256a:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  40256c:	f1b9 0f00 	cmp.w	r9, #0
  402570:	d1e7      	bne.n	402542 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  402572:	3601      	adds	r6, #1
  402574:	e7e5      	b.n	402542 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  402576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40257a:	4b0b      	ldr	r3, [pc, #44]	; (4025a8 <nm_bus_ioctl+0xb0>)
  40257c:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  40257e:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  402580:	b003      	add	sp, #12
  402582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  402586:	f06f 0005 	mvn.w	r0, #5
		break;
  40258a:	e7f9      	b.n	402580 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  40258c:	f240 121f 	movw	r2, #287	; 0x11f
  402590:	4907      	ldr	r1, [pc, #28]	; (4025b0 <nm_bus_ioctl+0xb8>)
  402592:	4808      	ldr	r0, [pc, #32]	; (4025b4 <nm_bus_ioctl+0xbc>)
  402594:	4c08      	ldr	r4, [pc, #32]	; (4025b8 <nm_bus_ioctl+0xc0>)
  402596:	47a0      	blx	r4
  402598:	4808      	ldr	r0, [pc, #32]	; (4025bc <nm_bus_ioctl+0xc4>)
  40259a:	47a0      	blx	r4
  40259c:	4808      	ldr	r0, [pc, #32]	; (4025c0 <nm_bus_ioctl+0xc8>)
  40259e:	47a0      	blx	r4
			s8Ret = -1;
  4025a0:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4025a4:	e7ec      	b.n	402580 <nm_bus_ioctl+0x88>
  4025a6:	bf00      	nop
  4025a8:	400e1400 	.word	0x400e1400
  4025ac:	40008000 	.word	0x40008000
  4025b0:	00409834 	.word	0x00409834
  4025b4:	00409844 	.word	0x00409844
  4025b8:	00406231 	.word	0x00406231
  4025bc:	00409858 	.word	0x00409858
  4025c0:	00409870 	.word	0x00409870
  4025c4:	0040567b 	.word	0x0040567b
  4025c8:	0040564b 	.word	0x0040564b

004025cc <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4025cc:	2202      	movs	r2, #2
  4025ce:	4b0e      	ldr	r3, [pc, #56]	; (402608 <nm_bus_deinit+0x3c>)
  4025d0:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025d2:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4025d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4025da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4025de:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4025e8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4025f2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4025fc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  402602:	2000      	movs	r0, #0
  402604:	4770      	bx	lr
  402606:	bf00      	nop
  402608:	40008000 	.word	0x40008000

0040260c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40260c:	b13a      	cbz	r2, 40261e <m2m_memcpy+0x12>
  40260e:	3901      	subs	r1, #1
  402610:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  402612:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402616:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40261a:	4290      	cmp	r0, r2
  40261c:	d1f9      	bne.n	402612 <m2m_memcpy+0x6>
  40261e:	4770      	bx	lr

00402620 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  402620:	b122      	cbz	r2, 40262c <m2m_memset+0xc>
  402622:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402624:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402628:	4290      	cmp	r0, r2
  40262a:	d1fb      	bne.n	402624 <m2m_memset+0x4>
  40262c:	4770      	bx	lr

0040262e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40262e:	7803      	ldrb	r3, [r0, #0]
  402630:	b143      	cbz	r3, 402644 <m2m_strlen+0x16>
  402632:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402634:	3301      	adds	r3, #1
  402636:	b29b      	uxth	r3, r3
	while(*pcStr)
  402638:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40263c:	2a00      	cmp	r2, #0
  40263e:	d1f9      	bne.n	402634 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  402640:	4618      	mov	r0, r3
  402642:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402644:	2300      	movs	r3, #0
  402646:	e7fb      	b.n	402640 <m2m_strlen+0x12>

00402648 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402648:	4a02      	ldr	r2, [pc, #8]	; (402654 <isr+0xc>)
  40264a:	7813      	ldrb	r3, [r2, #0]
  40264c:	3301      	adds	r3, #1
  40264e:	b2db      	uxtb	r3, r3
  402650:	7013      	strb	r3, [r2, #0]
  402652:	4770      	bx	lr
  402654:	2040c33b 	.word	0x2040c33b

00402658 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402658:	4770      	bx	lr
	...

0040265c <hif_set_rx_done>:
{
  40265c:	b500      	push	{lr}
  40265e:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  402660:	2001      	movs	r0, #1
  402662:	4b0b      	ldr	r3, [pc, #44]	; (402690 <hif_set_rx_done+0x34>)
  402664:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402666:	a901      	add	r1, sp, #4
  402668:	f241 0070 	movw	r0, #4208	; 0x1070
  40266c:	4b09      	ldr	r3, [pc, #36]	; (402694 <hif_set_rx_done+0x38>)
  40266e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402670:	4603      	mov	r3, r0
  402672:	b118      	cbz	r0, 40267c <hif_set_rx_done+0x20>
}
  402674:	4618      	mov	r0, r3
  402676:	b003      	add	sp, #12
  402678:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  40267c:	9901      	ldr	r1, [sp, #4]
  40267e:	f041 0102 	orr.w	r1, r1, #2
  402682:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402684:	f241 0070 	movw	r0, #4208	; 0x1070
  402688:	4b03      	ldr	r3, [pc, #12]	; (402698 <hif_set_rx_done+0x3c>)
  40268a:	4798      	blx	r3
  40268c:	4603      	mov	r3, r0
  40268e:	e7f1      	b.n	402674 <hif_set_rx_done+0x18>
  402690:	004023b5 	.word	0x004023b5
  402694:	00403949 	.word	0x00403949
  402698:	00403955 	.word	0x00403955

0040269c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  40269c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40269e:	4b12      	ldr	r3, [pc, #72]	; (4026e8 <hif_chip_wake+0x4c>)
  4026a0:	781b      	ldrb	r3, [r3, #0]
  4026a2:	b94b      	cbnz	r3, 4026b8 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4026a4:	4b11      	ldr	r3, [pc, #68]	; (4026ec <hif_chip_wake+0x50>)
  4026a6:	781b      	ldrb	r3, [r3, #0]
  4026a8:	b2db      	uxtb	r3, r3
  4026aa:	2b03      	cmp	r3, #3
  4026ac:	d00c      	beq.n	4026c8 <hif_chip_wake+0x2c>
  4026ae:	4b0f      	ldr	r3, [pc, #60]	; (4026ec <hif_chip_wake+0x50>)
  4026b0:	781b      	ldrb	r3, [r3, #0]
  4026b2:	b2db      	uxtb	r3, r3
  4026b4:	2b04      	cmp	r3, #4
  4026b6:	d007      	beq.n	4026c8 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4026b8:	4a0b      	ldr	r2, [pc, #44]	; (4026e8 <hif_chip_wake+0x4c>)
  4026ba:	7813      	ldrb	r3, [r2, #0]
  4026bc:	3301      	adds	r3, #1
  4026be:	b2db      	uxtb	r3, r3
  4026c0:	7013      	strb	r3, [r2, #0]
  4026c2:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4026c4:	4618      	mov	r0, r3
  4026c6:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  4026c8:	4b09      	ldr	r3, [pc, #36]	; (4026f0 <hif_chip_wake+0x54>)
  4026ca:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026cc:	4603      	mov	r3, r0
  4026ce:	2800      	cmp	r0, #0
  4026d0:	d1f8      	bne.n	4026c4 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4026d2:	f245 6178 	movw	r1, #22136	; 0x5678
  4026d6:	f241 0074 	movw	r0, #4212	; 0x1074
  4026da:	4b06      	ldr	r3, [pc, #24]	; (4026f4 <hif_chip_wake+0x58>)
  4026dc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026de:	4603      	mov	r3, r0
  4026e0:	2800      	cmp	r0, #0
  4026e2:	d0e9      	beq.n	4026b8 <hif_chip_wake+0x1c>
  4026e4:	e7ee      	b.n	4026c4 <hif_chip_wake+0x28>
  4026e6:	bf00      	nop
  4026e8:	2040c339 	.word	0x2040c339
  4026ec:	2040c338 	.word	0x2040c338
  4026f0:	004034b9 	.word	0x004034b9
  4026f4:	00403955 	.word	0x00403955

004026f8 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4026f8:	4b1e      	ldr	r3, [pc, #120]	; (402774 <hif_chip_sleep+0x7c>)
  4026fa:	781b      	ldrb	r3, [r3, #0]
  4026fc:	b123      	cbz	r3, 402708 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  4026fe:	4a1d      	ldr	r2, [pc, #116]	; (402774 <hif_chip_sleep+0x7c>)
  402700:	7813      	ldrb	r3, [r2, #0]
  402702:	3b01      	subs	r3, #1
  402704:	b2db      	uxtb	r3, r3
  402706:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402708:	4b1a      	ldr	r3, [pc, #104]	; (402774 <hif_chip_sleep+0x7c>)
  40270a:	781b      	ldrb	r3, [r3, #0]
  40270c:	2b00      	cmp	r3, #0
  40270e:	d12e      	bne.n	40276e <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402710:	4b19      	ldr	r3, [pc, #100]	; (402778 <hif_chip_sleep+0x80>)
  402712:	781b      	ldrb	r3, [r3, #0]
  402714:	b2db      	uxtb	r3, r3
  402716:	2b03      	cmp	r3, #3
  402718:	d006      	beq.n	402728 <hif_chip_sleep+0x30>
  40271a:	4b17      	ldr	r3, [pc, #92]	; (402778 <hif_chip_sleep+0x80>)
  40271c:	781b      	ldrb	r3, [r3, #0]
  40271e:	b2db      	uxtb	r3, r3
  402720:	2b04      	cmp	r3, #4
  402722:	d001      	beq.n	402728 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402724:	2300      	movs	r3, #0
  402726:	e023      	b.n	402770 <hif_chip_sleep+0x78>
{
  402728:	b500      	push	{lr}
  40272a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40272c:	2300      	movs	r3, #0
  40272e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  402730:	f244 3121 	movw	r1, #17185	; 0x4321
  402734:	f241 0074 	movw	r0, #4212	; 0x1074
  402738:	4b10      	ldr	r3, [pc, #64]	; (40277c <hif_chip_sleep+0x84>)
  40273a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40273c:	4603      	mov	r3, r0
  40273e:	b118      	cbz	r0, 402748 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  402740:	4618      	mov	r0, r3
  402742:	b003      	add	sp, #12
  402744:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402748:	a901      	add	r1, sp, #4
  40274a:	2001      	movs	r0, #1
  40274c:	4b0c      	ldr	r3, [pc, #48]	; (402780 <hif_chip_sleep+0x88>)
  40274e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402750:	4603      	mov	r3, r0
  402752:	2800      	cmp	r0, #0
  402754:	d1f4      	bne.n	402740 <hif_chip_sleep+0x48>
			if(reg&0x2)
  402756:	9901      	ldr	r1, [sp, #4]
  402758:	f011 0f02 	tst.w	r1, #2
  40275c:	d0f0      	beq.n	402740 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40275e:	f021 0102 	bic.w	r1, r1, #2
  402762:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402764:	2001      	movs	r0, #1
  402766:	4b05      	ldr	r3, [pc, #20]	; (40277c <hif_chip_sleep+0x84>)
  402768:	4798      	blx	r3
  40276a:	4603      	mov	r3, r0
  40276c:	e7e8      	b.n	402740 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  40276e:	2300      	movs	r3, #0
}
  402770:	4618      	mov	r0, r3
  402772:	4770      	bx	lr
  402774:	2040c339 	.word	0x2040c339
  402778:	2040c338 	.word	0x2040c338
  40277c:	00403955 	.word	0x00403955
  402780:	00403949 	.word	0x00403949

00402784 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  402784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402788:	b087      	sub	sp, #28
  40278a:	4607      	mov	r7, r0
  40278c:	4688      	mov	r8, r1
  40278e:	4692      	mov	sl, r2
  402790:	4699      	mov	r9, r3
  402792:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402794:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402798:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  40279c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4027a0:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4027a4:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4027a8:	2308      	movs	r3, #8
  4027aa:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4027ae:	2c00      	cmp	r4, #0
  4027b0:	f000 809f 	beq.w	4028f2 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4027b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4027b8:	fa16 f383 	uxtah	r3, r6, r3
  4027bc:	442b      	add	r3, r5
  4027be:	b29b      	uxth	r3, r3
  4027c0:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4027c4:	4b5c      	ldr	r3, [pc, #368]	; (402938 <hif_send+0x1b4>)
  4027c6:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4027c8:	4683      	mov	fp, r0
  4027ca:	2800      	cmp	r0, #0
  4027cc:	f040 80a2 	bne.w	402914 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  4027d0:	2300      	movs	r3, #0
  4027d2:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4027d4:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4027d8:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4027da:	9b02      	ldr	r3, [sp, #8]
  4027dc:	431f      	orrs	r7, r3
  4027de:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4027e0:	9b02      	ldr	r3, [sp, #8]
  4027e2:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  4027e6:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4027e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4027ec:	9b02      	ldr	r3, [sp, #8]
  4027ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4027f2:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4027f4:	9902      	ldr	r1, [sp, #8]
  4027f6:	f241 008c 	movw	r0, #4236	; 0x108c
  4027fa:	4b50      	ldr	r3, [pc, #320]	; (40293c <hif_send+0x1b8>)
  4027fc:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4027fe:	4683      	mov	fp, r0
  402800:	2800      	cmp	r0, #0
  402802:	f040 8091 	bne.w	402928 <hif_send+0x1a4>


		reg = 0;
  402806:	2300      	movs	r3, #0
  402808:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  40280a:	9b02      	ldr	r3, [sp, #8]
  40280c:	f043 0302 	orr.w	r3, r3, #2
  402810:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  402812:	9902      	ldr	r1, [sp, #8]
  402814:	f241 0078 	movw	r0, #4216	; 0x1078
  402818:	4b48      	ldr	r3, [pc, #288]	; (40293c <hif_send+0x1b8>)
  40281a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40281c:	4683      	mov	fp, r0
  40281e:	2800      	cmp	r0, #0
  402820:	f040 8082 	bne.w	402928 <hif_send+0x1a4>
		dma_addr = 0;
  402824:	2300      	movs	r3, #0
  402826:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402828:	f8ad 3006 	strh.w	r3, [sp, #6]
  40282c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402830:	b29b      	uxth	r3, r3
  402832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402836:	d216      	bcs.n	402866 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402838:	f241 0878 	movw	r8, #4216	; 0x1078
  40283c:	4f40      	ldr	r7, [pc, #256]	; (402940 <hif_send+0x1bc>)
  40283e:	a902      	add	r1, sp, #8
  402840:	4640      	mov	r0, r8
  402842:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402844:	b978      	cbnz	r0, 402866 <hif_send+0xe2>
			if (!(reg & 0x2))
  402846:	9b02      	ldr	r3, [sp, #8]
  402848:	f013 0f02 	tst.w	r3, #2
  40284c:	d059      	beq.n	402902 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40284e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402852:	3301      	adds	r3, #1
  402854:	b29b      	uxth	r3, r3
  402856:	f8ad 3006 	strh.w	r3, [sp, #6]
  40285a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40285e:	b29b      	uxth	r3, r3
  402860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402864:	d3eb      	bcc.n	40283e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  402866:	9b03      	ldr	r3, [sp, #12]
  402868:	2b00      	cmp	r3, #0
  40286a:	d061      	beq.n	402930 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  40286c:	9b03      	ldr	r3, [sp, #12]
  40286e:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402870:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402874:	b29b      	uxth	r3, r3
  402876:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40287a:	9804      	ldr	r0, [sp, #16]
  40287c:	2208      	movs	r2, #8
  40287e:	a905      	add	r1, sp, #20
  402880:	4b30      	ldr	r3, [pc, #192]	; (402944 <hif_send+0x1c0>)
  402882:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  402884:	4683      	mov	fp, r0
  402886:	2800      	cmp	r0, #0
  402888:	d14e      	bne.n	402928 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  40288a:	9b04      	ldr	r3, [sp, #16]
  40288c:	3308      	adds	r3, #8
  40288e:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  402890:	f1ba 0f00 	cmp.w	sl, #0
  402894:	d00a      	beq.n	4028ac <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  402896:	9804      	ldr	r0, [sp, #16]
  402898:	464a      	mov	r2, r9
  40289a:	4651      	mov	r1, sl
  40289c:	4b29      	ldr	r3, [pc, #164]	; (402944 <hif_send+0x1c0>)
  40289e:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4028a0:	4683      	mov	fp, r0
  4028a2:	2800      	cmp	r0, #0
  4028a4:	d140      	bne.n	402928 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4028a6:	9b04      	ldr	r3, [sp, #16]
  4028a8:	444b      	add	r3, r9
  4028aa:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4028ac:	b17c      	cbz	r4, 4028ce <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4028ae:	9b04      	ldr	r3, [sp, #16]
  4028b0:	eba5 0509 	sub.w	r5, r5, r9
  4028b4:	441d      	add	r5, r3
  4028b6:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4028b8:	9804      	ldr	r0, [sp, #16]
  4028ba:	4632      	mov	r2, r6
  4028bc:	4621      	mov	r1, r4
  4028be:	4b21      	ldr	r3, [pc, #132]	; (402944 <hif_send+0x1c0>)
  4028c0:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4028c2:	4683      	mov	fp, r0
  4028c4:	2800      	cmp	r0, #0
  4028c6:	d12f      	bne.n	402928 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4028c8:	9b04      	ldr	r3, [sp, #16]
  4028ca:	441e      	add	r6, r3
  4028cc:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4028ce:	9b03      	ldr	r3, [sp, #12]
  4028d0:	009b      	lsls	r3, r3, #2
  4028d2:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4028d4:	9b02      	ldr	r3, [sp, #8]
  4028d6:	f043 0302 	orr.w	r3, r3, #2
  4028da:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4028dc:	9902      	ldr	r1, [sp, #8]
  4028de:	f241 006c 	movw	r0, #4204	; 0x106c
  4028e2:	4b16      	ldr	r3, [pc, #88]	; (40293c <hif_send+0x1b8>)
  4028e4:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4028e6:	4683      	mov	fp, r0
  4028e8:	b9f0      	cbnz	r0, 402928 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  4028ea:	4b17      	ldr	r3, [pc, #92]	; (402948 <hif_send+0x1c4>)
  4028ec:	4798      	blx	r3
  4028ee:	4683      	mov	fp, r0
  4028f0:	e01a      	b.n	402928 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  4028f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4028f6:	fa19 f383 	uxtah	r3, r9, r3
  4028fa:	b29b      	uxth	r3, r3
  4028fc:	f8ad 3016 	strh.w	r3, [sp, #22]
  402900:	e760      	b.n	4027c4 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402902:	a903      	add	r1, sp, #12
  402904:	4811      	ldr	r0, [pc, #68]	; (40294c <hif_send+0x1c8>)
  402906:	4b0e      	ldr	r3, [pc, #56]	; (402940 <hif_send+0x1bc>)
  402908:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40290a:	2800      	cmp	r0, #0
  40290c:	d0ab      	beq.n	402866 <hif_send+0xe2>
					dma_addr = 0;
  40290e:	2300      	movs	r3, #0
  402910:	9303      	str	r3, [sp, #12]
  402912:	e7a8      	b.n	402866 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402914:	f240 129f 	movw	r2, #415	; 0x19f
  402918:	490d      	ldr	r1, [pc, #52]	; (402950 <hif_send+0x1cc>)
  40291a:	480e      	ldr	r0, [pc, #56]	; (402954 <hif_send+0x1d0>)
  40291c:	4c0e      	ldr	r4, [pc, #56]	; (402958 <hif_send+0x1d4>)
  40291e:	47a0      	blx	r4
  402920:	480e      	ldr	r0, [pc, #56]	; (40295c <hif_send+0x1d8>)
  402922:	47a0      	blx	r4
  402924:	480e      	ldr	r0, [pc, #56]	; (402960 <hif_send+0x1dc>)
  402926:	47a0      	blx	r4

ERR1:
	return ret;
}
  402928:	4658      	mov	r0, fp
  40292a:	b007      	add	sp, #28
  40292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  402930:	f06f 0b02 	mvn.w	fp, #2
  402934:	e7f8      	b.n	402928 <hif_send+0x1a4>
  402936:	bf00      	nop
  402938:	0040269d 	.word	0x0040269d
  40293c:	00403955 	.word	0x00403955
  402940:	00403949 	.word	0x00403949
  402944:	004039bd 	.word	0x004039bd
  402948:	004026f9 	.word	0x004026f9
  40294c:	00150400 	.word	0x00150400
  402950:	00409874 	.word	0x00409874
  402954:	00409844 	.word	0x00409844
  402958:	00406231 	.word	0x00406231
  40295c:	00409ac8 	.word	0x00409ac8
  402960:	00409870 	.word	0x00409870

00402964 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402968:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40296a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402c64 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  40296e:	4fa2      	ldr	r7, [pc, #648]	; (402bf8 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402970:	4ea2      	ldr	r6, [pc, #648]	; (402bfc <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402972:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402c68 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402976:	e0d5      	b.n	402b24 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402978:	2204      	movs	r2, #4
  40297a:	a904      	add	r1, sp, #16
  40297c:	9805      	ldr	r0, [sp, #20]
  40297e:	4ba0      	ldr	r3, [pc, #640]	; (402c00 <hif_handle_isr+0x29c>)
  402980:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  402982:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402986:	b29b      	uxth	r3, r3
  402988:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40298c:	4604      	mov	r4, r0
  40298e:	2800      	cmp	r0, #0
  402990:	d130      	bne.n	4029f4 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  402992:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402996:	b29b      	uxth	r3, r3
  402998:	429d      	cmp	r5, r3
  40299a:	d005      	beq.n	4029a8 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  40299c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4029a0:	b29b      	uxth	r3, r3
  4029a2:	1aeb      	subs	r3, r5, r3
  4029a4:	2b04      	cmp	r3, #4
  4029a6:	dc33      	bgt.n	402a10 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4029a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029ac:	b2db      	uxtb	r3, r3
  4029ae:	2b01      	cmp	r3, #1
  4029b0:	d047      	beq.n	402a42 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4029b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029b6:	b2db      	uxtb	r3, r3
  4029b8:	2b02      	cmp	r3, #2
  4029ba:	d05f      	beq.n	402a7c <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4029bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029c0:	b2db      	uxtb	r3, r3
  4029c2:	2b04      	cmp	r3, #4
  4029c4:	d068      	beq.n	402a98 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4029c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029ca:	b2db      	uxtb	r3, r3
  4029cc:	2b06      	cmp	r3, #6
  4029ce:	d071      	beq.n	402ab4 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4029d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029d4:	b2db      	uxtb	r3, r3
  4029d6:	2b07      	cmp	r3, #7
  4029d8:	d07a      	beq.n	402ad0 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  4029da:	f240 2202 	movw	r2, #514	; 0x202
  4029de:	4641      	mov	r1, r8
  4029e0:	4630      	mov	r0, r6
  4029e2:	4c88      	ldr	r4, [pc, #544]	; (402c04 <hif_handle_isr+0x2a0>)
  4029e4:	47a0      	blx	r4
  4029e6:	4888      	ldr	r0, [pc, #544]	; (402c08 <hif_handle_isr+0x2a4>)
  4029e8:	47a0      	blx	r4
  4029ea:	4888      	ldr	r0, [pc, #544]	; (402c0c <hif_handle_isr+0x2a8>)
  4029ec:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  4029ee:	f06f 0405 	mvn.w	r4, #5
  4029f2:	e096      	b.n	402b22 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  4029f4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4029f8:	4641      	mov	r1, r8
  4029fa:	4630      	mov	r0, r6
  4029fc:	4d81      	ldr	r5, [pc, #516]	; (402c04 <hif_handle_isr+0x2a0>)
  4029fe:	47a8      	blx	r5
  402a00:	4883      	ldr	r0, [pc, #524]	; (402c10 <hif_handle_isr+0x2ac>)
  402a02:	47a8      	blx	r5
  402a04:	4881      	ldr	r0, [pc, #516]	; (402c0c <hif_handle_isr+0x2a8>)
  402a06:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402a08:	2001      	movs	r0, #1
  402a0a:	4b82      	ldr	r3, [pc, #520]	; (402c14 <hif_handle_isr+0x2b0>)
  402a0c:	4798      	blx	r3
  402a0e:	e088      	b.n	402b22 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402a10:	f240 12df 	movw	r2, #479	; 0x1df
  402a14:	4641      	mov	r1, r8
  402a16:	4630      	mov	r0, r6
  402a18:	4c7a      	ldr	r4, [pc, #488]	; (402c04 <hif_handle_isr+0x2a0>)
  402a1a:	47a0      	blx	r4
  402a1c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402a20:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402a24:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402a28:	9100      	str	r1, [sp, #0]
  402a2a:	b292      	uxth	r2, r2
  402a2c:	4629      	mov	r1, r5
  402a2e:	487a      	ldr	r0, [pc, #488]	; (402c18 <hif_handle_isr+0x2b4>)
  402a30:	47a0      	blx	r4
  402a32:	4876      	ldr	r0, [pc, #472]	; (402c0c <hif_handle_isr+0x2a8>)
  402a34:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402a36:	2001      	movs	r0, #1
  402a38:	4b76      	ldr	r3, [pc, #472]	; (402c14 <hif_handle_isr+0x2b0>)
  402a3a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402a3c:	f06f 0405 	mvn.w	r4, #5
  402a40:	e06f      	b.n	402b22 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  402a42:	4b76      	ldr	r3, [pc, #472]	; (402c1c <hif_handle_isr+0x2b8>)
  402a44:	681b      	ldr	r3, [r3, #0]
  402a46:	b143      	cbz	r3, 402a5a <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a48:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a4c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a50:	3908      	subs	r1, #8
  402a52:	9a05      	ldr	r2, [sp, #20]
  402a54:	3208      	adds	r2, #8
  402a56:	b289      	uxth	r1, r1
  402a58:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402a5a:	4b71      	ldr	r3, [pc, #452]	; (402c20 <hif_handle_isr+0x2bc>)
  402a5c:	781b      	ldrb	r3, [r3, #0]
  402a5e:	2b00      	cmp	r3, #0
  402a60:	d15c      	bne.n	402b1c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402a62:	f240 2209 	movw	r2, #521	; 0x209
  402a66:	4641      	mov	r1, r8
  402a68:	4630      	mov	r0, r6
  402a6a:	4c66      	ldr	r4, [pc, #408]	; (402c04 <hif_handle_isr+0x2a0>)
  402a6c:	47a0      	blx	r4
  402a6e:	486d      	ldr	r0, [pc, #436]	; (402c24 <hif_handle_isr+0x2c0>)
  402a70:	47a0      	blx	r4
  402a72:	4866      	ldr	r0, [pc, #408]	; (402c0c <hif_handle_isr+0x2a8>)
  402a74:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402a76:	4b6c      	ldr	r3, [pc, #432]	; (402c28 <hif_handle_isr+0x2c4>)
  402a78:	4798      	blx	r3
  402a7a:	e04f      	b.n	402b1c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402a7c:	4b6b      	ldr	r3, [pc, #428]	; (402c2c <hif_handle_isr+0x2c8>)
  402a7e:	681b      	ldr	r3, [r3, #0]
  402a80:	2b00      	cmp	r3, #0
  402a82:	d0ea      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a84:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a88:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a8c:	3908      	subs	r1, #8
  402a8e:	9a05      	ldr	r2, [sp, #20]
  402a90:	3208      	adds	r2, #8
  402a92:	b289      	uxth	r1, r1
  402a94:	4798      	blx	r3
  402a96:	e7e0      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402a98:	4b65      	ldr	r3, [pc, #404]	; (402c30 <hif_handle_isr+0x2cc>)
  402a9a:	681b      	ldr	r3, [r3, #0]
  402a9c:	2b00      	cmp	r3, #0
  402a9e:	d0dc      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402aa0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402aa4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402aa8:	3908      	subs	r1, #8
  402aaa:	9a05      	ldr	r2, [sp, #20]
  402aac:	3208      	adds	r2, #8
  402aae:	b289      	uxth	r1, r1
  402ab0:	4798      	blx	r3
  402ab2:	e7d2      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402ab4:	4b5f      	ldr	r3, [pc, #380]	; (402c34 <hif_handle_isr+0x2d0>)
  402ab6:	681b      	ldr	r3, [r3, #0]
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d0ce      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402abc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402ac0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402ac4:	3908      	subs	r1, #8
  402ac6:	9a05      	ldr	r2, [sp, #20]
  402ac8:	3208      	adds	r2, #8
  402aca:	b289      	uxth	r1, r1
  402acc:	4798      	blx	r3
  402ace:	e7c4      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  402ad0:	4b59      	ldr	r3, [pc, #356]	; (402c38 <hif_handle_isr+0x2d4>)
  402ad2:	681b      	ldr	r3, [r3, #0]
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	d0c0      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402ad8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402adc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402ae0:	3908      	subs	r1, #8
  402ae2:	9a05      	ldr	r2, [sp, #20]
  402ae4:	3208      	adds	r2, #8
  402ae6:	b289      	uxth	r1, r1
  402ae8:	4798      	blx	r3
  402aea:	e7b6      	b.n	402a5a <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402aec:	f240 2211 	movw	r2, #529	; 0x211
  402af0:	4641      	mov	r1, r8
  402af2:	4630      	mov	r0, r6
  402af4:	4c43      	ldr	r4, [pc, #268]	; (402c04 <hif_handle_isr+0x2a0>)
  402af6:	47a0      	blx	r4
  402af8:	4850      	ldr	r0, [pc, #320]	; (402c3c <hif_handle_isr+0x2d8>)
  402afa:	47a0      	blx	r4
  402afc:	4843      	ldr	r0, [pc, #268]	; (402c0c <hif_handle_isr+0x2a8>)
  402afe:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402b00:	f06f 0401 	mvn.w	r4, #1
  402b04:	e02f      	b.n	402b66 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402b06:	f44f 7206 	mov.w	r2, #536	; 0x218
  402b0a:	4641      	mov	r1, r8
  402b0c:	4630      	mov	r0, r6
  402b0e:	4c3d      	ldr	r4, [pc, #244]	; (402c04 <hif_handle_isr+0x2a0>)
  402b10:	47a0      	blx	r4
  402b12:	9903      	ldr	r1, [sp, #12]
  402b14:	484a      	ldr	r0, [pc, #296]	; (402c40 <hif_handle_isr+0x2dc>)
  402b16:	47a0      	blx	r4
  402b18:	483c      	ldr	r0, [pc, #240]	; (402c0c <hif_handle_isr+0x2a8>)
  402b1a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402b1c:	4b49      	ldr	r3, [pc, #292]	; (402c44 <hif_handle_isr+0x2e0>)
  402b1e:	4798      	blx	r3
  402b20:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402b22:	bb04      	cbnz	r4, 402b66 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402b24:	f899 3000 	ldrb.w	r3, [r9]
  402b28:	2b00      	cmp	r3, #0
  402b2a:	f000 809f 	beq.w	402c6c <hif_handle_isr+0x308>
		gu8Interrupt--;
  402b2e:	f899 3000 	ldrb.w	r3, [r9]
  402b32:	3b01      	subs	r3, #1
  402b34:	b2db      	uxtb	r3, r3
  402b36:	f889 3000 	strb.w	r3, [r9]
  402b3a:	e01f      	b.n	402b7c <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402b3c:	f240 221e 	movw	r2, #542	; 0x21e
  402b40:	4641      	mov	r1, r8
  402b42:	4630      	mov	r0, r6
  402b44:	4d2f      	ldr	r5, [pc, #188]	; (402c04 <hif_handle_isr+0x2a0>)
  402b46:	47a8      	blx	r5
  402b48:	483f      	ldr	r0, [pc, #252]	; (402c48 <hif_handle_isr+0x2e4>)
  402b4a:	47a8      	blx	r5
  402b4c:	482f      	ldr	r0, [pc, #188]	; (402c0c <hif_handle_isr+0x2a8>)
  402b4e:	47a8      	blx	r5
  402b50:	e009      	b.n	402b66 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402b52:	f44f 7209 	mov.w	r2, #548	; 0x224
  402b56:	4641      	mov	r1, r8
  402b58:	4630      	mov	r0, r6
  402b5a:	4d2a      	ldr	r5, [pc, #168]	; (402c04 <hif_handle_isr+0x2a0>)
  402b5c:	47a8      	blx	r5
  402b5e:	483b      	ldr	r0, [pc, #236]	; (402c4c <hif_handle_isr+0x2e8>)
  402b60:	47a8      	blx	r5
  402b62:	482a      	ldr	r0, [pc, #168]	; (402c0c <hif_handle_isr+0x2a8>)
  402b64:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402b66:	f240 2243 	movw	r2, #579	; 0x243
  402b6a:	4939      	ldr	r1, [pc, #228]	; (402c50 <hif_handle_isr+0x2ec>)
  402b6c:	4630      	mov	r0, r6
  402b6e:	4d25      	ldr	r5, [pc, #148]	; (402c04 <hif_handle_isr+0x2a0>)
  402b70:	47a8      	blx	r5
  402b72:	4621      	mov	r1, r4
  402b74:	4837      	ldr	r0, [pc, #220]	; (402c54 <hif_handle_isr+0x2f0>)
  402b76:	47a8      	blx	r5
  402b78:	4824      	ldr	r0, [pc, #144]	; (402c0c <hif_handle_isr+0x2a8>)
  402b7a:	47a8      	blx	r5
	ret = hif_chip_wake();
  402b7c:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  402b7e:	4604      	mov	r4, r0
  402b80:	2800      	cmp	r0, #0
  402b82:	d1e6      	bne.n	402b52 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402b84:	a903      	add	r1, sp, #12
  402b86:	f241 0070 	movw	r0, #4208	; 0x1070
  402b8a:	4b33      	ldr	r3, [pc, #204]	; (402c58 <hif_handle_isr+0x2f4>)
  402b8c:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  402b8e:	4604      	mov	r4, r0
  402b90:	2800      	cmp	r0, #0
  402b92:	d1d3      	bne.n	402b3c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402b94:	9b03      	ldr	r3, [sp, #12]
  402b96:	f013 0f01 	tst.w	r3, #1
  402b9a:	d0b4      	beq.n	402b06 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402b9c:	4b1d      	ldr	r3, [pc, #116]	; (402c14 <hif_handle_isr+0x2b0>)
  402b9e:	4798      	blx	r3
				reg &= ~(1<<0);
  402ba0:	9903      	ldr	r1, [sp, #12]
  402ba2:	f021 0101 	bic.w	r1, r1, #1
  402ba6:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402ba8:	f241 0070 	movw	r0, #4208	; 0x1070
  402bac:	4b2b      	ldr	r3, [pc, #172]	; (402c5c <hif_handle_isr+0x2f8>)
  402bae:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402bb0:	4604      	mov	r4, r0
  402bb2:	2800      	cmp	r0, #0
  402bb4:	d1d7      	bne.n	402b66 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402bb6:	2200      	movs	r2, #0
  402bb8:	4b19      	ldr	r3, [pc, #100]	; (402c20 <hif_handle_isr+0x2bc>)
  402bba:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402bbc:	9d03      	ldr	r5, [sp, #12]
  402bbe:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402bc2:	2d00      	cmp	r5, #0
  402bc4:	d092      	beq.n	402aec <hif_handle_isr+0x188>
					uint32 address = 0;
  402bc6:	a906      	add	r1, sp, #24
  402bc8:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402bcc:	f241 0084 	movw	r0, #4228	; 0x1084
  402bd0:	4b21      	ldr	r3, [pc, #132]	; (402c58 <hif_handle_isr+0x2f4>)
  402bd2:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402bd4:	4604      	mov	r4, r0
  402bd6:	2800      	cmp	r0, #0
  402bd8:	f43f aece 	beq.w	402978 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402bdc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  402be0:	4641      	mov	r1, r8
  402be2:	4630      	mov	r0, r6
  402be4:	4d07      	ldr	r5, [pc, #28]	; (402c04 <hif_handle_isr+0x2a0>)
  402be6:	47a8      	blx	r5
  402be8:	481d      	ldr	r0, [pc, #116]	; (402c60 <hif_handle_isr+0x2fc>)
  402bea:	47a8      	blx	r5
  402bec:	4807      	ldr	r0, [pc, #28]	; (402c0c <hif_handle_isr+0x2a8>)
  402bee:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402bf0:	2001      	movs	r0, #1
  402bf2:	4b08      	ldr	r3, [pc, #32]	; (402c14 <hif_handle_isr+0x2b0>)
  402bf4:	4798      	blx	r3
  402bf6:	e794      	b.n	402b22 <hif_handle_isr+0x1be>
  402bf8:	0040269d 	.word	0x0040269d
  402bfc:	00409844 	.word	0x00409844
  402c00:	00403961 	.word	0x00403961
  402c04:	00406231 	.word	0x00406231
  402c08:	00409934 	.word	0x00409934
  402c0c:	00409870 	.word	0x00409870
  402c10:	004098dc 	.word	0x004098dc
  402c14:	004023b5 	.word	0x004023b5
  402c18:	004098f4 	.word	0x004098f4
  402c1c:	2040c350 	.word	0x2040c350
  402c20:	2040c33a 	.word	0x2040c33a
  402c24:	0040994c 	.word	0x0040994c
  402c28:	0040265d 	.word	0x0040265d
  402c2c:	2040c344 	.word	0x2040c344
  402c30:	2040c348 	.word	0x2040c348
  402c34:	2040c33c 	.word	0x2040c33c
  402c38:	2040c34c 	.word	0x2040c34c
  402c3c:	00409970 	.word	0x00409970
  402c40:	00409984 	.word	0x00409984
  402c44:	004026f9 	.word	0x004026f9
  402c48:	004099a0 	.word	0x004099a0
  402c4c:	004099c4 	.word	0x004099c4
  402c50:	00409888 	.word	0x00409888
  402c54:	004099e4 	.word	0x004099e4
  402c58:	00403949 	.word	0x00403949
  402c5c:	00403955 	.word	0x00403955
  402c60:	004098b4 	.word	0x004098b4
  402c64:	2040c33b 	.word	0x2040c33b
  402c68:	00409880 	.word	0x00409880
			}
		}
	}

	return ret;
}
  402c6c:	2000      	movs	r0, #0
  402c6e:	b007      	add	sp, #28
  402c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402c74 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c78:	b083      	sub	sp, #12
  402c7a:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402c7c:	2a00      	cmp	r2, #0
  402c7e:	bf18      	it	ne
  402c80:	2900      	cmpne	r1, #0
  402c82:	d003      	beq.n	402c8c <hif_receive+0x18>
  402c84:	4605      	mov	r5, r0
  402c86:	460f      	mov	r7, r1
  402c88:	4616      	mov	r6, r2
  402c8a:	b9b8      	cbnz	r0, 402cbc <hif_receive+0x48>
	{
		if(isDone)
  402c8c:	b14c      	cbz	r4, 402ca2 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  402c8e:	2201      	movs	r2, #1
  402c90:	4b32      	ldr	r3, [pc, #200]	; (402d5c <hif_receive+0xe8>)
  402c92:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402c94:	4b32      	ldr	r3, [pc, #200]	; (402d60 <hif_receive+0xec>)
  402c96:	4798      	blx	r3
  402c98:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402c9a:	4618      	mov	r0, r3
  402c9c:	b003      	add	sp, #12
  402c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  402ca2:	f240 2269 	movw	r2, #617	; 0x269
  402ca6:	492f      	ldr	r1, [pc, #188]	; (402d64 <hif_receive+0xf0>)
  402ca8:	482f      	ldr	r0, [pc, #188]	; (402d68 <hif_receive+0xf4>)
  402caa:	4c30      	ldr	r4, [pc, #192]	; (402d6c <hif_receive+0xf8>)
  402cac:	47a0      	blx	r4
  402cae:	4830      	ldr	r0, [pc, #192]	; (402d70 <hif_receive+0xfc>)
  402cb0:	47a0      	blx	r4
  402cb2:	4830      	ldr	r0, [pc, #192]	; (402d74 <hif_receive+0x100>)
  402cb4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402cb6:	f06f 030b 	mvn.w	r3, #11
  402cba:	e7ee      	b.n	402c9a <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402cbc:	4669      	mov	r1, sp
  402cbe:	f241 0070 	movw	r0, #4208	; 0x1070
  402cc2:	4b2d      	ldr	r3, [pc, #180]	; (402d78 <hif_receive+0x104>)
  402cc4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402cc6:	4603      	mov	r3, r0
  402cc8:	2800      	cmp	r0, #0
  402cca:	d1e6      	bne.n	402c9a <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402ccc:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402cd0:	a901      	add	r1, sp, #4
  402cd2:	f241 0084 	movw	r0, #4228	; 0x1084
  402cd6:	4b28      	ldr	r3, [pc, #160]	; (402d78 <hif_receive+0x104>)
  402cd8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402cda:	4603      	mov	r3, r0
  402cdc:	2800      	cmp	r0, #0
  402cde:	d1dc      	bne.n	402c9a <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402ce0:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402ce4:	4546      	cmp	r6, r8
  402ce6:	d81c      	bhi.n	402d22 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402ce8:	9b01      	ldr	r3, [sp, #4]
  402cea:	429d      	cmp	r5, r3
  402cec:	d328      	bcc.n	402d40 <hif_receive+0xcc>
  402cee:	eb05 0906 	add.w	r9, r5, r6
  402cf2:	4443      	add	r3, r8
  402cf4:	4599      	cmp	r9, r3
  402cf6:	d823      	bhi.n	402d40 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402cf8:	4632      	mov	r2, r6
  402cfa:	4639      	mov	r1, r7
  402cfc:	4628      	mov	r0, r5
  402cfe:	4b1f      	ldr	r3, [pc, #124]	; (402d7c <hif_receive+0x108>)
  402d00:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402d02:	4603      	mov	r3, r0
  402d04:	2800      	cmp	r0, #0
  402d06:	d1c8      	bne.n	402c9a <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402d08:	9a01      	ldr	r2, [sp, #4]
  402d0a:	4490      	add	r8, r2
  402d0c:	45c8      	cmp	r8, r9
  402d0e:	d001      	beq.n	402d14 <hif_receive+0xa0>
  402d10:	2c00      	cmp	r4, #0
  402d12:	d0c2      	beq.n	402c9a <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402d14:	2201      	movs	r2, #1
  402d16:	4b11      	ldr	r3, [pc, #68]	; (402d5c <hif_receive+0xe8>)
  402d18:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402d1a:	4b11      	ldr	r3, [pc, #68]	; (402d60 <hif_receive+0xec>)
  402d1c:	4798      	blx	r3
  402d1e:	4603      	mov	r3, r0
  402d20:	e7bb      	b.n	402c9a <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402d22:	f240 227a 	movw	r2, #634	; 0x27a
  402d26:	490f      	ldr	r1, [pc, #60]	; (402d64 <hif_receive+0xf0>)
  402d28:	480f      	ldr	r0, [pc, #60]	; (402d68 <hif_receive+0xf4>)
  402d2a:	4c10      	ldr	r4, [pc, #64]	; (402d6c <hif_receive+0xf8>)
  402d2c:	47a0      	blx	r4
  402d2e:	4642      	mov	r2, r8
  402d30:	4631      	mov	r1, r6
  402d32:	4813      	ldr	r0, [pc, #76]	; (402d80 <hif_receive+0x10c>)
  402d34:	47a0      	blx	r4
  402d36:	480f      	ldr	r0, [pc, #60]	; (402d74 <hif_receive+0x100>)
  402d38:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402d3a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402d3e:	e7ac      	b.n	402c9a <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402d40:	f44f 7220 	mov.w	r2, #640	; 0x280
  402d44:	4907      	ldr	r1, [pc, #28]	; (402d64 <hif_receive+0xf0>)
  402d46:	4808      	ldr	r0, [pc, #32]	; (402d68 <hif_receive+0xf4>)
  402d48:	4c08      	ldr	r4, [pc, #32]	; (402d6c <hif_receive+0xf8>)
  402d4a:	47a0      	blx	r4
  402d4c:	480d      	ldr	r0, [pc, #52]	; (402d84 <hif_receive+0x110>)
  402d4e:	47a0      	blx	r4
  402d50:	4808      	ldr	r0, [pc, #32]	; (402d74 <hif_receive+0x100>)
  402d52:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402d54:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402d58:	e79f      	b.n	402c9a <hif_receive+0x26>
  402d5a:	bf00      	nop
  402d5c:	2040c33a 	.word	0x2040c33a
  402d60:	0040265d 	.word	0x0040265d
  402d64:	00409898 	.word	0x00409898
  402d68:	00409844 	.word	0x00409844
  402d6c:	00406231 	.word	0x00406231
  402d70:	00409a14 	.word	0x00409a14
  402d74:	00409870 	.word	0x00409870
  402d78:	00403949 	.word	0x00403949
  402d7c:	00403961 	.word	0x00403961
  402d80:	00409a34 	.word	0x00409a34
  402d84:	00409a78 	.word	0x00409a78

00402d88 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402d88:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402d8a:	1e43      	subs	r3, r0, #1
  402d8c:	2b06      	cmp	r3, #6
  402d8e:	d81d      	bhi.n	402dcc <hif_register_cb+0x44>
  402d90:	e8df f003 	tbb	[pc, r3]
  402d94:	0c100408 	.word	0x0c100408
  402d98:	141c      	.short	0x141c
  402d9a:	18          	.byte	0x18
  402d9b:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402d9c:	4b13      	ldr	r3, [pc, #76]	; (402dec <hif_register_cb+0x64>)
  402d9e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402da0:	2000      	movs	r0, #0
			break;
  402da2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402da4:	4b12      	ldr	r3, [pc, #72]	; (402df0 <hif_register_cb+0x68>)
  402da6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402da8:	2000      	movs	r0, #0
			break;
  402daa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402dac:	4b11      	ldr	r3, [pc, #68]	; (402df4 <hif_register_cb+0x6c>)
  402dae:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402db0:	2000      	movs	r0, #0
			break;
  402db2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402db4:	4b10      	ldr	r3, [pc, #64]	; (402df8 <hif_register_cb+0x70>)
  402db6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402db8:	2000      	movs	r0, #0
			break;
  402dba:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402dbc:	4b0f      	ldr	r3, [pc, #60]	; (402dfc <hif_register_cb+0x74>)
  402dbe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402dc0:	2000      	movs	r0, #0
			break;
  402dc2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402dc4:	4b0e      	ldr	r3, [pc, #56]	; (402e00 <hif_register_cb+0x78>)
  402dc6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402dc8:	2000      	movs	r0, #0
			break;
  402dca:	bd38      	pop	{r3, r4, r5, pc}
  402dcc:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402dce:	f240 22b9 	movw	r2, #697	; 0x2b9
  402dd2:	490c      	ldr	r1, [pc, #48]	; (402e04 <hif_register_cb+0x7c>)
  402dd4:	480c      	ldr	r0, [pc, #48]	; (402e08 <hif_register_cb+0x80>)
  402dd6:	4d0d      	ldr	r5, [pc, #52]	; (402e0c <hif_register_cb+0x84>)
  402dd8:	47a8      	blx	r5
  402dda:	4621      	mov	r1, r4
  402ddc:	480c      	ldr	r0, [pc, #48]	; (402e10 <hif_register_cb+0x88>)
  402dde:	47a8      	blx	r5
  402de0:	480c      	ldr	r0, [pc, #48]	; (402e14 <hif_register_cb+0x8c>)
  402de2:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402de4:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402de8:	bd38      	pop	{r3, r4, r5, pc}
  402dea:	bf00      	nop
  402dec:	2040c344 	.word	0x2040c344
  402df0:	2040c350 	.word	0x2040c350
  402df4:	2040c348 	.word	0x2040c348
  402df8:	2040c340 	.word	0x2040c340
  402dfc:	2040c33c 	.word	0x2040c33c
  402e00:	2040c34c 	.word	0x2040c34c
  402e04:	004098a4 	.word	0x004098a4
  402e08:	00409844 	.word	0x00409844
  402e0c:	00406231 	.word	0x00406231
  402e10:	00409abc 	.word	0x00409abc
  402e14:	00409870 	.word	0x00409870

00402e18 <hif_init>:
{
  402e18:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402e1a:	2400      	movs	r4, #0
  402e1c:	4b09      	ldr	r3, [pc, #36]	; (402e44 <hif_init+0x2c>)
  402e1e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402e20:	4b09      	ldr	r3, [pc, #36]	; (402e48 <hif_init+0x30>)
  402e22:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402e24:	4b09      	ldr	r3, [pc, #36]	; (402e4c <hif_init+0x34>)
  402e26:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402e28:	4b09      	ldr	r3, [pc, #36]	; (402e50 <hif_init+0x38>)
  402e2a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402e2c:	4b09      	ldr	r3, [pc, #36]	; (402e54 <hif_init+0x3c>)
  402e2e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402e30:	4809      	ldr	r0, [pc, #36]	; (402e58 <hif_init+0x40>)
  402e32:	4b0a      	ldr	r3, [pc, #40]	; (402e5c <hif_init+0x44>)
  402e34:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402e36:	490a      	ldr	r1, [pc, #40]	; (402e60 <hif_init+0x48>)
  402e38:	2003      	movs	r0, #3
  402e3a:	4b0a      	ldr	r3, [pc, #40]	; (402e64 <hif_init+0x4c>)
  402e3c:	4798      	blx	r3
}
  402e3e:	4620      	mov	r0, r4
  402e40:	bd10      	pop	{r4, pc}
  402e42:	bf00      	nop
  402e44:	2040c350 	.word	0x2040c350
  402e48:	2040c344 	.word	0x2040c344
  402e4c:	2040c339 	.word	0x2040c339
  402e50:	2040c338 	.word	0x2040c338
  402e54:	2040c33b 	.word	0x2040c33b
  402e58:	00402649 	.word	0x00402649
  402e5c:	00402325 	.word	0x00402325
  402e60:	00402659 	.word	0x00402659
  402e64:	00402d89 	.word	0x00402d89

00402e68 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402e68:	b530      	push	{r4, r5, lr}
  402e6a:	b09f      	sub	sp, #124	; 0x7c
  402e6c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402e6e:	282c      	cmp	r0, #44	; 0x2c
  402e70:	d02e      	beq.n	402ed0 <m2m_wifi_cb+0x68>
  402e72:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402e74:	281b      	cmp	r0, #27
  402e76:	d03b      	beq.n	402ef0 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402e78:	2806      	cmp	r0, #6
  402e7a:	d049      	beq.n	402f10 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402e7c:	280e      	cmp	r0, #14
  402e7e:	d025      	beq.n	402ecc <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402e80:	2832      	cmp	r0, #50	; 0x32
  402e82:	d055      	beq.n	402f30 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402e84:	282f      	cmp	r0, #47	; 0x2f
  402e86:	d063      	beq.n	402f50 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402e88:	2834      	cmp	r0, #52	; 0x34
  402e8a:	d076      	beq.n	402f7a <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402e8c:	2811      	cmp	r0, #17
  402e8e:	f000 8093 	beq.w	402fb8 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402e92:	2813      	cmp	r0, #19
  402e94:	f000 80a8 	beq.w	402fe8 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402e98:	2804      	cmp	r0, #4
  402e9a:	f000 80b7 	beq.w	40300c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402e9e:	2865      	cmp	r0, #101	; 0x65
  402ea0:	f000 80c6 	beq.w	403030 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402ea4:	2809      	cmp	r0, #9
  402ea6:	f000 80d5 	beq.w	403054 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402eaa:	282a      	cmp	r0, #42	; 0x2a
  402eac:	f000 80e4 	beq.w	403078 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402eb0:	2820      	cmp	r0, #32
  402eb2:	f000 80f3 	beq.w	40309c <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402eb6:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402eba:	4986      	ldr	r1, [pc, #536]	; (4030d4 <m2m_wifi_cb+0x26c>)
  402ebc:	4886      	ldr	r0, [pc, #536]	; (4030d8 <m2m_wifi_cb+0x270>)
  402ebe:	4d87      	ldr	r5, [pc, #540]	; (4030dc <m2m_wifi_cb+0x274>)
  402ec0:	47a8      	blx	r5
  402ec2:	4621      	mov	r1, r4
  402ec4:	4886      	ldr	r0, [pc, #536]	; (4030e0 <m2m_wifi_cb+0x278>)
  402ec6:	47a8      	blx	r5
  402ec8:	4886      	ldr	r0, [pc, #536]	; (4030e4 <m2m_wifi_cb+0x27c>)
  402eca:	47a8      	blx	r5
	}
}
  402ecc:	b01f      	add	sp, #124	; 0x7c
  402ece:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402ed0:	2300      	movs	r3, #0
  402ed2:	2204      	movs	r2, #4
  402ed4:	a903      	add	r1, sp, #12
  402ed6:	4628      	mov	r0, r5
  402ed8:	4c83      	ldr	r4, [pc, #524]	; (4030e8 <m2m_wifi_cb+0x280>)
  402eda:	47a0      	blx	r4
  402edc:	2800      	cmp	r0, #0
  402ede:	d1f5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ee0:	4b82      	ldr	r3, [pc, #520]	; (4030ec <m2m_wifi_cb+0x284>)
  402ee2:	681b      	ldr	r3, [r3, #0]
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d0f1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402ee8:	a903      	add	r1, sp, #12
  402eea:	202c      	movs	r0, #44	; 0x2c
  402eec:	4798      	blx	r3
  402eee:	e7ed      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402ef0:	2300      	movs	r3, #0
  402ef2:	2208      	movs	r2, #8
  402ef4:	a903      	add	r1, sp, #12
  402ef6:	4628      	mov	r0, r5
  402ef8:	4c7b      	ldr	r4, [pc, #492]	; (4030e8 <m2m_wifi_cb+0x280>)
  402efa:	47a0      	blx	r4
  402efc:	2800      	cmp	r0, #0
  402efe:	d1e5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f00:	4b7a      	ldr	r3, [pc, #488]	; (4030ec <m2m_wifi_cb+0x284>)
  402f02:	681b      	ldr	r3, [r3, #0]
  402f04:	2b00      	cmp	r3, #0
  402f06:	d0e1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402f08:	a903      	add	r1, sp, #12
  402f0a:	201b      	movs	r0, #27
  402f0c:	4798      	blx	r3
  402f0e:	e7dd      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402f10:	2301      	movs	r3, #1
  402f12:	2230      	movs	r2, #48	; 0x30
  402f14:	a903      	add	r1, sp, #12
  402f16:	4628      	mov	r0, r5
  402f18:	4c73      	ldr	r4, [pc, #460]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f1a:	47a0      	blx	r4
  402f1c:	2800      	cmp	r0, #0
  402f1e:	d1d5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402f20:	4b72      	ldr	r3, [pc, #456]	; (4030ec <m2m_wifi_cb+0x284>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	2b00      	cmp	r3, #0
  402f26:	d0d1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402f28:	a903      	add	r1, sp, #12
  402f2a:	2006      	movs	r0, #6
  402f2c:	4798      	blx	r3
  402f2e:	e7cd      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402f30:	2300      	movs	r3, #0
  402f32:	2210      	movs	r2, #16
  402f34:	a903      	add	r1, sp, #12
  402f36:	4628      	mov	r0, r5
  402f38:	4c6b      	ldr	r4, [pc, #428]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f3a:	47a0      	blx	r4
  402f3c:	2800      	cmp	r0, #0
  402f3e:	d1c5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f40:	4b6a      	ldr	r3, [pc, #424]	; (4030ec <m2m_wifi_cb+0x284>)
  402f42:	681b      	ldr	r3, [r3, #0]
  402f44:	2b00      	cmp	r3, #0
  402f46:	d0c1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402f48:	a903      	add	r1, sp, #12
  402f4a:	2032      	movs	r0, #50	; 0x32
  402f4c:	4798      	blx	r3
  402f4e:	e7bd      	b.n	402ecc <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402f50:	2264      	movs	r2, #100	; 0x64
  402f52:	2100      	movs	r1, #0
  402f54:	a803      	add	r0, sp, #12
  402f56:	4b66      	ldr	r3, [pc, #408]	; (4030f0 <m2m_wifi_cb+0x288>)
  402f58:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402f5a:	2300      	movs	r3, #0
  402f5c:	2264      	movs	r2, #100	; 0x64
  402f5e:	a903      	add	r1, sp, #12
  402f60:	4628      	mov	r0, r5
  402f62:	4c61      	ldr	r4, [pc, #388]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f64:	47a0      	blx	r4
  402f66:	2800      	cmp	r0, #0
  402f68:	d1b0      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f6a:	4b60      	ldr	r3, [pc, #384]	; (4030ec <m2m_wifi_cb+0x284>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	2b00      	cmp	r3, #0
  402f70:	d0ac      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402f72:	a903      	add	r1, sp, #12
  402f74:	202f      	movs	r0, #47	; 0x2f
  402f76:	4798      	blx	r3
  402f78:	e7a8      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402f7a:	2300      	movs	r3, #0
  402f7c:	2204      	movs	r2, #4
  402f7e:	a903      	add	r1, sp, #12
  402f80:	4628      	mov	r0, r5
  402f82:	4c59      	ldr	r4, [pc, #356]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f84:	47a0      	blx	r4
  402f86:	2800      	cmp	r0, #0
  402f88:	d1a0      	bne.n	402ecc <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402f8a:	485a      	ldr	r0, [pc, #360]	; (4030f4 <m2m_wifi_cb+0x28c>)
  402f8c:	4c53      	ldr	r4, [pc, #332]	; (4030dc <m2m_wifi_cb+0x274>)
  402f8e:	47a0      	blx	r4
  402f90:	9903      	ldr	r1, [sp, #12]
  402f92:	b2cb      	uxtb	r3, r1
  402f94:	9300      	str	r3, [sp, #0]
  402f96:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402f9a:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402f9e:	0e09      	lsrs	r1, r1, #24
  402fa0:	4855      	ldr	r0, [pc, #340]	; (4030f8 <m2m_wifi_cb+0x290>)
  402fa2:	47a0      	blx	r4
  402fa4:	484f      	ldr	r0, [pc, #316]	; (4030e4 <m2m_wifi_cb+0x27c>)
  402fa6:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402fa8:	4b50      	ldr	r3, [pc, #320]	; (4030ec <m2m_wifi_cb+0x284>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	2b00      	cmp	r3, #0
  402fae:	d08d      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402fb0:	2100      	movs	r1, #0
  402fb2:	2034      	movs	r0, #52	; 0x34
  402fb4:	4798      	blx	r3
  402fb6:	e789      	b.n	402ecc <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402fb8:	2300      	movs	r3, #0
  402fba:	4a50      	ldr	r2, [pc, #320]	; (4030fc <m2m_wifi_cb+0x294>)
  402fbc:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402fbe:	2204      	movs	r2, #4
  402fc0:	a903      	add	r1, sp, #12
  402fc2:	4628      	mov	r0, r5
  402fc4:	4c48      	ldr	r4, [pc, #288]	; (4030e8 <m2m_wifi_cb+0x280>)
  402fc6:	47a0      	blx	r4
  402fc8:	2800      	cmp	r0, #0
  402fca:	f47f af7f 	bne.w	402ecc <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402fce:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402fd2:	4b4b      	ldr	r3, [pc, #300]	; (403100 <m2m_wifi_cb+0x298>)
  402fd4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402fd6:	4b45      	ldr	r3, [pc, #276]	; (4030ec <m2m_wifi_cb+0x284>)
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	2b00      	cmp	r3, #0
  402fdc:	f43f af76 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402fe0:	a903      	add	r1, sp, #12
  402fe2:	2011      	movs	r0, #17
  402fe4:	4798      	blx	r3
  402fe6:	e771      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402fe8:	2300      	movs	r3, #0
  402fea:	222c      	movs	r2, #44	; 0x2c
  402fec:	a903      	add	r1, sp, #12
  402fee:	4628      	mov	r0, r5
  402ff0:	4c3d      	ldr	r4, [pc, #244]	; (4030e8 <m2m_wifi_cb+0x280>)
  402ff2:	47a0      	blx	r4
  402ff4:	2800      	cmp	r0, #0
  402ff6:	f47f af69 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ffa:	4b3c      	ldr	r3, [pc, #240]	; (4030ec <m2m_wifi_cb+0x284>)
  402ffc:	681b      	ldr	r3, [r3, #0]
  402ffe:	2b00      	cmp	r3, #0
  403000:	f43f af64 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  403004:	a903      	add	r1, sp, #12
  403006:	2013      	movs	r0, #19
  403008:	4798      	blx	r3
  40300a:	e75f      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40300c:	2300      	movs	r3, #0
  40300e:	2204      	movs	r2, #4
  403010:	a91c      	add	r1, sp, #112	; 0x70
  403012:	4628      	mov	r0, r5
  403014:	4c34      	ldr	r4, [pc, #208]	; (4030e8 <m2m_wifi_cb+0x280>)
  403016:	47a0      	blx	r4
  403018:	2800      	cmp	r0, #0
  40301a:	f47f af57 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40301e:	4b33      	ldr	r3, [pc, #204]	; (4030ec <m2m_wifi_cb+0x284>)
  403020:	681b      	ldr	r3, [r3, #0]
  403022:	2b00      	cmp	r3, #0
  403024:	f43f af52 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  403028:	a91c      	add	r1, sp, #112	; 0x70
  40302a:	2004      	movs	r0, #4
  40302c:	4798      	blx	r3
  40302e:	e74d      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403030:	2300      	movs	r3, #0
  403032:	2204      	movs	r2, #4
  403034:	a91c      	add	r1, sp, #112	; 0x70
  403036:	4628      	mov	r0, r5
  403038:	4c2b      	ldr	r4, [pc, #172]	; (4030e8 <m2m_wifi_cb+0x280>)
  40303a:	47a0      	blx	r4
  40303c:	2800      	cmp	r0, #0
  40303e:	f47f af45 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403042:	4b2a      	ldr	r3, [pc, #168]	; (4030ec <m2m_wifi_cb+0x284>)
  403044:	681b      	ldr	r3, [r3, #0]
  403046:	2b00      	cmp	r3, #0
  403048:	f43f af40 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  40304c:	a91c      	add	r1, sp, #112	; 0x70
  40304e:	2065      	movs	r0, #101	; 0x65
  403050:	4798      	blx	r3
  403052:	e73b      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  403054:	2301      	movs	r3, #1
  403056:	2264      	movs	r2, #100	; 0x64
  403058:	a903      	add	r1, sp, #12
  40305a:	4628      	mov	r0, r5
  40305c:	4c22      	ldr	r4, [pc, #136]	; (4030e8 <m2m_wifi_cb+0x280>)
  40305e:	47a0      	blx	r4
  403060:	2800      	cmp	r0, #0
  403062:	f47f af33 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403066:	4b21      	ldr	r3, [pc, #132]	; (4030ec <m2m_wifi_cb+0x284>)
  403068:	681b      	ldr	r3, [r3, #0]
  40306a:	2b00      	cmp	r3, #0
  40306c:	f43f af2e 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403070:	a903      	add	r1, sp, #12
  403072:	2009      	movs	r0, #9
  403074:	4798      	blx	r3
  403076:	e729      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  403078:	2301      	movs	r3, #1
  40307a:	2204      	movs	r2, #4
  40307c:	a903      	add	r1, sp, #12
  40307e:	4628      	mov	r0, r5
  403080:	4c19      	ldr	r4, [pc, #100]	; (4030e8 <m2m_wifi_cb+0x280>)
  403082:	47a0      	blx	r4
  403084:	2800      	cmp	r0, #0
  403086:	f47f af21 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40308a:	4b18      	ldr	r3, [pc, #96]	; (4030ec <m2m_wifi_cb+0x284>)
  40308c:	681b      	ldr	r3, [r3, #0]
  40308e:	2b00      	cmp	r3, #0
  403090:	f43f af1c 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  403094:	a903      	add	r1, sp, #12
  403096:	202a      	movs	r0, #42	; 0x2a
  403098:	4798      	blx	r3
  40309a:	e717      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  40309c:	2300      	movs	r3, #0
  40309e:	2208      	movs	r2, #8
  4030a0:	a903      	add	r1, sp, #12
  4030a2:	4628      	mov	r0, r5
  4030a4:	4c10      	ldr	r4, [pc, #64]	; (4030e8 <m2m_wifi_cb+0x280>)
  4030a6:	47a0      	blx	r4
  4030a8:	2800      	cmp	r0, #0
  4030aa:	f47f af0f 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  4030ae:	2301      	movs	r3, #1
  4030b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4030b4:	9903      	ldr	r1, [sp, #12]
  4030b6:	f105 0008 	add.w	r0, r5, #8
  4030ba:	47a0      	blx	r4
  4030bc:	2800      	cmp	r0, #0
  4030be:	f47f af05 	bne.w	402ecc <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  4030c2:	4b0a      	ldr	r3, [pc, #40]	; (4030ec <m2m_wifi_cb+0x284>)
  4030c4:	681b      	ldr	r3, [r3, #0]
  4030c6:	2b00      	cmp	r3, #0
  4030c8:	f43f af00 	beq.w	402ecc <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  4030cc:	a903      	add	r1, sp, #12
  4030ce:	2020      	movs	r0, #32
  4030d0:	4798      	blx	r3
  4030d2:	e6fb      	b.n	402ecc <m2m_wifi_cb+0x64>
  4030d4:	00409ae8 	.word	0x00409ae8
  4030d8:	00409844 	.word	0x00409844
  4030dc:	00406231 	.word	0x00406231
  4030e0:	00409b44 	.word	0x00409b44
  4030e4:	00409870 	.word	0x00409870
  4030e8:	00402c75 	.word	0x00402c75
  4030ec:	2040c354 	.word	0x2040c354
  4030f0:	00402621 	.word	0x00402621
  4030f4:	00409b18 	.word	0x00409b18
  4030f8:	00409b24 	.word	0x00409b24
  4030fc:	2040c359 	.word	0x2040c359
  403100:	2040c358 	.word	0x2040c358

00403104 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  403104:	b5f0      	push	{r4, r5, r6, r7, lr}
  403106:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  403108:	2301      	movs	r3, #1
  40310a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40310e:	2800      	cmp	r0, #0
  403110:	d050      	beq.n	4031b4 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  403112:	6802      	ldr	r2, [r0, #0]
  403114:	4b29      	ldr	r3, [pc, #164]	; (4031bc <m2m_wifi_init+0xb8>)
  403116:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  403118:	2200      	movs	r2, #0
  40311a:	4b29      	ldr	r3, [pc, #164]	; (4031c0 <m2m_wifi_init+0xbc>)
  40311c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40311e:	f10d 0007 	add.w	r0, sp, #7
  403122:	4b28      	ldr	r3, [pc, #160]	; (4031c4 <m2m_wifi_init+0xc0>)
  403124:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  403126:	4604      	mov	r4, r0
  403128:	b110      	cbz	r0, 403130 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40312a:	4620      	mov	r0, r4
  40312c:	b00b      	add	sp, #44	; 0x2c
  40312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  403130:	4b25      	ldr	r3, [pc, #148]	; (4031c8 <m2m_wifi_init+0xc4>)
  403132:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  403134:	4604      	mov	r4, r0
  403136:	2800      	cmp	r0, #0
  403138:	d138      	bne.n	4031ac <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40313a:	4924      	ldr	r1, [pc, #144]	; (4031cc <m2m_wifi_init+0xc8>)
  40313c:	2001      	movs	r0, #1
  40313e:	4b24      	ldr	r3, [pc, #144]	; (4031d0 <m2m_wifi_init+0xcc>)
  403140:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  403142:	a802      	add	r0, sp, #8
  403144:	4b23      	ldr	r3, [pc, #140]	; (4031d4 <m2m_wifi_init+0xd0>)
  403146:	4798      	blx	r3
  403148:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40314a:	4f23      	ldr	r7, [pc, #140]	; (4031d8 <m2m_wifi_init+0xd4>)
  40314c:	4638      	mov	r0, r7
  40314e:	4d23      	ldr	r5, [pc, #140]	; (4031dc <m2m_wifi_init+0xd8>)
  403150:	47a8      	blx	r5
  403152:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403156:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40315a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40315e:	4820      	ldr	r0, [pc, #128]	; (4031e0 <m2m_wifi_init+0xdc>)
  403160:	47a8      	blx	r5
  403162:	4e20      	ldr	r6, [pc, #128]	; (4031e4 <m2m_wifi_init+0xe0>)
  403164:	4630      	mov	r0, r6
  403166:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  403168:	4638      	mov	r0, r7
  40316a:	47a8      	blx	r5
  40316c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403170:	f89d 2010 	ldrb.w	r2, [sp, #16]
  403174:	f89d 100f 	ldrb.w	r1, [sp, #15]
  403178:	481b      	ldr	r0, [pc, #108]	; (4031e8 <m2m_wifi_init+0xe4>)
  40317a:	47a8      	blx	r5
  40317c:	4630      	mov	r0, r6
  40317e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  403180:	4638      	mov	r0, r7
  403182:	47a8      	blx	r5
  403184:	2300      	movs	r3, #0
  403186:	2203      	movs	r2, #3
  403188:	2113      	movs	r1, #19
  40318a:	4818      	ldr	r0, [pc, #96]	; (4031ec <m2m_wifi_init+0xe8>)
  40318c:	47a8      	blx	r5
  40318e:	4630      	mov	r0, r6
  403190:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  403192:	f114 0f0d 	cmn.w	r4, #13
  403196:	d1c8      	bne.n	40312a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  403198:	f240 12d5 	movw	r2, #469	; 0x1d5
  40319c:	4914      	ldr	r1, [pc, #80]	; (4031f0 <m2m_wifi_init+0xec>)
  40319e:	4815      	ldr	r0, [pc, #84]	; (4031f4 <m2m_wifi_init+0xf0>)
  4031a0:	47a8      	blx	r5
  4031a2:	4815      	ldr	r0, [pc, #84]	; (4031f8 <m2m_wifi_init+0xf4>)
  4031a4:	47a8      	blx	r5
  4031a6:	4630      	mov	r0, r6
  4031a8:	47a8      	blx	r5
  4031aa:	e7be      	b.n	40312a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4031ac:	2000      	movs	r0, #0
  4031ae:	4b13      	ldr	r3, [pc, #76]	; (4031fc <m2m_wifi_init+0xf8>)
  4031b0:	4798      	blx	r3
  4031b2:	e7ba      	b.n	40312a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4031b4:	f06f 040b 	mvn.w	r4, #11
  4031b8:	e7b7      	b.n	40312a <m2m_wifi_init+0x26>
  4031ba:	bf00      	nop
  4031bc:	2040c354 	.word	0x2040c354
  4031c0:	2040c359 	.word	0x2040c359
  4031c4:	00403ac9 	.word	0x00403ac9
  4031c8:	00402e19 	.word	0x00402e19
  4031cc:	00402e69 	.word	0x00402e69
  4031d0:	00402d89 	.word	0x00402d89
  4031d4:	00403a19 	.word	0x00403a19
  4031d8:	00409b18 	.word	0x00409b18
  4031dc:	00406231 	.word	0x00406231
  4031e0:	00409c04 	.word	0x00409c04
  4031e4:	00409870 	.word	0x00409870
  4031e8:	00409c20 	.word	0x00409c20
  4031ec:	00409c3c 	.word	0x00409c3c
  4031f0:	00409af4 	.word	0x00409af4
  4031f4:	00409844 	.word	0x00409844
  4031f8:	00409c58 	.word	0x00409c58
  4031fc:	00403b95 	.word	0x00403b95

00403200 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  403200:	b508      	push	{r3, lr}
	return hif_handle_isr();
  403202:	4b01      	ldr	r3, [pc, #4]	; (403208 <m2m_wifi_handle_events+0x8>)
  403204:	4798      	blx	r3
}
  403206:	bd08      	pop	{r3, pc}
  403208:	00402965 	.word	0x00402965

0040320c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403210:	b0a0      	sub	sp, #128	; 0x80
  403212:	4680      	mov	r8, r0
  403214:	460d      	mov	r5, r1
  403216:	4614      	mov	r4, r2
  403218:	461e      	mov	r6, r3
  40321a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40321e:	2a01      	cmp	r2, #1
  403220:	d003      	beq.n	40322a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  403222:	2b00      	cmp	r3, #0
  403224:	d037      	beq.n	403296 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  403226:	2a02      	cmp	r2, #2
  403228:	d042      	beq.n	4032b0 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40322a:	1e6b      	subs	r3, r5, #1
  40322c:	b2db      	uxtb	r3, r3
  40322e:	2b1f      	cmp	r3, #31
  403230:	d875      	bhi.n	40331e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  403232:	2fff      	cmp	r7, #255	; 0xff
  403234:	d001      	beq.n	40323a <m2m_wifi_connect_sc+0x2e>
  403236:	2f0d      	cmp	r7, #13
  403238:	d87e      	bhi.n	403338 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40323a:	462a      	mov	r2, r5
  40323c:	4641      	mov	r1, r8
  40323e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  403242:	4b77      	ldr	r3, [pc, #476]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403244:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  403246:	ab20      	add	r3, sp, #128	; 0x80
  403248:	441d      	add	r5, r3
  40324a:	2300      	movs	r3, #0
  40324c:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  403250:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  403254:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  403258:	3300      	adds	r3, #0
  40325a:	bf18      	it	ne
  40325c:	2301      	movne	r3, #1
  40325e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  403262:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  403266:	2c03      	cmp	r4, #3
  403268:	d073      	beq.n	403352 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40326a:	2c02      	cmp	r4, #2
  40326c:	f000 80aa 	beq.w	4033c4 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403270:	2c04      	cmp	r4, #4
  403272:	f000 80c1 	beq.w	4033f8 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  403276:	2c01      	cmp	r4, #1
  403278:	f040 80c4 	bne.w	403404 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40327c:	2300      	movs	r3, #0
  40327e:	9302      	str	r3, [sp, #8]
  403280:	9301      	str	r3, [sp, #4]
  403282:	9300      	str	r3, [sp, #0]
  403284:	236c      	movs	r3, #108	; 0x6c
  403286:	aa05      	add	r2, sp, #20
  403288:	2128      	movs	r1, #40	; 0x28
  40328a:	2001      	movs	r0, #1
  40328c:	4c65      	ldr	r4, [pc, #404]	; (403424 <m2m_wifi_connect_sc+0x218>)
  40328e:	47a0      	blx	r4

ERR1:
	return ret;
}
  403290:	b020      	add	sp, #128	; 0x80
  403292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  403296:	f240 2203 	movw	r2, #515	; 0x203
  40329a:	4963      	ldr	r1, [pc, #396]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40329c:	4863      	ldr	r0, [pc, #396]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40329e:	4c64      	ldr	r4, [pc, #400]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4032a0:	47a0      	blx	r4
  4032a2:	4864      	ldr	r0, [pc, #400]	; (403434 <m2m_wifi_connect_sc+0x228>)
  4032a4:	47a0      	blx	r4
  4032a6:	4864      	ldr	r0, [pc, #400]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4032a8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4032aa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4032ae:	e7ef      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4032b0:	4618      	mov	r0, r3
  4032b2:	4b62      	ldr	r3, [pc, #392]	; (40343c <m2m_wifi_connect_sc+0x230>)
  4032b4:	4798      	blx	r3
  4032b6:	2840      	cmp	r0, #64	; 0x40
  4032b8:	d1b7      	bne.n	40322a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4032ba:	7833      	ldrb	r3, [r6, #0]
  4032bc:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4032c0:	b2d2      	uxtb	r2, r2
  4032c2:	2a06      	cmp	r2, #6
  4032c4:	d91e      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4032ca:	b2d2      	uxtb	r2, r2
  4032cc:	2a36      	cmp	r2, #54	; 0x36
  4032ce:	d819      	bhi.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032d0:	3b47      	subs	r3, #71	; 0x47
  4032d2:	b2db      	uxtb	r3, r3
  4032d4:	2b19      	cmp	r3, #25
  4032d6:	d915      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032d8:	4631      	mov	r1, r6
  4032da:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4032de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4032e2:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4032e6:	b2d2      	uxtb	r2, r2
  4032e8:	2a06      	cmp	r2, #6
  4032ea:	d90b      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4032f0:	b2d2      	uxtb	r2, r2
  4032f2:	2a36      	cmp	r2, #54	; 0x36
  4032f4:	d806      	bhi.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032f6:	3b47      	subs	r3, #71	; 0x47
  4032f8:	b2db      	uxtb	r3, r3
  4032fa:	2b19      	cmp	r3, #25
  4032fc:	d902      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  4032fe:	4288      	cmp	r0, r1
  403300:	d1ed      	bne.n	4032de <m2m_wifi_connect_sc+0xd2>
  403302:	e792      	b.n	40322a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  403304:	f240 220f 	movw	r2, #527	; 0x20f
  403308:	4947      	ldr	r1, [pc, #284]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40330a:	4848      	ldr	r0, [pc, #288]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40330c:	4c48      	ldr	r4, [pc, #288]	; (403430 <m2m_wifi_connect_sc+0x224>)
  40330e:	47a0      	blx	r4
  403310:	484b      	ldr	r0, [pc, #300]	; (403440 <m2m_wifi_connect_sc+0x234>)
  403312:	47a0      	blx	r4
  403314:	4848      	ldr	r0, [pc, #288]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403316:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  403318:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40331c:	e7b8      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40331e:	f240 2219 	movw	r2, #537	; 0x219
  403322:	4941      	ldr	r1, [pc, #260]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  403324:	4841      	ldr	r0, [pc, #260]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403326:	4c42      	ldr	r4, [pc, #264]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403328:	47a0      	blx	r4
  40332a:	4846      	ldr	r0, [pc, #280]	; (403444 <m2m_wifi_connect_sc+0x238>)
  40332c:	47a0      	blx	r4
  40332e:	4842      	ldr	r0, [pc, #264]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403330:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403332:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403336:	e7ab      	b.n	403290 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  403338:	f240 2222 	movw	r2, #546	; 0x222
  40333c:	493a      	ldr	r1, [pc, #232]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40333e:	483b      	ldr	r0, [pc, #236]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403340:	4c3b      	ldr	r4, [pc, #236]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403342:	47a0      	blx	r4
  403344:	4840      	ldr	r0, [pc, #256]	; (403448 <m2m_wifi_connect_sc+0x23c>)
  403346:	47a0      	blx	r4
  403348:	483b      	ldr	r0, [pc, #236]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  40334a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40334c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403350:	e79e      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  403352:	7833      	ldrb	r3, [r6, #0]
  403354:	3b01      	subs	r3, #1
  403356:	b2db      	uxtb	r3, r3
  403358:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  40335c:	2b03      	cmp	r3, #3
  40335e:	d813      	bhi.n	403388 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403360:	7872      	ldrb	r2, [r6, #1]
  403362:	1e53      	subs	r3, r2, #1
  403364:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  403368:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40336c:	2b0b      	cmp	r3, #11
  40336e:	d11a      	bne.n	4033a6 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403370:	1cb1      	adds	r1, r6, #2
  403372:	f10d 0016 	add.w	r0, sp, #22
  403376:	4b2a      	ldr	r3, [pc, #168]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403378:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40337a:	7873      	ldrb	r3, [r6, #1]
  40337c:	aa20      	add	r2, sp, #128	; 0x80
  40337e:	4413      	add	r3, r2
  403380:	2200      	movs	r2, #0
  403382:	f803 2c6a 	strb.w	r2, [r3, #-106]
  403386:	e779      	b.n	40327c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  403388:	f240 2239 	movw	r2, #569	; 0x239
  40338c:	4926      	ldr	r1, [pc, #152]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40338e:	4827      	ldr	r0, [pc, #156]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403390:	4c27      	ldr	r4, [pc, #156]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403392:	47a0      	blx	r4
  403394:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403398:	482c      	ldr	r0, [pc, #176]	; (40344c <m2m_wifi_connect_sc+0x240>)
  40339a:	47a0      	blx	r4
  40339c:	4826      	ldr	r0, [pc, #152]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  40339e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033a0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033a4:	e774      	b.n	403290 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4033a6:	f44f 7210 	mov.w	r2, #576	; 0x240
  4033aa:	491f      	ldr	r1, [pc, #124]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  4033ac:	481f      	ldr	r0, [pc, #124]	; (40342c <m2m_wifi_connect_sc+0x220>)
  4033ae:	4c20      	ldr	r4, [pc, #128]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4033b0:	47a0      	blx	r4
  4033b2:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4033b6:	4826      	ldr	r0, [pc, #152]	; (403450 <m2m_wifi_connect_sc+0x244>)
  4033b8:	47a0      	blx	r4
  4033ba:	481f      	ldr	r0, [pc, #124]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4033bc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033be:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033c2:	e765      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4033c4:	4630      	mov	r0, r6
  4033c6:	4b1d      	ldr	r3, [pc, #116]	; (40343c <m2m_wifi_connect_sc+0x230>)
  4033c8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4033ca:	1e43      	subs	r3, r0, #1
  4033cc:	b29b      	uxth	r3, r3
  4033ce:	2b3f      	cmp	r3, #63	; 0x3f
  4033d0:	d805      	bhi.n	4033de <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4033d2:	1c42      	adds	r2, r0, #1
  4033d4:	4631      	mov	r1, r6
  4033d6:	a805      	add	r0, sp, #20
  4033d8:	4b11      	ldr	r3, [pc, #68]	; (403420 <m2m_wifi_connect_sc+0x214>)
  4033da:	4798      	blx	r3
  4033dc:	e74e      	b.n	40327c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  4033de:	f240 224f 	movw	r2, #591	; 0x24f
  4033e2:	4911      	ldr	r1, [pc, #68]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  4033e4:	4811      	ldr	r0, [pc, #68]	; (40342c <m2m_wifi_connect_sc+0x220>)
  4033e6:	4c12      	ldr	r4, [pc, #72]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4033e8:	47a0      	blx	r4
  4033ea:	481a      	ldr	r0, [pc, #104]	; (403454 <m2m_wifi_connect_sc+0x248>)
  4033ec:	47a0      	blx	r4
  4033ee:	4812      	ldr	r0, [pc, #72]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4033f0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033f2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033f6:	e74b      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4033f8:	223e      	movs	r2, #62	; 0x3e
  4033fa:	4631      	mov	r1, r6
  4033fc:	a805      	add	r0, sp, #20
  4033fe:	4b08      	ldr	r3, [pc, #32]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403400:	4798      	blx	r3
  403402:	e73b      	b.n	40327c <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  403404:	f240 225f 	movw	r2, #607	; 0x25f
  403408:	4907      	ldr	r1, [pc, #28]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40340a:	4808      	ldr	r0, [pc, #32]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40340c:	4c08      	ldr	r4, [pc, #32]	; (403430 <m2m_wifi_connect_sc+0x224>)
  40340e:	47a0      	blx	r4
  403410:	4811      	ldr	r0, [pc, #68]	; (403458 <m2m_wifi_connect_sc+0x24c>)
  403412:	47a0      	blx	r4
  403414:	4808      	ldr	r0, [pc, #32]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403416:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403418:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40341c:	e738      	b.n	403290 <m2m_wifi_connect_sc+0x84>
  40341e:	bf00      	nop
  403420:	0040260d 	.word	0x0040260d
  403424:	00402785 	.word	0x00402785
  403428:	00409b04 	.word	0x00409b04
  40342c:	00409844 	.word	0x00409844
  403430:	00406231 	.word	0x00406231
  403434:	00409b58 	.word	0x00409b58
  403438:	00409870 	.word	0x00409870
  40343c:	0040262f 	.word	0x0040262f
  403440:	00409b6c 	.word	0x00409b6c
  403444:	00409b7c 	.word	0x00409b7c
  403448:	00409b90 	.word	0x00409b90
  40344c:	00409b9c 	.word	0x00409b9c
  403450:	00409bb8 	.word	0x00409bb8
  403454:	00409bd4 	.word	0x00409bd4
  403458:	00409bf0 	.word	0x00409bf0

0040345c <m2m_wifi_connect>:
{
  40345c:	b510      	push	{r4, lr}
  40345e:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403460:	2400      	movs	r4, #0
  403462:	9401      	str	r4, [sp, #4]
  403464:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403468:	9400      	str	r4, [sp, #0]
  40346a:	4c02      	ldr	r4, [pc, #8]	; (403474 <m2m_wifi_connect+0x18>)
  40346c:	47a0      	blx	r4
}
  40346e:	b002      	add	sp, #8
  403470:	bd10      	pop	{r4, pc}
  403472:	bf00      	nop
  403474:	0040320d 	.word	0x0040320d

00403478 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403478:	2000      	movs	r0, #0
  40347a:	4770      	bx	lr

0040347c <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  40347c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40347e:	b083      	sub	sp, #12
  403480:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  403482:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  403486:	4e0a      	ldr	r6, [pc, #40]	; (4034b0 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  403488:	4f0a      	ldr	r7, [pc, #40]	; (4034b4 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  40348a:	4621      	mov	r1, r4
  40348c:	4628      	mov	r0, r5
  40348e:	47b0      	blx	r6
		if(val32 != 0) {		
  403490:	b154      	cbz	r4, 4034a8 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  403492:	a902      	add	r1, sp, #8
  403494:	2300      	movs	r3, #0
  403496:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40349a:	4628      	mov	r0, r5
  40349c:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40349e:	2800      	cmp	r0, #0
  4034a0:	d1f3      	bne.n	40348a <chip_apply_conf+0xe>
				if(reg == val32)
  4034a2:	9b01      	ldr	r3, [sp, #4]
  4034a4:	429c      	cmp	r4, r3
  4034a6:	d1f0      	bne.n	40348a <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4034a8:	2000      	movs	r0, #0
  4034aa:	b003      	add	sp, #12
  4034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034ae:	bf00      	nop
  4034b0:	00403955 	.word	0x00403955
  4034b4:	00403949 	.word	0x00403949

004034b8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034bc:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4034be:	2001      	movs	r0, #1
  4034c0:	4b3c      	ldr	r3, [pc, #240]	; (4035b4 <nm_clkless_wake+0xfc>)
  4034c2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4034c4:	a901      	add	r1, sp, #4
  4034c6:	2001      	movs	r0, #1
  4034c8:	4b3b      	ldr	r3, [pc, #236]	; (4035b8 <nm_clkless_wake+0x100>)
  4034ca:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4034cc:	4682      	mov	sl, r0
  4034ce:	b938      	cbnz	r0, 4034e0 <nm_clkless_wake+0x28>
  4034d0:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4034d2:	f04f 0801 	mov.w	r8, #1
  4034d6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4035e0 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4034da:	4d36      	ldr	r5, [pc, #216]	; (4035b4 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4034dc:	4f37      	ldr	r7, [pc, #220]	; (4035bc <nm_clkless_wake+0x104>)
  4034de:	e020      	b.n	403522 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4034e0:	2272      	movs	r2, #114	; 0x72
  4034e2:	4937      	ldr	r1, [pc, #220]	; (4035c0 <nm_clkless_wake+0x108>)
  4034e4:	4837      	ldr	r0, [pc, #220]	; (4035c4 <nm_clkless_wake+0x10c>)
  4034e6:	4c38      	ldr	r4, [pc, #224]	; (4035c8 <nm_clkless_wake+0x110>)
  4034e8:	47a0      	blx	r4
  4034ea:	4838      	ldr	r0, [pc, #224]	; (4035cc <nm_clkless_wake+0x114>)
  4034ec:	47a0      	blx	r4
  4034ee:	4838      	ldr	r0, [pc, #224]	; (4035d0 <nm_clkless_wake+0x118>)
  4034f0:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4034f2:	e009      	b.n	403508 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4034f4:	2296      	movs	r2, #150	; 0x96
  4034f6:	4932      	ldr	r1, [pc, #200]	; (4035c0 <nm_clkless_wake+0x108>)
  4034f8:	4832      	ldr	r0, [pc, #200]	; (4035c4 <nm_clkless_wake+0x10c>)
  4034fa:	4c33      	ldr	r4, [pc, #204]	; (4035c8 <nm_clkless_wake+0x110>)
  4034fc:	47a0      	blx	r4
  4034fe:	4835      	ldr	r0, [pc, #212]	; (4035d4 <nm_clkless_wake+0x11c>)
  403500:	47a0      	blx	r4
  403502:	4833      	ldr	r0, [pc, #204]	; (4035d0 <nm_clkless_wake+0x118>)
  403504:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403506:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403508:	4650      	mov	r0, sl
  40350a:	b003      	add	sp, #12
  40350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  403510:	9901      	ldr	r1, [sp, #4]
  403512:	f041 0102 	orr.w	r1, r1, #2
  403516:	4640      	mov	r0, r8
  403518:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40351a:	9b00      	ldr	r3, [sp, #0]
  40351c:	f013 0f04 	tst.w	r3, #4
  403520:	d1f2      	bne.n	403508 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  403522:	9901      	ldr	r1, [sp, #4]
  403524:	f041 0102 	orr.w	r1, r1, #2
  403528:	4640      	mov	r0, r8
  40352a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40352c:	4640      	mov	r0, r8
  40352e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403530:	4669      	mov	r1, sp
  403532:	4b29      	ldr	r3, [pc, #164]	; (4035d8 <nm_clkless_wake+0x120>)
  403534:	6818      	ldr	r0, [r3, #0]
  403536:	4b20      	ldr	r3, [pc, #128]	; (4035b8 <nm_clkless_wake+0x100>)
  403538:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40353a:	b908      	cbnz	r0, 403540 <nm_clkless_wake+0x88>
  40353c:	9b00      	ldr	r3, [sp, #0]
  40353e:	b9bb      	cbnz	r3, 403570 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  403540:	4e25      	ldr	r6, [pc, #148]	; (4035d8 <nm_clkless_wake+0x120>)
  403542:	230e      	movs	r3, #14
  403544:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  403546:	4640      	mov	r0, r8
  403548:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40354a:	4669      	mov	r1, sp
  40354c:	6830      	ldr	r0, [r6, #0]
  40354e:	4b1a      	ldr	r3, [pc, #104]	; (4035b8 <nm_clkless_wake+0x100>)
  403550:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403552:	b908      	cbnz	r0, 403558 <nm_clkless_wake+0xa0>
  403554:	9b00      	ldr	r3, [sp, #0]
  403556:	b95b      	cbnz	r3, 403570 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403558:	4e1f      	ldr	r6, [pc, #124]	; (4035d8 <nm_clkless_wake+0x120>)
  40355a:	2313      	movs	r3, #19
  40355c:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  40355e:	4640      	mov	r0, r8
  403560:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403562:	4669      	mov	r1, sp
  403564:	6830      	ldr	r0, [r6, #0]
  403566:	4b14      	ldr	r3, [pc, #80]	; (4035b8 <nm_clkless_wake+0x100>)
  403568:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40356a:	4606      	mov	r6, r0
  40356c:	2800      	cmp	r0, #0
  40356e:	d1c1      	bne.n	4034f4 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403570:	4e19      	ldr	r6, [pc, #100]	; (4035d8 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403572:	9b00      	ldr	r3, [sp, #0]
  403574:	f013 0f04 	tst.w	r3, #4
  403578:	d1c6      	bne.n	403508 <nm_clkless_wake+0x50>
  40357a:	3401      	adds	r4, #1
  40357c:	fba7 2304 	umull	r2, r3, r7, r4
  403580:	085b      	lsrs	r3, r3, #1
  403582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403586:	429c      	cmp	r4, r3
  403588:	d1c2      	bne.n	403510 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  40358a:	2002      	movs	r0, #2
  40358c:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40358e:	4669      	mov	r1, sp
  403590:	6830      	ldr	r0, [r6, #0]
  403592:	4b09      	ldr	r3, [pc, #36]	; (4035b8 <nm_clkless_wake+0x100>)
  403594:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  403596:	9b00      	ldr	r3, [sp, #0]
  403598:	f013 0f04 	tst.w	r3, #4
  40359c:	d1e9      	bne.n	403572 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40359e:	22aa      	movs	r2, #170	; 0xaa
  4035a0:	4907      	ldr	r1, [pc, #28]	; (4035c0 <nm_clkless_wake+0x108>)
  4035a2:	4808      	ldr	r0, [pc, #32]	; (4035c4 <nm_clkless_wake+0x10c>)
  4035a4:	f8df b020 	ldr.w	fp, [pc, #32]	; 4035c8 <nm_clkless_wake+0x110>
  4035a8:	47d8      	blx	fp
  4035aa:	480c      	ldr	r0, [pc, #48]	; (4035dc <nm_clkless_wake+0x124>)
  4035ac:	47d8      	blx	fp
  4035ae:	4808      	ldr	r0, [pc, #32]	; (4035d0 <nm_clkless_wake+0x118>)
  4035b0:	47d8      	blx	fp
  4035b2:	e7de      	b.n	403572 <nm_clkless_wake+0xba>
  4035b4:	00402259 	.word	0x00402259
  4035b8:	00403949 	.word	0x00403949
  4035bc:	aaaaaaab 	.word	0xaaaaaaab
  4035c0:	00409c74 	.word	0x00409c74
  4035c4:	00409844 	.word	0x00409844
  4035c8:	00406231 	.word	0x00406231
  4035cc:	00409ce4 	.word	0x00409ce4
  4035d0:	00409870 	.word	0x00409870
  4035d4:	00409d04 	.word	0x00409d04
  4035d8:	20400014 	.word	0x20400014
  4035dc:	00409d24 	.word	0x00409d24
  4035e0:	00403955 	.word	0x00403955

004035e4 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4035e4:	b500      	push	{lr}
  4035e6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4035e8:	a901      	add	r1, sp, #4
  4035ea:	f241 4008 	movw	r0, #5128	; 0x1408
  4035ee:	4b15      	ldr	r3, [pc, #84]	; (403644 <enable_interrupts+0x60>)
  4035f0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035f2:	b9e8      	cbnz	r0, 403630 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4035f4:	9901      	ldr	r1, [sp, #4]
  4035f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4035fa:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4035fc:	f241 4008 	movw	r0, #5128	; 0x1408
  403600:	4b11      	ldr	r3, [pc, #68]	; (403648 <enable_interrupts+0x64>)
  403602:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403604:	b9b8      	cbnz	r0, 403636 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403606:	a901      	add	r1, sp, #4
  403608:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40360c:	4b0d      	ldr	r3, [pc, #52]	; (403644 <enable_interrupts+0x60>)
  40360e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403610:	b9a0      	cbnz	r0, 40363c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  403612:	9901      	ldr	r1, [sp, #4]
  403614:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403618:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40361a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40361e:	4b0a      	ldr	r3, [pc, #40]	; (403648 <enable_interrupts+0x64>)
  403620:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403622:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403624:	bf18      	it	ne
  403626:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40362a:	b003      	add	sp, #12
  40362c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  403630:	f06f 0005 	mvn.w	r0, #5
  403634:	e7f9      	b.n	40362a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403636:	f06f 0005 	mvn.w	r0, #5
  40363a:	e7f6      	b.n	40362a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40363c:	f06f 0005 	mvn.w	r0, #5
  403640:	e7f3      	b.n	40362a <enable_interrupts+0x46>
  403642:	bf00      	nop
  403644:	00403949 	.word	0x00403949
  403648:	00403955 	.word	0x00403955

0040364c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  40364c:	b510      	push	{r4, lr}
  40364e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  403650:	4b25      	ldr	r3, [pc, #148]	; (4036e8 <nmi_get_chipid+0x9c>)
  403652:	681c      	ldr	r4, [r3, #0]
  403654:	b124      	cbz	r4, 403660 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403656:	4b24      	ldr	r3, [pc, #144]	; (4036e8 <nmi_get_chipid+0x9c>)
  403658:	681c      	ldr	r4, [r3, #0]
}
  40365a:	4620      	mov	r0, r4
  40365c:	b002      	add	sp, #8
  40365e:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  403660:	4619      	mov	r1, r3
  403662:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403666:	4b21      	ldr	r3, [pc, #132]	; (4036ec <nmi_get_chipid+0xa0>)
  403668:	4798      	blx	r3
  40366a:	b118      	cbz	r0, 403674 <nmi_get_chipid+0x28>
			chipid = 0;
  40366c:	2200      	movs	r2, #0
  40366e:	4b1e      	ldr	r3, [pc, #120]	; (4036e8 <nmi_get_chipid+0x9c>)
  403670:	601a      	str	r2, [r3, #0]
			return 0;
  403672:	e7f2      	b.n	40365a <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  403674:	a901      	add	r1, sp, #4
  403676:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40367a:	4b1c      	ldr	r3, [pc, #112]	; (4036ec <nmi_get_chipid+0xa0>)
  40367c:	4798      	blx	r3
  40367e:	b118      	cbz	r0, 403688 <nmi_get_chipid+0x3c>
			chipid = 0;
  403680:	2200      	movs	r2, #0
  403682:	4b19      	ldr	r3, [pc, #100]	; (4036e8 <nmi_get_chipid+0x9c>)
  403684:	601a      	str	r2, [r3, #0]
			return 0;
  403686:	e7e8      	b.n	40365a <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  403688:	4b17      	ldr	r3, [pc, #92]	; (4036e8 <nmi_get_chipid+0x9c>)
  40368a:	681b      	ldr	r3, [r3, #0]
  40368c:	4a18      	ldr	r2, [pc, #96]	; (4036f0 <nmi_get_chipid+0xa4>)
  40368e:	4293      	cmp	r3, r2
  403690:	d00d      	beq.n	4036ae <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  403692:	4a18      	ldr	r2, [pc, #96]	; (4036f4 <nmi_get_chipid+0xa8>)
  403694:	4293      	cmp	r3, r2
  403696:	d011      	beq.n	4036bc <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  403698:	4a17      	ldr	r2, [pc, #92]	; (4036f8 <nmi_get_chipid+0xac>)
  40369a:	4293      	cmp	r3, r2
  40369c:	d018      	beq.n	4036d0 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  40369e:	4a12      	ldr	r2, [pc, #72]	; (4036e8 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4036a0:	6813      	ldr	r3, [r2, #0]
  4036a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4036a6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4036aa:	6013      	str	r3, [r2, #0]
  4036ac:	e7d3      	b.n	403656 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4036ae:	9b01      	ldr	r3, [sp, #4]
  4036b0:	2b01      	cmp	r3, #1
  4036b2:	d0f4      	beq.n	40369e <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4036b4:	3201      	adds	r2, #1
  4036b6:	4b0c      	ldr	r3, [pc, #48]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036b8:	601a      	str	r2, [r3, #0]
  4036ba:	e7f0      	b.n	40369e <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4036bc:	9b01      	ldr	r3, [sp, #4]
  4036be:	2b03      	cmp	r3, #3
  4036c0:	d0ed      	beq.n	40369e <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4036c2:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4036c4:	bf0c      	ite	eq
  4036c6:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  4036c8:	4a0c      	ldrne	r2, [pc, #48]	; (4036fc <nmi_get_chipid+0xb0>)
  4036ca:	4b07      	ldr	r3, [pc, #28]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036cc:	601a      	str	r2, [r3, #0]
  4036ce:	e7e6      	b.n	40369e <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4036d0:	4905      	ldr	r1, [pc, #20]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036d2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4036d6:	4b05      	ldr	r3, [pc, #20]	; (4036ec <nmi_get_chipid+0xa0>)
  4036d8:	4798      	blx	r3
  4036da:	2800      	cmp	r0, #0
  4036dc:	d0df      	beq.n	40369e <nmi_get_chipid+0x52>
			chipid = 0;
  4036de:	2200      	movs	r2, #0
  4036e0:	4b01      	ldr	r3, [pc, #4]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036e2:	601a      	str	r2, [r3, #0]
			return 0;
  4036e4:	e7b9      	b.n	40365a <nmi_get_chipid+0xe>
  4036e6:	bf00      	nop
  4036e8:	2040c35c 	.word	0x2040c35c
  4036ec:	00403949 	.word	0x00403949
  4036f0:	001002a0 	.word	0x001002a0
  4036f4:	001002b0 	.word	0x001002b0
  4036f8:	001000f0 	.word	0x001000f0
  4036fc:	001002b2 	.word	0x001002b2

00403700 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403704:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403706:	f241 0514 	movw	r5, #4116	; 0x1014
  40370a:	4c28      	ldr	r4, [pc, #160]	; (4037ac <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40370c:	4e28      	ldr	r6, [pc, #160]	; (4037b0 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40370e:	4628      	mov	r0, r5
  403710:	47a0      	blx	r4
		if (reg & 0x80000000) {
  403712:	2800      	cmp	r0, #0
  403714:	db02      	blt.n	40371c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403716:	2001      	movs	r0, #1
  403718:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40371a:	e7f8      	b.n	40370e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40371c:	4825      	ldr	r0, [pc, #148]	; (4037b4 <wait_for_bootrom+0xb4>)
  40371e:	4b23      	ldr	r3, [pc, #140]	; (4037ac <wait_for_bootrom+0xac>)
  403720:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  403722:	f010 0f01 	tst.w	r0, #1
  403726:	d110      	bne.n	40374a <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403728:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4037b0 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40372c:	4e1f      	ldr	r6, [pc, #124]	; (4037ac <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40372e:	4d22      	ldr	r5, [pc, #136]	; (4037b8 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  403730:	2001      	movs	r0, #1
  403732:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403734:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403738:	47b0      	blx	r6
  40373a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40373c:	462a      	mov	r2, r5
  40373e:	4601      	mov	r1, r0
  403740:	481e      	ldr	r0, [pc, #120]	; (4037bc <wait_for_bootrom+0xbc>)
  403742:	4b1f      	ldr	r3, [pc, #124]	; (4037c0 <wait_for_bootrom+0xc0>)
  403744:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403746:	42ac      	cmp	r4, r5
  403748:	d1f2      	bne.n	403730 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40374a:	2f02      	cmp	r7, #2
  40374c:	d019      	beq.n	403782 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40374e:	2f03      	cmp	r7, #3
  403750:	d022      	beq.n	403798 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  403752:	2f04      	cmp	r7, #4
  403754:	bf14      	ite	ne
  403756:	2400      	movne	r4, #0
  403758:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  40375a:	4b1a      	ldr	r3, [pc, #104]	; (4037c4 <wait_for_bootrom+0xc4>)
  40375c:	4798      	blx	r3
  40375e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403762:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  403766:	bf0c      	ite	eq
  403768:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40376c:	4620      	movne	r0, r4
  40376e:	4b16      	ldr	r3, [pc, #88]	; (4037c8 <wait_for_bootrom+0xc8>)
  403770:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  403772:	4916      	ldr	r1, [pc, #88]	; (4037cc <wait_for_bootrom+0xcc>)
  403774:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403778:	4b15      	ldr	r3, [pc, #84]	; (4037d0 <wait_for_bootrom+0xd0>)
  40377a:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40377c:	2000      	movs	r0, #0
  40377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403782:	4914      	ldr	r1, [pc, #80]	; (4037d4 <wait_for_bootrom+0xd4>)
  403784:	4814      	ldr	r0, [pc, #80]	; (4037d8 <wait_for_bootrom+0xd8>)
  403786:	4c12      	ldr	r4, [pc, #72]	; (4037d0 <wait_for_bootrom+0xd0>)
  403788:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40378a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40378e:	f241 008c 	movw	r0, #4236	; 0x108c
  403792:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403794:	2400      	movs	r4, #0
  403796:	e7e0      	b.n	40375a <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403798:	490e      	ldr	r1, [pc, #56]	; (4037d4 <wait_for_bootrom+0xd4>)
  40379a:	480f      	ldr	r0, [pc, #60]	; (4037d8 <wait_for_bootrom+0xd8>)
  40379c:	4c0c      	ldr	r4, [pc, #48]	; (4037d0 <wait_for_bootrom+0xd0>)
  40379e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4037a0:	2100      	movs	r1, #0
  4037a2:	f241 008c 	movw	r0, #4236	; 0x108c
  4037a6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4037a8:	2400      	movs	r4, #0
  4037aa:	e7d6      	b.n	40375a <wait_for_bootrom+0x5a>
  4037ac:	0040393d 	.word	0x0040393d
  4037b0:	00402259 	.word	0x00402259
  4037b4:	000207bc 	.word	0x000207bc
  4037b8:	10add09e 	.word	0x10add09e
  4037bc:	00409d48 	.word	0x00409d48
  4037c0:	00406231 	.word	0x00406231
  4037c4:	0040364d 	.word	0x0040364d
  4037c8:	0040347d 	.word	0x0040347d
  4037cc:	ef522f61 	.word	0xef522f61
  4037d0:	00403955 	.word	0x00403955
  4037d4:	3c1cd57d 	.word	0x3c1cd57d
  4037d8:	000207ac 	.word	0x000207ac

004037dc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037de:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4037e0:	f241 038c 	movw	r3, #4236	; 0x108c
  4037e4:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4037e6:	4b18      	ldr	r3, [pc, #96]	; (403848 <wait_for_firmware_start+0x6c>)
  4037e8:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4037ea:	3802      	subs	r0, #2
  4037ec:	b2c0      	uxtb	r0, r0
  4037ee:	2801      	cmp	r0, #1
  4037f0:	d911      	bls.n	403816 <wait_for_firmware_start+0x3a>
{
  4037f2:	f04f 34ff 	mov.w	r4, #4294967295
  4037f6:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4037f8:	2702      	movs	r7, #2
  4037fa:	4e14      	ldr	r6, [pc, #80]	; (40384c <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4037fc:	4d14      	ldr	r5, [pc, #80]	; (403850 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  4037fe:	9b00      	ldr	r3, [sp, #0]
  403800:	4298      	cmp	r0, r3
  403802:	d012      	beq.n	40382a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403804:	4638      	mov	r0, r7
  403806:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403808:	9801      	ldr	r0, [sp, #4]
  40380a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40380c:	3c01      	subs	r4, #1
  40380e:	d1f6      	bne.n	4037fe <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403810:	f06f 0004 	mvn.w	r0, #4
  403814:	e00e      	b.n	403834 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403816:	4b0f      	ldr	r3, [pc, #60]	; (403854 <wait_for_firmware_start+0x78>)
  403818:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40381a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40381e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  403822:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403826:	9300      	str	r3, [sp, #0]
  403828:	e7e3      	b.n	4037f2 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40382a:	9a00      	ldr	r2, [sp, #0]
  40382c:	4b06      	ldr	r3, [pc, #24]	; (403848 <wait_for_firmware_start+0x6c>)
  40382e:	429a      	cmp	r2, r3
  403830:	d002      	beq.n	403838 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  403832:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403834:	b003      	add	sp, #12
  403836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403838:	2100      	movs	r1, #0
  40383a:	f241 008c 	movw	r0, #4236	; 0x108c
  40383e:	4b06      	ldr	r3, [pc, #24]	; (403858 <wait_for_firmware_start+0x7c>)
  403840:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  403842:	2000      	movs	r0, #0
  403844:	e7f6      	b.n	403834 <wait_for_firmware_start+0x58>
  403846:	bf00      	nop
  403848:	02532636 	.word	0x02532636
  40384c:	00402259 	.word	0x00402259
  403850:	0040393d 	.word	0x0040393d
  403854:	000207ac 	.word	0x000207ac
  403858:	00403955 	.word	0x00403955

0040385c <chip_deinit>:

sint8 chip_deinit(void)
{
  40385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40385e:	b083      	sub	sp, #12
	uint32 reg = 0;
  403860:	a902      	add	r1, sp, #8
  403862:	2300      	movs	r3, #0
  403864:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403868:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40386c:	4b24      	ldr	r3, [pc, #144]	; (403900 <chip_deinit+0xa4>)
  40386e:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  403870:	bb20      	cbnz	r0, 4038bc <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  403872:	9901      	ldr	r1, [sp, #4]
  403874:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403878:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40387a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40387e:	4b21      	ldr	r3, [pc, #132]	; (403904 <chip_deinit+0xa8>)
  403880:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  403882:	4605      	mov	r5, r0
  403884:	bb28      	cbnz	r0, 4038d2 <chip_deinit+0x76>
  403886:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403888:	4e1d      	ldr	r6, [pc, #116]	; (403900 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40388a:	4f1e      	ldr	r7, [pc, #120]	; (403904 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40388c:	a901      	add	r1, sp, #4
  40388e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403892:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  403894:	4605      	mov	r5, r0
  403896:	bb38      	cbnz	r0, 4038e8 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  403898:	9901      	ldr	r1, [sp, #4]
  40389a:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40389e:	d00a      	beq.n	4038b6 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4038a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4038a4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4038a6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4038aa:	47b8      	blx	r7
  4038ac:	4605      	mov	r5, r0
  4038ae:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4038b0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4038b4:	d1ea      	bne.n	40388c <chip_deinit+0x30>

	return ret;
}
  4038b6:	4628      	mov	r0, r5
  4038b8:	b003      	add	sp, #12
  4038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4038bc:	f240 2231 	movw	r2, #561	; 0x231
  4038c0:	4911      	ldr	r1, [pc, #68]	; (403908 <chip_deinit+0xac>)
  4038c2:	4812      	ldr	r0, [pc, #72]	; (40390c <chip_deinit+0xb0>)
  4038c4:	4c12      	ldr	r4, [pc, #72]	; (403910 <chip_deinit+0xb4>)
  4038c6:	47a0      	blx	r4
  4038c8:	4812      	ldr	r0, [pc, #72]	; (403914 <chip_deinit+0xb8>)
  4038ca:	47a0      	blx	r4
  4038cc:	4812      	ldr	r0, [pc, #72]	; (403918 <chip_deinit+0xbc>)
  4038ce:	47a0      	blx	r4
  4038d0:	e7cf      	b.n	403872 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  4038d2:	f240 2237 	movw	r2, #567	; 0x237
  4038d6:	490c      	ldr	r1, [pc, #48]	; (403908 <chip_deinit+0xac>)
  4038d8:	480c      	ldr	r0, [pc, #48]	; (40390c <chip_deinit+0xb0>)
  4038da:	4c0d      	ldr	r4, [pc, #52]	; (403910 <chip_deinit+0xb4>)
  4038dc:	47a0      	blx	r4
  4038de:	480f      	ldr	r0, [pc, #60]	; (40391c <chip_deinit+0xc0>)
  4038e0:	47a0      	blx	r4
  4038e2:	480d      	ldr	r0, [pc, #52]	; (403918 <chip_deinit+0xbc>)
  4038e4:	47a0      	blx	r4
		return ret;
  4038e6:	e7e6      	b.n	4038b6 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  4038e8:	f240 223e 	movw	r2, #574	; 0x23e
  4038ec:	4906      	ldr	r1, [pc, #24]	; (403908 <chip_deinit+0xac>)
  4038ee:	4807      	ldr	r0, [pc, #28]	; (40390c <chip_deinit+0xb0>)
  4038f0:	4c07      	ldr	r4, [pc, #28]	; (403910 <chip_deinit+0xb4>)
  4038f2:	47a0      	blx	r4
  4038f4:	480a      	ldr	r0, [pc, #40]	; (403920 <chip_deinit+0xc4>)
  4038f6:	47a0      	blx	r4
  4038f8:	4807      	ldr	r0, [pc, #28]	; (403918 <chip_deinit+0xbc>)
  4038fa:	47a0      	blx	r4
			return ret;
  4038fc:	e7db      	b.n	4038b6 <chip_deinit+0x5a>
  4038fe:	bf00      	nop
  403900:	00403949 	.word	0x00403949
  403904:	00403955 	.word	0x00403955
  403908:	00409c84 	.word	0x00409c84
  40390c:	00409844 	.word	0x00409844
  403910:	00406231 	.word	0x00406231
  403914:	00409c90 	.word	0x00409c90
  403918:	00409870 	.word	0x00409870
  40391c:	00409cac 	.word	0x00409cac
  403920:	00409cc8 	.word	0x00409cc8

00403924 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403924:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403926:	4b01      	ldr	r3, [pc, #4]	; (40392c <nm_bus_iface_init+0x8>)
  403928:	4798      	blx	r3

	return ret;
}
  40392a:	bd08      	pop	{r3, pc}
  40392c:	004023dd 	.word	0x004023dd

00403930 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  403930:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  403932:	4b01      	ldr	r3, [pc, #4]	; (403938 <nm_bus_iface_deinit+0x8>)
  403934:	4798      	blx	r3

	return ret;
}
  403936:	bd08      	pop	{r3, pc}
  403938:	004025cd 	.word	0x004025cd

0040393c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  40393c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40393e:	4b01      	ldr	r3, [pc, #4]	; (403944 <nm_read_reg+0x8>)
  403940:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  403942:	bd08      	pop	{r3, pc}
  403944:	00404191 	.word	0x00404191

00403948 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403948:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  40394a:	4b01      	ldr	r3, [pc, #4]	; (403950 <nm_read_reg_with_ret+0x8>)
  40394c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40394e:	bd08      	pop	{r3, pc}
  403950:	004041a9 	.word	0x004041a9

00403954 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403954:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403956:	4b01      	ldr	r3, [pc, #4]	; (40395c <nm_write_reg+0x8>)
  403958:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40395a:	bd08      	pop	{r3, pc}
  40395c:	004041c1 	.word	0x004041c1

00403960 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403964:	4607      	mov	r7, r0
  403966:	4689      	mov	r9, r1
  403968:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40396a:	4b12      	ldr	r3, [pc, #72]	; (4039b4 <nm_read_block+0x54>)
  40396c:	f8b3 8000 	ldrh.w	r8, [r3]
  403970:	f1a8 0808 	sub.w	r8, r8, #8
  403974:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403978:	4542      	cmp	r2, r8
  40397a:	d919      	bls.n	4039b0 <nm_read_block+0x50>
  40397c:	4644      	mov	r4, r8
  40397e:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403980:	f8df a034 	ldr.w	sl, [pc, #52]	; 4039b8 <nm_read_block+0x58>
  403984:	4642      	mov	r2, r8
  403986:	eb09 0106 	add.w	r1, r9, r6
  40398a:	4638      	mov	r0, r7
  40398c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40398e:	4603      	mov	r3, r0
  403990:	b958      	cbnz	r0, 4039aa <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403992:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403994:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403996:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403998:	42a5      	cmp	r5, r4
  40399a:	d8f3      	bhi.n	403984 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40399c:	b2aa      	uxth	r2, r5
  40399e:	eb09 0106 	add.w	r1, r9, r6
  4039a2:	4638      	mov	r0, r7
  4039a4:	4b04      	ldr	r3, [pc, #16]	; (4039b8 <nm_read_block+0x58>)
  4039a6:	4798      	blx	r3
  4039a8:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4039aa:	4618      	mov	r0, r3
  4039ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4039b0:	2600      	movs	r6, #0
  4039b2:	e7f3      	b.n	40399c <nm_read_block+0x3c>
  4039b4:	20400010 	.word	0x20400010
  4039b8:	004042ed 	.word	0x004042ed

004039bc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039c0:	4607      	mov	r7, r0
  4039c2:	4689      	mov	r9, r1
  4039c4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4039c6:	4b12      	ldr	r3, [pc, #72]	; (403a10 <nm_write_block+0x54>)
  4039c8:	f8b3 8000 	ldrh.w	r8, [r3]
  4039cc:	f1a8 0808 	sub.w	r8, r8, #8
  4039d0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4039d4:	4542      	cmp	r2, r8
  4039d6:	d919      	bls.n	403a0c <nm_write_block+0x50>
  4039d8:	4644      	mov	r4, r8
  4039da:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4039dc:	f8df a034 	ldr.w	sl, [pc, #52]	; 403a14 <nm_write_block+0x58>
  4039e0:	4642      	mov	r2, r8
  4039e2:	eb09 0106 	add.w	r1, r9, r6
  4039e6:	4638      	mov	r0, r7
  4039e8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4039ea:	4603      	mov	r3, r0
  4039ec:	b958      	cbnz	r0, 403a06 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4039ee:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4039f0:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4039f2:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4039f4:	42a5      	cmp	r5, r4
  4039f6:	d8f3      	bhi.n	4039e0 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4039f8:	b2aa      	uxth	r2, r5
  4039fa:	eb09 0106 	add.w	r1, r9, r6
  4039fe:	4638      	mov	r0, r7
  403a00:	4b04      	ldr	r3, [pc, #16]	; (403a14 <nm_write_block+0x58>)
  403a02:	4798      	blx	r3
  403a04:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403a06:	4618      	mov	r0, r3
  403a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403a0c:	2600      	movs	r6, #0
  403a0e:	e7f3      	b.n	4039f8 <nm_write_block+0x3c>
  403a10:	20400010 	.word	0x20400010
  403a14:	004043b5 	.word	0x004043b5

00403a18 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403a18:	b530      	push	{r4, r5, lr}
  403a1a:	b083      	sub	sp, #12
  403a1c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  403a1e:	a902      	add	r1, sp, #8
  403a20:	2300      	movs	r3, #0
  403a22:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403a26:	4824      	ldr	r0, [pc, #144]	; (403ab8 <nm_get_firmware_info+0xa0>)
  403a28:	4b24      	ldr	r3, [pc, #144]	; (403abc <nm_get_firmware_info+0xa4>)
  403a2a:	4798      	blx	r3
  403a2c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  403a2e:	9a01      	ldr	r2, [sp, #4]
  403a30:	4b23      	ldr	r3, [pc, #140]	; (403ac0 <nm_get_firmware_info+0xa8>)
  403a32:	429a      	cmp	r2, r3
  403a34:	d039      	beq.n	403aaa <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403a36:	9b01      	ldr	r3, [sp, #4]
  403a38:	0c1a      	lsrs	r2, r3, #16
  403a3a:	b291      	uxth	r1, r2
  403a3c:	0a08      	lsrs	r0, r1, #8
  403a3e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  403a40:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403a44:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403a46:	f002 020f 	and.w	r2, r2, #15
  403a4a:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403a4c:	b29a      	uxth	r2, r3
  403a4e:	0a11      	lsrs	r1, r2, #8
  403a50:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  403a52:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403a56:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403a58:	f003 030f 	and.w	r3, r3, #15
  403a5c:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  403a5e:	4b19      	ldr	r3, [pc, #100]	; (403ac4 <nm_get_firmware_info+0xac>)
  403a60:	4798      	blx	r3
  403a62:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403a64:	7922      	ldrb	r2, [r4, #4]
  403a66:	79a3      	ldrb	r3, [r4, #6]
  403a68:	f003 030f 	and.w	r3, r3, #15
  403a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403a70:	7962      	ldrb	r2, [r4, #5]
  403a72:	0112      	lsls	r2, r2, #4
  403a74:	b2d2      	uxtb	r2, r2
  403a76:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403a78:	79e1      	ldrb	r1, [r4, #7]
  403a7a:	7a62      	ldrb	r2, [r4, #9]
  403a7c:	f002 020f 	and.w	r2, r2, #15
  403a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403a84:	7a21      	ldrb	r1, [r4, #8]
  403a86:	0109      	lsls	r1, r1, #4
  403a88:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  403a8a:	430a      	orrs	r2, r1
  403a8c:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a90:	428a      	cmp	r2, r1
  403a92:	bf88      	it	hi
  403a94:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403a98:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a9c:	4293      	cmp	r3, r2
	}
	return ret;
}
  403a9e:	bf8c      	ite	hi
  403aa0:	4628      	movhi	r0, r5
  403aa2:	f06f 000c 	mvnls.w	r0, #12
  403aa6:	b003      	add	sp, #12
  403aa8:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403aaa:	a901      	add	r1, sp, #4
  403aac:	f241 0048 	movw	r0, #4168	; 0x1048
  403ab0:	4b02      	ldr	r3, [pc, #8]	; (403abc <nm_get_firmware_info+0xa4>)
  403ab2:	4798      	blx	r3
  403ab4:	4605      	mov	r5, r0
  403ab6:	e7be      	b.n	403a36 <nm_get_firmware_info+0x1e>
  403ab8:	000207ac 	.word	0x000207ac
  403abc:	00403949 	.word	0x00403949
  403ac0:	d75dc1c3 	.word	0xd75dc1c3
  403ac4:	0040364d 	.word	0x0040364d

00403ac8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403ac8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403aca:	2800      	cmp	r0, #0
  403acc:	d037      	beq.n	403b3e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  403ace:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403ad0:	1e63      	subs	r3, r4, #1
  403ad2:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403ad4:	2b04      	cmp	r3, #4
  403ad6:	bf28      	it	cs
  403ad8:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403ada:	2000      	movs	r0, #0
  403adc:	4b1e      	ldr	r3, [pc, #120]	; (403b58 <nm_drv_init+0x90>)
  403ade:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ae0:	4605      	mov	r5, r0
  403ae2:	2800      	cmp	r0, #0
  403ae4:	d12d      	bne.n	403b42 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403ae6:	481d      	ldr	r0, [pc, #116]	; (403b5c <nm_drv_init+0x94>)
  403ae8:	4d1d      	ldr	r5, [pc, #116]	; (403b60 <nm_drv_init+0x98>)
  403aea:	47a8      	blx	r5
  403aec:	4b1d      	ldr	r3, [pc, #116]	; (403b64 <nm_drv_init+0x9c>)
  403aee:	4798      	blx	r3
  403af0:	4601      	mov	r1, r0
  403af2:	481d      	ldr	r0, [pc, #116]	; (403b68 <nm_drv_init+0xa0>)
  403af4:	47a8      	blx	r5
  403af6:	481d      	ldr	r0, [pc, #116]	; (403b6c <nm_drv_init+0xa4>)
  403af8:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403afa:	4b1d      	ldr	r3, [pc, #116]	; (403b70 <nm_drv_init+0xa8>)
  403afc:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403afe:	4620      	mov	r0, r4
  403b00:	4b1c      	ldr	r3, [pc, #112]	; (403b74 <nm_drv_init+0xac>)
  403b02:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b04:	4605      	mov	r5, r0
  403b06:	b9b0      	cbnz	r0, 403b36 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403b08:	4620      	mov	r0, r4
  403b0a:	4b1b      	ldr	r3, [pc, #108]	; (403b78 <nm_drv_init+0xb0>)
  403b0c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b0e:	4605      	mov	r5, r0
  403b10:	b988      	cbnz	r0, 403b36 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403b12:	3c02      	subs	r4, #2
  403b14:	b2e4      	uxtb	r4, r4
  403b16:	2c01      	cmp	r4, #1
  403b18:	d90f      	bls.n	403b3a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403b1a:	4b18      	ldr	r3, [pc, #96]	; (403b7c <nm_drv_init+0xb4>)
  403b1c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b1e:	4605      	mov	r5, r0
  403b20:	b158      	cbz	r0, 403b3a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403b22:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403b26:	4916      	ldr	r1, [pc, #88]	; (403b80 <nm_drv_init+0xb8>)
  403b28:	4816      	ldr	r0, [pc, #88]	; (403b84 <nm_drv_init+0xbc>)
  403b2a:	4c0d      	ldr	r4, [pc, #52]	; (403b60 <nm_drv_init+0x98>)
  403b2c:	47a0      	blx	r4
  403b2e:	4816      	ldr	r0, [pc, #88]	; (403b88 <nm_drv_init+0xc0>)
  403b30:	47a0      	blx	r4
  403b32:	480e      	ldr	r0, [pc, #56]	; (403b6c <nm_drv_init+0xa4>)
  403b34:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403b36:	4b15      	ldr	r3, [pc, #84]	; (403b8c <nm_drv_init+0xc4>)
  403b38:	4798      	blx	r3
ERR1:
	return ret;
}
  403b3a:	4628      	mov	r0, r5
  403b3c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403b3e:	2401      	movs	r4, #1
  403b40:	e7cb      	b.n	403ada <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  403b42:	f44f 7292 	mov.w	r2, #292	; 0x124
  403b46:	490e      	ldr	r1, [pc, #56]	; (403b80 <nm_drv_init+0xb8>)
  403b48:	480e      	ldr	r0, [pc, #56]	; (403b84 <nm_drv_init+0xbc>)
  403b4a:	4c05      	ldr	r4, [pc, #20]	; (403b60 <nm_drv_init+0x98>)
  403b4c:	47a0      	blx	r4
  403b4e:	4810      	ldr	r0, [pc, #64]	; (403b90 <nm_drv_init+0xc8>)
  403b50:	47a0      	blx	r4
  403b52:	4806      	ldr	r0, [pc, #24]	; (403b6c <nm_drv_init+0xa4>)
  403b54:	47a0      	blx	r4
		goto ERR1;
  403b56:	e7f0      	b.n	403b3a <nm_drv_init+0x72>
  403b58:	00403925 	.word	0x00403925
  403b5c:	00409b18 	.word	0x00409b18
  403b60:	00406231 	.word	0x00406231
  403b64:	0040364d 	.word	0x0040364d
  403b68:	00409e10 	.word	0x00409e10
  403b6c:	00409870 	.word	0x00409870
  403b70:	004041d9 	.word	0x004041d9
  403b74:	00403701 	.word	0x00403701
  403b78:	004037dd 	.word	0x004037dd
  403b7c:	004035e5 	.word	0x004035e5
  403b80:	00409d58 	.word	0x00409d58
  403b84:	00409844 	.word	0x00409844
  403b88:	00409dd4 	.word	0x00409dd4
  403b8c:	00403931 	.word	0x00403931
  403b90:	00409df4 	.word	0x00409df4

00403b94 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403b94:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403b96:	4b19      	ldr	r3, [pc, #100]	; (403bfc <nm_drv_deinit+0x68>)
  403b98:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b9a:	b958      	cbnz	r0, 403bb4 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403b9c:	2000      	movs	r0, #0
  403b9e:	4b18      	ldr	r3, [pc, #96]	; (403c00 <nm_drv_deinit+0x6c>)
  403ba0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ba2:	4604      	mov	r4, r0
  403ba4:	b998      	cbnz	r0, 403bce <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403ba6:	4b17      	ldr	r3, [pc, #92]	; (403c04 <nm_drv_deinit+0x70>)
  403ba8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403baa:	4604      	mov	r4, r0
  403bac:	b9d0      	cbnz	r0, 403be4 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403bae:	4b16      	ldr	r3, [pc, #88]	; (403c08 <nm_drv_deinit+0x74>)
  403bb0:	4798      	blx	r3
  403bb2:	e00a      	b.n	403bca <nm_drv_deinit+0x36>
  403bb4:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403bb6:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403bba:	4914      	ldr	r1, [pc, #80]	; (403c0c <nm_drv_deinit+0x78>)
  403bbc:	4814      	ldr	r0, [pc, #80]	; (403c10 <nm_drv_deinit+0x7c>)
  403bbe:	4d15      	ldr	r5, [pc, #84]	; (403c14 <nm_drv_deinit+0x80>)
  403bc0:	47a8      	blx	r5
  403bc2:	4815      	ldr	r0, [pc, #84]	; (403c18 <nm_drv_deinit+0x84>)
  403bc4:	47a8      	blx	r5
  403bc6:	4815      	ldr	r0, [pc, #84]	; (403c1c <nm_drv_deinit+0x88>)
  403bc8:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403bca:	4620      	mov	r0, r4
  403bcc:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403bce:	f240 127b 	movw	r2, #379	; 0x17b
  403bd2:	490e      	ldr	r1, [pc, #56]	; (403c0c <nm_drv_deinit+0x78>)
  403bd4:	480e      	ldr	r0, [pc, #56]	; (403c10 <nm_drv_deinit+0x7c>)
  403bd6:	4d0f      	ldr	r5, [pc, #60]	; (403c14 <nm_drv_deinit+0x80>)
  403bd8:	47a8      	blx	r5
  403bda:	4811      	ldr	r0, [pc, #68]	; (403c20 <nm_drv_deinit+0x8c>)
  403bdc:	47a8      	blx	r5
  403bde:	480f      	ldr	r0, [pc, #60]	; (403c1c <nm_drv_deinit+0x88>)
  403be0:	47a8      	blx	r5
		goto ERR1;
  403be2:	e7f2      	b.n	403bca <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403be4:	f240 1281 	movw	r2, #385	; 0x181
  403be8:	4908      	ldr	r1, [pc, #32]	; (403c0c <nm_drv_deinit+0x78>)
  403bea:	4809      	ldr	r0, [pc, #36]	; (403c10 <nm_drv_deinit+0x7c>)
  403bec:	4d09      	ldr	r5, [pc, #36]	; (403c14 <nm_drv_deinit+0x80>)
  403bee:	47a8      	blx	r5
  403bf0:	480c      	ldr	r0, [pc, #48]	; (403c24 <nm_drv_deinit+0x90>)
  403bf2:	47a8      	blx	r5
  403bf4:	4809      	ldr	r0, [pc, #36]	; (403c1c <nm_drv_deinit+0x88>)
  403bf6:	47a8      	blx	r5
		goto ERR1;
  403bf8:	e7e7      	b.n	403bca <nm_drv_deinit+0x36>
  403bfa:	bf00      	nop
  403bfc:	0040385d 	.word	0x0040385d
  403c00:	00404c39 	.word	0x00404c39
  403c04:	00403931 	.word	0x00403931
  403c08:	00404185 	.word	0x00404185
  403c0c:	00409d64 	.word	0x00409d64
  403c10:	00409844 	.word	0x00409844
  403c14:	00406231 	.word	0x00406231
  403c18:	00409d74 	.word	0x00409d74
  403c1c:	00409870 	.word	0x00409870
  403c20:	00409d94 	.word	0x00409d94
  403c24:	00409db8 	.word	0x00409db8

00403c28 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403c28:	b500      	push	{lr}
  403c2a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403c2c:	2300      	movs	r3, #0
  403c2e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403c30:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403c32:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403c36:	a901      	add	r1, sp, #4
  403c38:	2003      	movs	r0, #3
  403c3a:	4b02      	ldr	r3, [pc, #8]	; (403c44 <nmi_spi_read+0x1c>)
  403c3c:	4798      	blx	r3
}
  403c3e:	b005      	add	sp, #20
  403c40:	f85d fb04 	ldr.w	pc, [sp], #4
  403c44:	004024f9 	.word	0x004024f9

00403c48 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c4c:	b082      	sub	sp, #8
  403c4e:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  403c50:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403c54:	b2db      	uxtb	r3, r3
  403c56:	2b01      	cmp	r3, #1
  403c58:	d927      	bls.n	403caa <spi_cmd_rsp+0x62>
  403c5a:	28cf      	cmp	r0, #207	; 0xcf
  403c5c:	d025      	beq.n	403caa <spi_cmd_rsp+0x62>
{
  403c5e:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c60:	f04f 0801 	mov.w	r8, #1
  403c64:	4f23      	ldr	r7, [pc, #140]	; (403cf4 <spi_cmd_rsp+0xac>)
  403c66:	4641      	mov	r1, r8
  403c68:	f10d 0007 	add.w	r0, sp, #7
  403c6c:	47b8      	blx	r7
  403c6e:	4606      	mov	r6, r0
  403c70:	bb20      	cbnz	r0, 403cbc <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c76:	42ab      	cmp	r3, r5
  403c78:	d02c      	beq.n	403cd4 <spi_cmd_rsp+0x8c>
  403c7a:	1e63      	subs	r3, r4, #1
  403c7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c80:	d1f1      	bne.n	403c66 <spi_cmd_rsp+0x1e>
  403c82:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c84:	2701      	movs	r7, #1
  403c86:	4d1b      	ldr	r5, [pc, #108]	; (403cf4 <spi_cmd_rsp+0xac>)
  403c88:	4639      	mov	r1, r7
  403c8a:	f10d 0007 	add.w	r0, sp, #7
  403c8e:	47a8      	blx	r5
  403c90:	bb10      	cbnz	r0, 403cd8 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c96:	b353      	cbz	r3, 403cee <spi_cmd_rsp+0xa6>
  403c98:	1e63      	subs	r3, r4, #1
  403c9a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c9e:	d1f3      	bne.n	403c88 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  403ca0:	2601      	movs	r6, #1

_fail_:

	return result;
}
  403ca2:	4630      	mov	r0, r6
  403ca4:	b002      	add	sp, #8
  403ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403caa:	2101      	movs	r1, #1
  403cac:	f10d 0007 	add.w	r0, sp, #7
  403cb0:	4b10      	ldr	r3, [pc, #64]	; (403cf4 <spi_cmd_rsp+0xac>)
  403cb2:	4798      	blx	r3
  403cb4:	2800      	cmp	r0, #0
  403cb6:	d0d2      	beq.n	403c5e <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403cb8:	2600      	movs	r6, #0
  403cba:	e7f2      	b.n	403ca2 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403cbc:	f240 1227 	movw	r2, #295	; 0x127
  403cc0:	490d      	ldr	r1, [pc, #52]	; (403cf8 <spi_cmd_rsp+0xb0>)
  403cc2:	480e      	ldr	r0, [pc, #56]	; (403cfc <spi_cmd_rsp+0xb4>)
  403cc4:	4c0e      	ldr	r4, [pc, #56]	; (403d00 <spi_cmd_rsp+0xb8>)
  403cc6:	47a0      	blx	r4
  403cc8:	480e      	ldr	r0, [pc, #56]	; (403d04 <spi_cmd_rsp+0xbc>)
  403cca:	47a0      	blx	r4
  403ccc:	480e      	ldr	r0, [pc, #56]	; (403d08 <spi_cmd_rsp+0xc0>)
  403cce:	47a0      	blx	r4
			result = N_FAIL;
  403cd0:	2600      	movs	r6, #0
			goto _fail_;
  403cd2:	e7e6      	b.n	403ca2 <spi_cmd_rsp+0x5a>
  403cd4:	240b      	movs	r4, #11
  403cd6:	e7d5      	b.n	403c84 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403cd8:	f240 1235 	movw	r2, #309	; 0x135
  403cdc:	4906      	ldr	r1, [pc, #24]	; (403cf8 <spi_cmd_rsp+0xb0>)
  403cde:	4807      	ldr	r0, [pc, #28]	; (403cfc <spi_cmd_rsp+0xb4>)
  403ce0:	4c07      	ldr	r4, [pc, #28]	; (403d00 <spi_cmd_rsp+0xb8>)
  403ce2:	47a0      	blx	r4
  403ce4:	4807      	ldr	r0, [pc, #28]	; (403d04 <spi_cmd_rsp+0xbc>)
  403ce6:	47a0      	blx	r4
  403ce8:	4807      	ldr	r0, [pc, #28]	; (403d08 <spi_cmd_rsp+0xc0>)
  403cea:	47a0      	blx	r4
			goto _fail_;
  403cec:	e7d9      	b.n	403ca2 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  403cee:	2601      	movs	r6, #1
  403cf0:	e7d7      	b.n	403ca2 <spi_cmd_rsp+0x5a>
  403cf2:	bf00      	nop
  403cf4:	00403c29 	.word	0x00403c29
  403cf8:	00409e28 	.word	0x00409e28
  403cfc:	00409844 	.word	0x00409844
  403d00:	00406231 	.word	0x00406231
  403d04:	0040a268 	.word	0x0040a268
  403d08:	00409870 	.word	0x00409870

00403d0c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d10:	b085      	sub	sp, #20
  403d12:	4683      	mov	fp, r0
  403d14:	468a      	mov	sl, r1
  403d16:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403d18:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d1c:	4d37      	ldr	r5, [pc, #220]	; (403dfc <spi_data_read+0xf0>)
  403d1e:	e027      	b.n	403d70 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403d20:	f240 1257 	movw	r2, #343	; 0x157
  403d24:	4936      	ldr	r1, [pc, #216]	; (403e00 <spi_data_read+0xf4>)
  403d26:	4837      	ldr	r0, [pc, #220]	; (403e04 <spi_data_read+0xf8>)
  403d28:	4c37      	ldr	r4, [pc, #220]	; (403e08 <spi_data_read+0xfc>)
  403d2a:	47a0      	blx	r4
  403d2c:	4837      	ldr	r0, [pc, #220]	; (403e0c <spi_data_read+0x100>)
  403d2e:	47a0      	blx	r4
  403d30:	4837      	ldr	r0, [pc, #220]	; (403e10 <spi_data_read+0x104>)
  403d32:	47a0      	blx	r4
  403d34:	2300      	movs	r3, #0
  403d36:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403d38:	9801      	ldr	r0, [sp, #4]
  403d3a:	b005      	add	sp, #20
  403d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  403d40:	2c00      	cmp	r4, #0
  403d42:	dd2e      	ble.n	403da2 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403d44:	4641      	mov	r1, r8
  403d46:	eb0b 0009 	add.w	r0, fp, r9
  403d4a:	47a8      	blx	r5
  403d4c:	4604      	mov	r4, r0
  403d4e:	2800      	cmp	r0, #0
  403d50:	d134      	bne.n	403dbc <spi_data_read+0xb0>
		if(!clockless)
  403d52:	b91f      	cbnz	r7, 403d5c <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403d54:	4b2f      	ldr	r3, [pc, #188]	; (403e14 <spi_data_read+0x108>)
  403d56:	781b      	ldrb	r3, [r3, #0]
  403d58:	2b00      	cmp	r3, #0
  403d5a:	d03a      	beq.n	403dd2 <spi_data_read+0xc6>
		ix += nbytes;
  403d5c:	44c1      	add	r9, r8
  403d5e:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  403d62:	ebaa 0a08 	sub.w	sl, sl, r8
  403d66:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403d6a:	f1ba 0f00 	cmp.w	sl, #0
  403d6e:	d041      	beq.n	403df4 <spi_data_read+0xe8>
  403d70:	46d0      	mov	r8, sl
  403d72:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403d76:	bf28      	it	cs
  403d78:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403d7c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d7e:	2601      	movs	r6, #1
  403d80:	4631      	mov	r1, r6
  403d82:	f10d 000b 	add.w	r0, sp, #11
  403d86:	47a8      	blx	r5
  403d88:	9001      	str	r0, [sp, #4]
  403d8a:	2800      	cmp	r0, #0
  403d8c:	d1c8      	bne.n	403d20 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  403d8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403d92:	091b      	lsrs	r3, r3, #4
  403d94:	2b0f      	cmp	r3, #15
  403d96:	d0d3      	beq.n	403d40 <spi_data_read+0x34>
  403d98:	3c01      	subs	r4, #1
  403d9a:	b224      	sxth	r4, r4
		} while (retry--);
  403d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
  403da0:	d1ee      	bne.n	403d80 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403da2:	f240 1263 	movw	r2, #355	; 0x163
  403da6:	4916      	ldr	r1, [pc, #88]	; (403e00 <spi_data_read+0xf4>)
  403da8:	4816      	ldr	r0, [pc, #88]	; (403e04 <spi_data_read+0xf8>)
  403daa:	4c17      	ldr	r4, [pc, #92]	; (403e08 <spi_data_read+0xfc>)
  403dac:	47a0      	blx	r4
  403dae:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403db2:	4819      	ldr	r0, [pc, #100]	; (403e18 <spi_data_read+0x10c>)
  403db4:	47a0      	blx	r4
  403db6:	4816      	ldr	r0, [pc, #88]	; (403e10 <spi_data_read+0x104>)
  403db8:	47a0      	blx	r4
			break;
  403dba:	e7bd      	b.n	403d38 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403dbc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403dc0:	490f      	ldr	r1, [pc, #60]	; (403e00 <spi_data_read+0xf4>)
  403dc2:	4810      	ldr	r0, [pc, #64]	; (403e04 <spi_data_read+0xf8>)
  403dc4:	4c10      	ldr	r4, [pc, #64]	; (403e08 <spi_data_read+0xfc>)
  403dc6:	47a0      	blx	r4
  403dc8:	4814      	ldr	r0, [pc, #80]	; (403e1c <spi_data_read+0x110>)
  403dca:	47a0      	blx	r4
  403dcc:	4810      	ldr	r0, [pc, #64]	; (403e10 <spi_data_read+0x104>)
  403dce:	47a0      	blx	r4
			break;
  403dd0:	e7b2      	b.n	403d38 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403dd2:	2102      	movs	r1, #2
  403dd4:	a803      	add	r0, sp, #12
  403dd6:	47a8      	blx	r5
  403dd8:	2800      	cmp	r0, #0
  403dda:	d0bf      	beq.n	403d5c <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403ddc:	f240 1277 	movw	r2, #375	; 0x177
  403de0:	4907      	ldr	r1, [pc, #28]	; (403e00 <spi_data_read+0xf4>)
  403de2:	4808      	ldr	r0, [pc, #32]	; (403e04 <spi_data_read+0xf8>)
  403de4:	4d08      	ldr	r5, [pc, #32]	; (403e08 <spi_data_read+0xfc>)
  403de6:	47a8      	blx	r5
  403de8:	480d      	ldr	r0, [pc, #52]	; (403e20 <spi_data_read+0x114>)
  403dea:	47a8      	blx	r5
  403dec:	4808      	ldr	r0, [pc, #32]	; (403e10 <spi_data_read+0x104>)
  403dee:	47a8      	blx	r5
					result = N_FAIL;
  403df0:	9401      	str	r4, [sp, #4]
					break;
  403df2:	e7a1      	b.n	403d38 <spi_data_read+0x2c>
  403df4:	2301      	movs	r3, #1
  403df6:	9301      	str	r3, [sp, #4]
  403df8:	e79e      	b.n	403d38 <spi_data_read+0x2c>
  403dfa:	bf00      	nop
  403dfc:	00403c29 	.word	0x00403c29
  403e00:	00409e34 	.word	0x00409e34
  403e04:	00409844 	.word	0x00409844
  403e08:	00406231 	.word	0x00406231
  403e0c:	0040a29c 	.word	0x0040a29c
  403e10:	00409870 	.word	0x00409870
  403e14:	2040c360 	.word	0x2040c360
  403e18:	0040a2d0 	.word	0x0040a2d0
  403e1c:	0040a300 	.word	0x0040a300
  403e20:	0040a334 	.word	0x0040a334

00403e24 <nmi_spi_write>:
{
  403e24:	b500      	push	{lr}
  403e26:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403e28:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403e2a:	2300      	movs	r3, #0
  403e2c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403e2e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403e32:	a901      	add	r1, sp, #4
  403e34:	2003      	movs	r0, #3
  403e36:	4b02      	ldr	r3, [pc, #8]	; (403e40 <nmi_spi_write+0x1c>)
  403e38:	4798      	blx	r3
}
  403e3a:	b005      	add	sp, #20
  403e3c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e40:	004024f9 	.word	0x004024f9

00403e44 <spi_cmd>:
{
  403e44:	b570      	push	{r4, r5, r6, lr}
  403e46:	b084      	sub	sp, #16
  403e48:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403e4c:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403e50:	38c1      	subs	r0, #193	; 0xc1
  403e52:	280e      	cmp	r0, #14
  403e54:	f200 80a2 	bhi.w	403f9c <spi_cmd+0x158>
  403e58:	e8df f000 	tbb	[pc, r0]
  403e5c:	19664545 	.word	0x19664545
  403e60:	5454332a 	.word	0x5454332a
  403e64:	a0a0087f 	.word	0xa0a0087f
  403e68:	a0a0      	.short	0xa0a0
  403e6a:	3c          	.byte	0x3c
  403e6b:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403e6c:	0c0b      	lsrs	r3, r1, #16
  403e6e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e72:	0a0b      	lsrs	r3, r1, #8
  403e74:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403e78:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403e7c:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403e7e:	4b55      	ldr	r3, [pc, #340]	; (403fd4 <spi_cmd+0x190>)
  403e80:	781b      	ldrb	r3, [r3, #0]
  403e82:	2b00      	cmp	r3, #0
  403e84:	f000 808c 	beq.w	403fa0 <spi_cmd+0x15c>
			len-=1;
  403e88:	3901      	subs	r1, #1
  403e8a:	b2c9      	uxtb	r1, r1
  403e8c:	e09a      	b.n	403fc4 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403e8e:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403e92:	b944      	cbnz	r4, 403ea6 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403e94:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403e98:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403e9c:	2300      	movs	r3, #0
  403e9e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ea2:	2105      	movs	r1, #5
		break;
  403ea4:	e7eb      	b.n	403e7e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403eaa:	f88d 3005 	strb.w	r3, [sp, #5]
  403eae:	e7f3      	b.n	403e98 <spi_cmd+0x54>
		bc[1] = 0x00;
  403eb0:	2300      	movs	r3, #0
  403eb2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403eb6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403eba:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ebe:	2105      	movs	r1, #5
		break;
  403ec0:	e7dd      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = 0x00;
  403ec2:	2300      	movs	r3, #0
  403ec4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403ec8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403ecc:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ed0:	2105      	movs	r1, #5
		break;
  403ed2:	e7d4      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = 0xff;
  403ed4:	23ff      	movs	r3, #255	; 0xff
  403ed6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403eda:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403ede:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ee2:	2105      	movs	r1, #5
		break;
  403ee4:	e7cb      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403ee6:	0c0a      	lsrs	r2, r1, #16
  403ee8:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403eec:	0a0a      	lsrs	r2, r1, #8
  403eee:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403ef2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403ef6:	0a1a      	lsrs	r2, r3, #8
  403ef8:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403efc:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403f00:	2107      	movs	r1, #7
		break;
  403f02:	e7bc      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403f04:	0c0a      	lsrs	r2, r1, #16
  403f06:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403f0a:	0a0a      	lsrs	r2, r1, #8
  403f0c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403f10:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403f14:	0c1a      	lsrs	r2, r3, #16
  403f16:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403f1a:	0a1a      	lsrs	r2, r3, #8
  403f1c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403f20:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403f24:	2108      	movs	r1, #8
		break;
  403f26:	e7aa      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403f28:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403f2c:	b984      	cbnz	r4, 403f50 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403f2e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403f32:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403f36:	0e13      	lsrs	r3, r2, #24
  403f38:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403f3c:	0c13      	lsrs	r3, r2, #16
  403f3e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403f42:	0a13      	lsrs	r3, r2, #8
  403f44:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403f48:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403f4c:	2108      	movs	r1, #8
		break;
  403f4e:	e796      	b.n	403e7e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f54:	f88d 3005 	strb.w	r3, [sp, #5]
  403f58:	e7eb      	b.n	403f32 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403f5a:	0c0b      	lsrs	r3, r1, #16
  403f5c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403f60:	0a0b      	lsrs	r3, r1, #8
  403f62:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403f66:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403f6a:	0e13      	lsrs	r3, r2, #24
  403f6c:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403f70:	0c13      	lsrs	r3, r2, #16
  403f72:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403f76:	0a13      	lsrs	r3, r2, #8
  403f78:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403f7c:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403f80:	2109      	movs	r1, #9
		break;
  403f82:	e77c      	b.n	403e7e <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403f84:	f44f 7284 	mov.w	r2, #264	; 0x108
  403f88:	4913      	ldr	r1, [pc, #76]	; (403fd8 <spi_cmd+0x194>)
  403f8a:	4814      	ldr	r0, [pc, #80]	; (403fdc <spi_cmd+0x198>)
  403f8c:	4c14      	ldr	r4, [pc, #80]	; (403fe0 <spi_cmd+0x19c>)
  403f8e:	47a0      	blx	r4
  403f90:	4814      	ldr	r0, [pc, #80]	; (403fe4 <spi_cmd+0x1a0>)
  403f92:	47a0      	blx	r4
  403f94:	4814      	ldr	r0, [pc, #80]	; (403fe8 <spi_cmd+0x1a4>)
  403f96:	47a0      	blx	r4
			result = N_FAIL;
  403f98:	2000      	movs	r0, #0
  403f9a:	e019      	b.n	403fd0 <spi_cmd+0x18c>
	switch (cmd) {
  403f9c:	2000      	movs	r0, #0
  403f9e:	e017      	b.n	403fd0 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403fa0:	1e4e      	subs	r6, r1, #1
  403fa2:	ab01      	add	r3, sp, #4
  403fa4:	199d      	adds	r5, r3, r6
  403fa6:	207f      	movs	r0, #127	; 0x7f
  403fa8:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403faa:	4c10      	ldr	r4, [pc, #64]	; (403fec <spi_cmd+0x1a8>)
  403fac:	f812 3b01 	ldrb.w	r3, [r2], #1
  403fb0:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403fb4:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403fb6:	4295      	cmp	r5, r2
  403fb8:	d1f8      	bne.n	403fac <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403fba:	ab04      	add	r3, sp, #16
  403fbc:	441e      	add	r6, r3
  403fbe:	0043      	lsls	r3, r0, #1
  403fc0:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403fc4:	a801      	add	r0, sp, #4
  403fc6:	4b0a      	ldr	r3, [pc, #40]	; (403ff0 <spi_cmd+0x1ac>)
  403fc8:	4798      	blx	r3
  403fca:	2800      	cmp	r0, #0
  403fcc:	d1da      	bne.n	403f84 <spi_cmd+0x140>
  403fce:	2001      	movs	r0, #1
}
  403fd0:	b004      	add	sp, #16
  403fd2:	bd70      	pop	{r4, r5, r6, pc}
  403fd4:	2040c360 	.word	0x2040c360
  403fd8:	00409e20 	.word	0x00409e20
  403fdc:	00409844 	.word	0x00409844
  403fe0:	00406231 	.word	0x00406231
  403fe4:	0040a23c 	.word	0x0040a23c
  403fe8:	00409870 	.word	0x00409870
  403fec:	00409e9c 	.word	0x00409e9c
  403ff0:	00403e25 	.word	0x00403e25

00403ff4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403ff4:	b570      	push	{r4, r5, r6, lr}
  403ff6:	b082      	sub	sp, #8
  403ff8:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403ffa:	2831      	cmp	r0, #49	; 0x31
  403ffc:	bf35      	itete	cc
  403ffe:	2301      	movcc	r3, #1
  404000:	2300      	movcs	r3, #0
  404002:	25c3      	movcc	r5, #195	; 0xc3
  404004:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  404006:	9300      	str	r3, [sp, #0]
  404008:	2304      	movs	r3, #4
  40400a:	460a      	mov	r2, r1
  40400c:	4601      	mov	r1, r0
  40400e:	4628      	mov	r0, r5
  404010:	4e15      	ldr	r6, [pc, #84]	; (404068 <spi_write_reg+0x74>)
  404012:	47b0      	blx	r6
	if (result != N_OK) {
  404014:	2801      	cmp	r0, #1
  404016:	d00d      	beq.n	404034 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  404018:	f240 12eb 	movw	r2, #491	; 0x1eb
  40401c:	4913      	ldr	r1, [pc, #76]	; (40406c <spi_write_reg+0x78>)
  40401e:	4814      	ldr	r0, [pc, #80]	; (404070 <spi_write_reg+0x7c>)
  404020:	4d14      	ldr	r5, [pc, #80]	; (404074 <spi_write_reg+0x80>)
  404022:	47a8      	blx	r5
  404024:	4621      	mov	r1, r4
  404026:	4814      	ldr	r0, [pc, #80]	; (404078 <spi_write_reg+0x84>)
  404028:	47a8      	blx	r5
  40402a:	4814      	ldr	r0, [pc, #80]	; (40407c <spi_write_reg+0x88>)
  40402c:	47a8      	blx	r5
		return N_FAIL;
  40402e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  404030:	b002      	add	sp, #8
  404032:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  404034:	4628      	mov	r0, r5
  404036:	4b12      	ldr	r3, [pc, #72]	; (404080 <spi_write_reg+0x8c>)
  404038:	4798      	blx	r3
	if (result != N_OK) {
  40403a:	2801      	cmp	r0, #1
  40403c:	d0f8      	beq.n	404030 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  40403e:	f240 12f1 	movw	r2, #497	; 0x1f1
  404042:	490a      	ldr	r1, [pc, #40]	; (40406c <spi_write_reg+0x78>)
  404044:	480a      	ldr	r0, [pc, #40]	; (404070 <spi_write_reg+0x7c>)
  404046:	4d0b      	ldr	r5, [pc, #44]	; (404074 <spi_write_reg+0x80>)
  404048:	47a8      	blx	r5
  40404a:	4621      	mov	r1, r4
  40404c:	480d      	ldr	r0, [pc, #52]	; (404084 <spi_write_reg+0x90>)
  40404e:	47a8      	blx	r5
  404050:	480a      	ldr	r0, [pc, #40]	; (40407c <spi_write_reg+0x88>)
  404052:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404054:	2400      	movs	r4, #0
  404056:	9400      	str	r4, [sp, #0]
  404058:	4623      	mov	r3, r4
  40405a:	4622      	mov	r2, r4
  40405c:	4621      	mov	r1, r4
  40405e:	20cf      	movs	r0, #207	; 0xcf
  404060:	4d01      	ldr	r5, [pc, #4]	; (404068 <spi_write_reg+0x74>)
  404062:	47a8      	blx	r5
		return N_FAIL;
  404064:	4620      	mov	r0, r4
  404066:	e7e3      	b.n	404030 <spi_write_reg+0x3c>
  404068:	00403e45 	.word	0x00403e45
  40406c:	00409e54 	.word	0x00409e54
  404070:	00409844 	.word	0x00409844
  404074:	00406231 	.word	0x00406231
  404078:	0040a3ec 	.word	0x0040a3ec
  40407c:	00409870 	.word	0x00409870
  404080:	00403c49 	.word	0x00403c49
  404084:	0040a418 	.word	0x0040a418

00404088 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  404088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40408c:	b084      	sub	sp, #16
  40408e:	4604      	mov	r4, r0
  404090:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  404092:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  404096:	bf35      	itete	cc
  404098:	2601      	movcc	r6, #1
  40409a:	2600      	movcs	r6, #0
  40409c:	25c4      	movcc	r5, #196	; 0xc4
  40409e:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  4040a0:	9600      	str	r6, [sp, #0]
  4040a2:	2304      	movs	r3, #4
  4040a4:	2200      	movs	r2, #0
  4040a6:	4601      	mov	r1, r0
  4040a8:	4628      	mov	r0, r5
  4040aa:	4f2c      	ldr	r7, [pc, #176]	; (40415c <spi_read_reg+0xd4>)
  4040ac:	47b8      	blx	r7
	if (result != N_OK) {
  4040ae:	2801      	cmp	r0, #1
  4040b0:	d00e      	beq.n	4040d0 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4040b2:	f240 2245 	movw	r2, #581	; 0x245
  4040b6:	492a      	ldr	r1, [pc, #168]	; (404160 <spi_read_reg+0xd8>)
  4040b8:	482a      	ldr	r0, [pc, #168]	; (404164 <spi_read_reg+0xdc>)
  4040ba:	4d2b      	ldr	r5, [pc, #172]	; (404168 <spi_read_reg+0xe0>)
  4040bc:	47a8      	blx	r5
  4040be:	4621      	mov	r1, r4
  4040c0:	482a      	ldr	r0, [pc, #168]	; (40416c <spi_read_reg+0xe4>)
  4040c2:	47a8      	blx	r5
  4040c4:	482a      	ldr	r0, [pc, #168]	; (404170 <spi_read_reg+0xe8>)
  4040c6:	47a8      	blx	r5
		return N_FAIL;
  4040c8:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  4040ca:	b004      	add	sp, #16
  4040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  4040d0:	4628      	mov	r0, r5
  4040d2:	4b28      	ldr	r3, [pc, #160]	; (404174 <spi_read_reg+0xec>)
  4040d4:	4798      	blx	r3
	if (result != N_OK) {
  4040d6:	2801      	cmp	r0, #1
  4040d8:	d014      	beq.n	404104 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  4040da:	f240 224b 	movw	r2, #587	; 0x24b
  4040de:	4920      	ldr	r1, [pc, #128]	; (404160 <spi_read_reg+0xd8>)
  4040e0:	4820      	ldr	r0, [pc, #128]	; (404164 <spi_read_reg+0xdc>)
  4040e2:	4d21      	ldr	r5, [pc, #132]	; (404168 <spi_read_reg+0xe0>)
  4040e4:	47a8      	blx	r5
  4040e6:	4621      	mov	r1, r4
  4040e8:	4823      	ldr	r0, [pc, #140]	; (404178 <spi_read_reg+0xf0>)
  4040ea:	47a8      	blx	r5
  4040ec:	4820      	ldr	r0, [pc, #128]	; (404170 <spi_read_reg+0xe8>)
  4040ee:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4040f0:	2400      	movs	r4, #0
  4040f2:	9400      	str	r4, [sp, #0]
  4040f4:	4623      	mov	r3, r4
  4040f6:	4622      	mov	r2, r4
  4040f8:	4621      	mov	r1, r4
  4040fa:	20cf      	movs	r0, #207	; 0xcf
  4040fc:	4d17      	ldr	r5, [pc, #92]	; (40415c <spi_read_reg+0xd4>)
  4040fe:	47a8      	blx	r5
		return N_FAIL;
  404100:	4620      	mov	r0, r4
  404102:	e7e2      	b.n	4040ca <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  404104:	4632      	mov	r2, r6
  404106:	2104      	movs	r1, #4
  404108:	a803      	add	r0, sp, #12
  40410a:	4b1c      	ldr	r3, [pc, #112]	; (40417c <spi_read_reg+0xf4>)
  40410c:	4798      	blx	r3
	if (result != N_OK) {
  40410e:	2801      	cmp	r0, #1
  404110:	d110      	bne.n	404134 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  404112:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  404116:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40411a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40411c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  404120:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  404124:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  404126:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40412a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40412e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  404132:	e7ca      	b.n	4040ca <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  404134:	f240 2253 	movw	r2, #595	; 0x253
  404138:	4909      	ldr	r1, [pc, #36]	; (404160 <spi_read_reg+0xd8>)
  40413a:	480a      	ldr	r0, [pc, #40]	; (404164 <spi_read_reg+0xdc>)
  40413c:	4c0a      	ldr	r4, [pc, #40]	; (404168 <spi_read_reg+0xe0>)
  40413e:	47a0      	blx	r4
  404140:	480f      	ldr	r0, [pc, #60]	; (404180 <spi_read_reg+0xf8>)
  404142:	47a0      	blx	r4
  404144:	480a      	ldr	r0, [pc, #40]	; (404170 <spi_read_reg+0xe8>)
  404146:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404148:	2400      	movs	r4, #0
  40414a:	9400      	str	r4, [sp, #0]
  40414c:	4623      	mov	r3, r4
  40414e:	4622      	mov	r2, r4
  404150:	4621      	mov	r1, r4
  404152:	20cf      	movs	r0, #207	; 0xcf
  404154:	4d01      	ldr	r5, [pc, #4]	; (40415c <spi_read_reg+0xd4>)
  404156:	47a8      	blx	r5
		return N_FAIL;
  404158:	4620      	mov	r0, r4
  40415a:	e7b6      	b.n	4040ca <spi_read_reg+0x42>
  40415c:	00403e45 	.word	0x00403e45
  404160:	00409e74 	.word	0x00409e74
  404164:	00409844 	.word	0x00409844
  404168:	00406231 	.word	0x00406231
  40416c:	0040a36c 	.word	0x0040a36c
  404170:	00409870 	.word	0x00409870
  404174:	00403c49 	.word	0x00403c49
  404178:	0040a398 	.word	0x0040a398
  40417c:	00403d0d 	.word	0x00403d0d
  404180:	0040a3cc 	.word	0x0040a3cc

00404184 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  404184:	2000      	movs	r0, #0
  404186:	4b01      	ldr	r3, [pc, #4]	; (40418c <nm_spi_deinit+0x8>)
  404188:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  40418a:	4770      	bx	lr
  40418c:	2040c360 	.word	0x2040c360

00404190 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  404190:	b500      	push	{lr}
  404192:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  404194:	a901      	add	r1, sp, #4
  404196:	4b03      	ldr	r3, [pc, #12]	; (4041a4 <nm_spi_read_reg+0x14>)
  404198:	4798      	blx	r3

	return u32Val;
}
  40419a:	9801      	ldr	r0, [sp, #4]
  40419c:	b003      	add	sp, #12
  40419e:	f85d fb04 	ldr.w	pc, [sp], #4
  4041a2:	bf00      	nop
  4041a4:	00404089 	.word	0x00404089

004041a8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4041a8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4041aa:	4b04      	ldr	r3, [pc, #16]	; (4041bc <nm_spi_read_reg_with_ret+0x14>)
  4041ac:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4041ae:	2801      	cmp	r0, #1

	return s8Ret;
}
  4041b0:	bf0c      	ite	eq
  4041b2:	2000      	moveq	r0, #0
  4041b4:	f06f 0005 	mvnne.w	r0, #5
  4041b8:	bd08      	pop	{r3, pc}
  4041ba:	bf00      	nop
  4041bc:	00404089 	.word	0x00404089

004041c0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4041c0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4041c2:	4b04      	ldr	r3, [pc, #16]	; (4041d4 <nm_spi_write_reg+0x14>)
  4041c4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4041c6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4041c8:	bf0c      	ite	eq
  4041ca:	2000      	moveq	r0, #0
  4041cc:	f06f 0005 	mvnne.w	r0, #5
  4041d0:	bd08      	pop	{r3, pc}
  4041d2:	bf00      	nop
  4041d4:	00403ff5 	.word	0x00403ff5

004041d8 <nm_spi_init>:
{
  4041d8:	b530      	push	{r4, r5, lr}
  4041da:	b083      	sub	sp, #12
	uint32 reg =0;
  4041dc:	2300      	movs	r3, #0
  4041de:	a902      	add	r1, sp, #8
  4041e0:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  4041e4:	4a34      	ldr	r2, [pc, #208]	; (4042b8 <nm_spi_init+0xe0>)
  4041e6:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4041e8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041ec:	4b33      	ldr	r3, [pc, #204]	; (4042bc <nm_spi_init+0xe4>)
  4041ee:	4798      	blx	r3
  4041f0:	b348      	cbz	r0, 404246 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  4041f2:	4b31      	ldr	r3, [pc, #196]	; (4042b8 <nm_spi_init+0xe0>)
  4041f4:	781b      	ldrb	r3, [r3, #0]
  4041f6:	b97b      	cbnz	r3, 404218 <nm_spi_init+0x40>
		reg &= ~0x70;
  4041f8:	9900      	ldr	r1, [sp, #0]
  4041fa:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  4041fe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404202:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  404204:	f64e 0024 	movw	r0, #59428	; 0xe824
  404208:	4b2d      	ldr	r3, [pc, #180]	; (4042c0 <nm_spi_init+0xe8>)
  40420a:	4798      	blx	r3
  40420c:	4604      	mov	r4, r0
  40420e:	2800      	cmp	r0, #0
  404210:	d039      	beq.n	404286 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  404212:	2201      	movs	r2, #1
  404214:	4b28      	ldr	r3, [pc, #160]	; (4042b8 <nm_spi_init+0xe0>)
  404216:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  404218:	a901      	add	r1, sp, #4
  40421a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40421e:	4b27      	ldr	r3, [pc, #156]	; (4042bc <nm_spi_init+0xe4>)
  404220:	4798      	blx	r3
  404222:	2800      	cmp	r0, #0
  404224:	d03a      	beq.n	40429c <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  404226:	f64e 0024 	movw	r0, #59428	; 0xe824
  40422a:	4b26      	ldr	r3, [pc, #152]	; (4042c4 <nm_spi_init+0xec>)
  40422c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40422e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  404232:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404236:	f64e 0024 	movw	r0, #59428	; 0xe824
  40423a:	4b23      	ldr	r3, [pc, #140]	; (4042c8 <nm_spi_init+0xf0>)
  40423c:	4798      	blx	r3
	return M2M_SUCCESS;
  40423e:	2400      	movs	r4, #0
}
  404240:	4620      	mov	r0, r4
  404242:	b003      	add	sp, #12
  404244:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  404246:	2201      	movs	r2, #1
  404248:	4b1b      	ldr	r3, [pc, #108]	; (4042b8 <nm_spi_init+0xe0>)
  40424a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40424c:	f240 22c5 	movw	r2, #709	; 0x2c5
  404250:	491e      	ldr	r1, [pc, #120]	; (4042cc <nm_spi_init+0xf4>)
  404252:	481f      	ldr	r0, [pc, #124]	; (4042d0 <nm_spi_init+0xf8>)
  404254:	4c1f      	ldr	r4, [pc, #124]	; (4042d4 <nm_spi_init+0xfc>)
  404256:	47a0      	blx	r4
  404258:	481f      	ldr	r0, [pc, #124]	; (4042d8 <nm_spi_init+0x100>)
  40425a:	47a0      	blx	r4
  40425c:	481f      	ldr	r0, [pc, #124]	; (4042dc <nm_spi_init+0x104>)
  40425e:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404260:	4669      	mov	r1, sp
  404262:	f64e 0024 	movw	r0, #59428	; 0xe824
  404266:	4b15      	ldr	r3, [pc, #84]	; (4042bc <nm_spi_init+0xe4>)
  404268:	4798      	blx	r3
  40426a:	4604      	mov	r4, r0
  40426c:	2800      	cmp	r0, #0
  40426e:	d1c0      	bne.n	4041f2 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404270:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  404274:	4915      	ldr	r1, [pc, #84]	; (4042cc <nm_spi_init+0xf4>)
  404276:	4816      	ldr	r0, [pc, #88]	; (4042d0 <nm_spi_init+0xf8>)
  404278:	4d16      	ldr	r5, [pc, #88]	; (4042d4 <nm_spi_init+0xfc>)
  40427a:	47a8      	blx	r5
  40427c:	4818      	ldr	r0, [pc, #96]	; (4042e0 <nm_spi_init+0x108>)
  40427e:	47a8      	blx	r5
  404280:	4816      	ldr	r0, [pc, #88]	; (4042dc <nm_spi_init+0x104>)
  404282:	47a8      	blx	r5
			return 0;
  404284:	e7dc      	b.n	404240 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  404286:	f240 22d2 	movw	r2, #722	; 0x2d2
  40428a:	4910      	ldr	r1, [pc, #64]	; (4042cc <nm_spi_init+0xf4>)
  40428c:	4810      	ldr	r0, [pc, #64]	; (4042d0 <nm_spi_init+0xf8>)
  40428e:	4d11      	ldr	r5, [pc, #68]	; (4042d4 <nm_spi_init+0xfc>)
  404290:	47a8      	blx	r5
  404292:	4814      	ldr	r0, [pc, #80]	; (4042e4 <nm_spi_init+0x10c>)
  404294:	47a8      	blx	r5
  404296:	4811      	ldr	r0, [pc, #68]	; (4042dc <nm_spi_init+0x104>)
  404298:	47a8      	blx	r5
			return 0;
  40429a:	e7d1      	b.n	404240 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40429c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4042a0:	490a      	ldr	r1, [pc, #40]	; (4042cc <nm_spi_init+0xf4>)
  4042a2:	480b      	ldr	r0, [pc, #44]	; (4042d0 <nm_spi_init+0xf8>)
  4042a4:	4c0b      	ldr	r4, [pc, #44]	; (4042d4 <nm_spi_init+0xfc>)
  4042a6:	47a0      	blx	r4
  4042a8:	480f      	ldr	r0, [pc, #60]	; (4042e8 <nm_spi_init+0x110>)
  4042aa:	47a0      	blx	r4
  4042ac:	480b      	ldr	r0, [pc, #44]	; (4042dc <nm_spi_init+0x104>)
  4042ae:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4042b0:	f06f 0405 	mvn.w	r4, #5
  4042b4:	e7c4      	b.n	404240 <nm_spi_init+0x68>
  4042b6:	bf00      	nop
  4042b8:	2040c360 	.word	0x2040c360
  4042bc:	00404089 	.word	0x00404089
  4042c0:	00403ff5 	.word	0x00403ff5
  4042c4:	00404191 	.word	0x00404191
  4042c8:	004041c1 	.word	0x004041c1
  4042cc:	00409e90 	.word	0x00409e90
  4042d0:	00409844 	.word	0x00409844
  4042d4:	00406231 	.word	0x00406231
  4042d8:	00409f9c 	.word	0x00409f9c
  4042dc:	00409870 	.word	0x00409870
  4042e0:	00409fec 	.word	0x00409fec
  4042e4:	0040a01c 	.word	0x0040a01c
  4042e8:	0040a050 	.word	0x0040a050

004042ec <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4042ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042ee:	b083      	sub	sp, #12
  4042f0:	4604      	mov	r4, r0
  4042f2:	460f      	mov	r7, r1
  4042f4:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4042f6:	2200      	movs	r2, #0
  4042f8:	9200      	str	r2, [sp, #0]
  4042fa:	462b      	mov	r3, r5
  4042fc:	4601      	mov	r1, r0
  4042fe:	20c8      	movs	r0, #200	; 0xc8
  404300:	4e22      	ldr	r6, [pc, #136]	; (40438c <nm_spi_read_block+0xa0>)
  404302:	47b0      	blx	r6
	if (result != N_OK) {
  404304:	2801      	cmp	r0, #1
  404306:	d00e      	beq.n	404326 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  404308:	f44f 721d 	mov.w	r2, #628	; 0x274
  40430c:	4920      	ldr	r1, [pc, #128]	; (404390 <nm_spi_read_block+0xa4>)
  40430e:	4821      	ldr	r0, [pc, #132]	; (404394 <nm_spi_read_block+0xa8>)
  404310:	4d21      	ldr	r5, [pc, #132]	; (404398 <nm_spi_read_block+0xac>)
  404312:	47a8      	blx	r5
  404314:	4621      	mov	r1, r4
  404316:	4821      	ldr	r0, [pc, #132]	; (40439c <nm_spi_read_block+0xb0>)
  404318:	47a8      	blx	r5
  40431a:	4821      	ldr	r0, [pc, #132]	; (4043a0 <nm_spi_read_block+0xb4>)
  40431c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40431e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404322:	b003      	add	sp, #12
  404324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  404326:	20c8      	movs	r0, #200	; 0xc8
  404328:	4b1e      	ldr	r3, [pc, #120]	; (4043a4 <nm_spi_read_block+0xb8>)
  40432a:	4798      	blx	r3
	if (result != N_OK) {
  40432c:	2801      	cmp	r0, #1
  40432e:	d012      	beq.n	404356 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  404330:	f240 227a 	movw	r2, #634	; 0x27a
  404334:	4916      	ldr	r1, [pc, #88]	; (404390 <nm_spi_read_block+0xa4>)
  404336:	4817      	ldr	r0, [pc, #92]	; (404394 <nm_spi_read_block+0xa8>)
  404338:	4d17      	ldr	r5, [pc, #92]	; (404398 <nm_spi_read_block+0xac>)
  40433a:	47a8      	blx	r5
  40433c:	4621      	mov	r1, r4
  40433e:	481a      	ldr	r0, [pc, #104]	; (4043a8 <nm_spi_read_block+0xbc>)
  404340:	47a8      	blx	r5
  404342:	4817      	ldr	r0, [pc, #92]	; (4043a0 <nm_spi_read_block+0xb4>)
  404344:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404346:	2100      	movs	r1, #0
  404348:	9100      	str	r1, [sp, #0]
  40434a:	460b      	mov	r3, r1
  40434c:	460a      	mov	r2, r1
  40434e:	20cf      	movs	r0, #207	; 0xcf
  404350:	4c0e      	ldr	r4, [pc, #56]	; (40438c <nm_spi_read_block+0xa0>)
  404352:	47a0      	blx	r4
  404354:	e7e3      	b.n	40431e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  404356:	2200      	movs	r2, #0
  404358:	4629      	mov	r1, r5
  40435a:	4638      	mov	r0, r7
  40435c:	4b13      	ldr	r3, [pc, #76]	; (4043ac <nm_spi_read_block+0xc0>)
  40435e:	4798      	blx	r3
	if (result != N_OK) {
  404360:	2801      	cmp	r0, #1
  404362:	d011      	beq.n	404388 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  404364:	f44f 7221 	mov.w	r2, #644	; 0x284
  404368:	4909      	ldr	r1, [pc, #36]	; (404390 <nm_spi_read_block+0xa4>)
  40436a:	480a      	ldr	r0, [pc, #40]	; (404394 <nm_spi_read_block+0xa8>)
  40436c:	4c0a      	ldr	r4, [pc, #40]	; (404398 <nm_spi_read_block+0xac>)
  40436e:	47a0      	blx	r4
  404370:	480f      	ldr	r0, [pc, #60]	; (4043b0 <nm_spi_read_block+0xc4>)
  404372:	47a0      	blx	r4
  404374:	480a      	ldr	r0, [pc, #40]	; (4043a0 <nm_spi_read_block+0xb4>)
  404376:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404378:	2100      	movs	r1, #0
  40437a:	9100      	str	r1, [sp, #0]
  40437c:	460b      	mov	r3, r1
  40437e:	460a      	mov	r2, r1
  404380:	20cf      	movs	r0, #207	; 0xcf
  404382:	4c02      	ldr	r4, [pc, #8]	; (40438c <nm_spi_read_block+0xa0>)
  404384:	47a0      	blx	r4
  404386:	e7ca      	b.n	40431e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404388:	2000      	movs	r0, #0
  40438a:	e7ca      	b.n	404322 <nm_spi_read_block+0x36>
  40438c:	00403e45 	.word	0x00403e45
  404390:	00409e84 	.word	0x00409e84
  404394:	00409844 	.word	0x00409844
  404398:	00406231 	.word	0x00406231
  40439c:	0040a078 	.word	0x0040a078
  4043a0:	00409870 	.word	0x00409870
  4043a4:	00403c49 	.word	0x00403c49
  4043a8:	0040a0a8 	.word	0x0040a0a8
  4043ac:	00403d0d 	.word	0x00403d0d
  4043b0:	0040a0e0 	.word	0x0040a0e0

004043b4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4043b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4043b8:	b085      	sub	sp, #20
  4043ba:	4604      	mov	r4, r0
  4043bc:	4688      	mov	r8, r1
  4043be:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4043c0:	2200      	movs	r2, #0
  4043c2:	9200      	str	r2, [sp, #0]
  4043c4:	462b      	mov	r3, r5
  4043c6:	4601      	mov	r1, r0
  4043c8:	20c7      	movs	r0, #199	; 0xc7
  4043ca:	4e4d      	ldr	r6, [pc, #308]	; (404500 <nm_spi_write_block+0x14c>)
  4043cc:	47b0      	blx	r6
	if (result != N_OK) {
  4043ce:	2801      	cmp	r0, #1
  4043d0:	d00f      	beq.n	4043f2 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4043d2:	f240 220f 	movw	r2, #527	; 0x20f
  4043d6:	494b      	ldr	r1, [pc, #300]	; (404504 <nm_spi_write_block+0x150>)
  4043d8:	484b      	ldr	r0, [pc, #300]	; (404508 <nm_spi_write_block+0x154>)
  4043da:	4d4c      	ldr	r5, [pc, #304]	; (40450c <nm_spi_write_block+0x158>)
  4043dc:	47a8      	blx	r5
  4043de:	4621      	mov	r1, r4
  4043e0:	484b      	ldr	r0, [pc, #300]	; (404510 <nm_spi_write_block+0x15c>)
  4043e2:	47a8      	blx	r5
  4043e4:	484b      	ldr	r0, [pc, #300]	; (404514 <nm_spi_write_block+0x160>)
  4043e6:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4043e8:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4043ec:	b005      	add	sp, #20
  4043ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  4043f2:	20c7      	movs	r0, #199	; 0xc7
  4043f4:	4b48      	ldr	r3, [pc, #288]	; (404518 <nm_spi_write_block+0x164>)
  4043f6:	4798      	blx	r3
	if (result != N_OK) {
  4043f8:	2801      	cmp	r0, #1
  4043fa:	d012      	beq.n	404422 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4043fc:	f240 2215 	movw	r2, #533	; 0x215
  404400:	4940      	ldr	r1, [pc, #256]	; (404504 <nm_spi_write_block+0x150>)
  404402:	4841      	ldr	r0, [pc, #260]	; (404508 <nm_spi_write_block+0x154>)
  404404:	4d41      	ldr	r5, [pc, #260]	; (40450c <nm_spi_write_block+0x158>)
  404406:	47a8      	blx	r5
  404408:	4621      	mov	r1, r4
  40440a:	4844      	ldr	r0, [pc, #272]	; (40451c <nm_spi_write_block+0x168>)
  40440c:	47a8      	blx	r5
  40440e:	4841      	ldr	r0, [pc, #260]	; (404514 <nm_spi_write_block+0x160>)
  404410:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404412:	2100      	movs	r1, #0
  404414:	9100      	str	r1, [sp, #0]
  404416:	460b      	mov	r3, r1
  404418:	460a      	mov	r2, r1
  40441a:	20cf      	movs	r0, #207	; 0xcf
  40441c:	4c38      	ldr	r4, [pc, #224]	; (404500 <nm_spi_write_block+0x14c>)
  40441e:	47a0      	blx	r4
  404420:	e7e2      	b.n	4043e8 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  404422:	2400      	movs	r4, #0
  404424:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404428:	4f3d      	ldr	r7, [pc, #244]	; (404520 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40442a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404538 <nm_spi_write_block+0x184>
  40442e:	e01d      	b.n	40446c <nm_spi_write_block+0xb8>
				order = 0x2;
  404430:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404434:	bf94      	ite	ls
  404436:	2303      	movls	r3, #3
  404438:	2302      	movhi	r3, #2
		cmd |= order;
  40443a:	f063 030f 	orn	r3, r3, #15
  40443e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404442:	2101      	movs	r1, #1
  404444:	f10d 000b 	add.w	r0, sp, #11
  404448:	47b8      	blx	r7
  40444a:	b9e8      	cbnz	r0, 404488 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40444c:	4631      	mov	r1, r6
  40444e:	eb08 0004 	add.w	r0, r8, r4
  404452:	47b8      	blx	r7
  404454:	2800      	cmp	r0, #0
  404456:	d135      	bne.n	4044c4 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  404458:	f899 3000 	ldrb.w	r3, [r9]
  40445c:	2b00      	cmp	r3, #0
  40445e:	d03c      	beq.n	4044da <nm_spi_write_block+0x126>
		ix += nbytes;
  404460:	4434      	add	r4, r6
  404462:	b224      	sxth	r4, r4
		sz -= nbytes;
  404464:	1bad      	subs	r5, r5, r6
  404466:	b2ad      	uxth	r5, r5
	} while (sz);
  404468:	2d00      	cmp	r5, #0
  40446a:	d046      	beq.n	4044fa <nm_spi_write_block+0x146>
  40446c:	462e      	mov	r6, r5
  40446e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404472:	bf28      	it	cs
  404474:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  404478:	2c00      	cmp	r4, #0
  40447a:	d1d9      	bne.n	404430 <nm_spi_write_block+0x7c>
				order = 0x1;
  40447c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404480:	bf94      	ite	ls
  404482:	2303      	movls	r3, #3
  404484:	2301      	movhi	r3, #1
  404486:	e7d8      	b.n	40443a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  404488:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40448c:	4925      	ldr	r1, [pc, #148]	; (404524 <nm_spi_write_block+0x170>)
  40448e:	481e      	ldr	r0, [pc, #120]	; (404508 <nm_spi_write_block+0x154>)
  404490:	4c1e      	ldr	r4, [pc, #120]	; (40450c <nm_spi_write_block+0x158>)
  404492:	47a0      	blx	r4
  404494:	4824      	ldr	r0, [pc, #144]	; (404528 <nm_spi_write_block+0x174>)
  404496:	47a0      	blx	r4
  404498:	481e      	ldr	r0, [pc, #120]	; (404514 <nm_spi_write_block+0x160>)
  40449a:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  40449c:	f240 2226 	movw	r2, #550	; 0x226
  4044a0:	4918      	ldr	r1, [pc, #96]	; (404504 <nm_spi_write_block+0x150>)
  4044a2:	4819      	ldr	r0, [pc, #100]	; (404508 <nm_spi_write_block+0x154>)
  4044a4:	4c19      	ldr	r4, [pc, #100]	; (40450c <nm_spi_write_block+0x158>)
  4044a6:	47a0      	blx	r4
  4044a8:	4820      	ldr	r0, [pc, #128]	; (40452c <nm_spi_write_block+0x178>)
  4044aa:	47a0      	blx	r4
  4044ac:	4819      	ldr	r0, [pc, #100]	; (404514 <nm_spi_write_block+0x160>)
  4044ae:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4044b0:	2400      	movs	r4, #0
  4044b2:	9400      	str	r4, [sp, #0]
  4044b4:	4623      	mov	r3, r4
  4044b6:	4622      	mov	r2, r4
  4044b8:	4621      	mov	r1, r4
  4044ba:	20cf      	movs	r0, #207	; 0xcf
  4044bc:	4d10      	ldr	r5, [pc, #64]	; (404500 <nm_spi_write_block+0x14c>)
  4044be:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4044c0:	4620      	mov	r0, r4
  4044c2:	e793      	b.n	4043ec <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4044c4:	f240 12b1 	movw	r2, #433	; 0x1b1
  4044c8:	4916      	ldr	r1, [pc, #88]	; (404524 <nm_spi_write_block+0x170>)
  4044ca:	480f      	ldr	r0, [pc, #60]	; (404508 <nm_spi_write_block+0x154>)
  4044cc:	4c0f      	ldr	r4, [pc, #60]	; (40450c <nm_spi_write_block+0x158>)
  4044ce:	47a0      	blx	r4
  4044d0:	4817      	ldr	r0, [pc, #92]	; (404530 <nm_spi_write_block+0x17c>)
  4044d2:	47a0      	blx	r4
  4044d4:	480f      	ldr	r0, [pc, #60]	; (404514 <nm_spi_write_block+0x160>)
  4044d6:	47a0      	blx	r4
  4044d8:	e7e0      	b.n	40449c <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4044da:	2102      	movs	r1, #2
  4044dc:	a803      	add	r0, sp, #12
  4044de:	47b8      	blx	r7
  4044e0:	2800      	cmp	r0, #0
  4044e2:	d0bd      	beq.n	404460 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4044e4:	f240 12bb 	movw	r2, #443	; 0x1bb
  4044e8:	490e      	ldr	r1, [pc, #56]	; (404524 <nm_spi_write_block+0x170>)
  4044ea:	4807      	ldr	r0, [pc, #28]	; (404508 <nm_spi_write_block+0x154>)
  4044ec:	4c07      	ldr	r4, [pc, #28]	; (40450c <nm_spi_write_block+0x158>)
  4044ee:	47a0      	blx	r4
  4044f0:	4810      	ldr	r0, [pc, #64]	; (404534 <nm_spi_write_block+0x180>)
  4044f2:	47a0      	blx	r4
  4044f4:	4807      	ldr	r0, [pc, #28]	; (404514 <nm_spi_write_block+0x160>)
  4044f6:	47a0      	blx	r4
  4044f8:	e7d0      	b.n	40449c <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4044fa:	2000      	movs	r0, #0
  4044fc:	e776      	b.n	4043ec <nm_spi_write_block+0x38>
  4044fe:	bf00      	nop
  404500:	00403e45 	.word	0x00403e45
  404504:	00409e64 	.word	0x00409e64
  404508:	00409844 	.word	0x00409844
  40450c:	00406231 	.word	0x00406231
  404510:	0040a108 	.word	0x0040a108
  404514:	00409870 	.word	0x00409870
  404518:	00403c49 	.word	0x00403c49
  40451c:	0040a138 	.word	0x0040a138
  404520:	00403e25 	.word	0x00403e25
  404524:	00409e44 	.word	0x00409e44
  404528:	0040a170 	.word	0x0040a170
  40452c:	0040a214 	.word	0x0040a214
  404530:	0040a1a8 	.word	0x0040a1a8
  404534:	0040a1dc 	.word	0x0040a1dc
  404538:	2040c360 	.word	0x2040c360

0040453c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40453c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404540:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404544:	b194      	cbz	r4, 40456c <Socket_ReadSocketData+0x30>
  404546:	4681      	mov	r9, r0
  404548:	460e      	mov	r6, r1
  40454a:	4692      	mov	sl, r2
  40454c:	4698      	mov	r8, r3
  40454e:	0103      	lsls	r3, r0, #4
  404550:	4922      	ldr	r1, [pc, #136]	; (4045dc <Socket_ReadSocketData+0xa0>)
  404552:	58cb      	ldr	r3, [r1, r3]
  404554:	b153      	cbz	r3, 40456c <Socket_ReadSocketData+0x30>
  404556:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40455a:	889b      	ldrh	r3, [r3, #4]
  40455c:	b29b      	uxth	r3, r3
  40455e:	b12b      	cbz	r3, 40456c <Socket_ReadSocketData+0x30>
  404560:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404564:	7a9b      	ldrb	r3, [r3, #10]
  404566:	b2db      	uxtb	r3, r3
  404568:	2b01      	cmp	r3, #1
  40456a:	d001      	beq.n	404570 <Socket_ReadSocketData+0x34>
  40456c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  404570:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404572:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404576:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4045f4 <Socket_ReadSocketData+0xb8>
  40457a:	e006      	b.n	40458a <Socket_ReadSocketData+0x4e>
  40457c:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  40457e:	2301      	movs	r3, #1
  404580:	e00b      	b.n	40459a <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  404582:	1b64      	subs	r4, r4, r5
  404584:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  404586:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  404588:	b1ec      	cbz	r4, 4045c6 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40458a:	88bb      	ldrh	r3, [r7, #4]
  40458c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  40458e:	b21b      	sxth	r3, r3
  404590:	2b00      	cmp	r3, #0
  404592:	ddf3      	ble.n	40457c <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  404594:	88bd      	ldrh	r5, [r7, #4]
  404596:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  404598:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40459a:	6839      	ldr	r1, [r7, #0]
  40459c:	462a      	mov	r2, r5
  40459e:	4640      	mov	r0, r8
  4045a0:	47d8      	blx	fp
  4045a2:	b990      	cbnz	r0, 4045ca <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4045a4:	683b      	ldr	r3, [r7, #0]
  4045a6:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4045a8:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4045aa:	88f3      	ldrh	r3, [r6, #6]
  4045ac:	1b5b      	subs	r3, r3, r5
  4045ae:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4045b0:	4b0b      	ldr	r3, [pc, #44]	; (4045e0 <Socket_ReadSocketData+0xa4>)
  4045b2:	681b      	ldr	r3, [r3, #0]
  4045b4:	2b00      	cmp	r3, #0
  4045b6:	d0e4      	beq.n	404582 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4045b8:	4b09      	ldr	r3, [pc, #36]	; (4045e0 <Socket_ReadSocketData+0xa4>)
  4045ba:	681b      	ldr	r3, [r3, #0]
  4045bc:	4632      	mov	r2, r6
  4045be:	4651      	mov	r1, sl
  4045c0:	4648      	mov	r0, r9
  4045c2:	4798      	blx	r3
  4045c4:	e7dd      	b.n	404582 <Socket_ReadSocketData+0x46>
  4045c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4045ca:	4806      	ldr	r0, [pc, #24]	; (4045e4 <Socket_ReadSocketData+0xa8>)
  4045cc:	4d06      	ldr	r5, [pc, #24]	; (4045e8 <Socket_ReadSocketData+0xac>)
  4045ce:	47a8      	blx	r5
  4045d0:	4621      	mov	r1, r4
  4045d2:	4806      	ldr	r0, [pc, #24]	; (4045ec <Socket_ReadSocketData+0xb0>)
  4045d4:	47a8      	blx	r5
  4045d6:	4806      	ldr	r0, [pc, #24]	; (4045f0 <Socket_ReadSocketData+0xb4>)
  4045d8:	47a8      	blx	r5
	}
}
  4045da:	e7c7      	b.n	40456c <Socket_ReadSocketData+0x30>
  4045dc:	2040cf58 	.word	0x2040cf58
  4045e0:	2040d008 	.word	0x2040d008
  4045e4:	00409b18 	.word	0x00409b18
  4045e8:	00406231 	.word	0x00406231
  4045ec:	0040a450 	.word	0x0040a450
  4045f0:	00409870 	.word	0x00409870
  4045f4:	00402c75 	.word	0x00402c75

004045f8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4045fa:	b099      	sub	sp, #100	; 0x64
  4045fc:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4045fe:	2841      	cmp	r0, #65	; 0x41
  404600:	d049      	beq.n	404696 <m2m_ip_cb+0x9e>
  404602:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404604:	2842      	cmp	r0, #66	; 0x42
  404606:	d05f      	beq.n	4046c8 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404608:	2843      	cmp	r0, #67	; 0x43
  40460a:	d075      	beq.n	4046f8 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40460c:	2844      	cmp	r0, #68	; 0x44
  40460e:	f000 80b0 	beq.w	404772 <m2m_ip_cb+0x17a>
  404612:	284b      	cmp	r0, #75	; 0x4b
  404614:	f000 80ad 	beq.w	404772 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404618:	284a      	cmp	r0, #74	; 0x4a
  40461a:	f000 80cc 	beq.w	4047b6 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40461e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  404622:	b2db      	uxtb	r3, r3
  404624:	2b07      	cmp	r3, #7
  404626:	f200 80f4 	bhi.w	404812 <m2m_ip_cb+0x21a>
  40462a:	2285      	movs	r2, #133	; 0x85
  40462c:	fa22 f303 	lsr.w	r3, r2, r3
  404630:	f013 0f01 	tst.w	r3, #1
  404634:	f000 80ed 	beq.w	404812 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404638:	2848      	cmp	r0, #72	; 0x48
  40463a:	bf14      	ite	ne
  40463c:	2706      	movne	r7, #6
  40463e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404640:	2300      	movs	r3, #0
  404642:	2210      	movs	r2, #16
  404644:	a903      	add	r1, sp, #12
  404646:	4620      	mov	r0, r4
  404648:	4e93      	ldr	r6, [pc, #588]	; (404898 <m2m_ip_cb+0x2a0>)
  40464a:	47b0      	blx	r6
  40464c:	2800      	cmp	r0, #0
  40464e:	f040 80b0 	bne.w	4047b2 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  404652:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404656:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  40465a:	4a90      	ldr	r2, [pc, #576]	; (40489c <m2m_ip_cb+0x2a4>)
  40465c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404660:	2300      	movs	r3, #0
  404662:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404664:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404668:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  40466c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  404670:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404674:	9e04      	ldr	r6, [sp, #16]
  404676:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404678:	88d2      	ldrh	r2, [r2, #6]
  40467a:	b292      	uxth	r2, r2
  40467c:	4291      	cmp	r1, r2
  40467e:	f000 80ac 	beq.w	4047da <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  404682:	2d10      	cmp	r5, #16
  404684:	f240 8095 	bls.w	4047b2 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  404688:	2301      	movs	r3, #1
  40468a:	2200      	movs	r2, #0
  40468c:	4611      	mov	r1, r2
  40468e:	4610      	mov	r0, r2
  404690:	4c81      	ldr	r4, [pc, #516]	; (404898 <m2m_ip_cb+0x2a0>)
  404692:	47a0      	blx	r4
	{
  404694:	e08d      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404696:	2300      	movs	r3, #0
  404698:	2204      	movs	r2, #4
  40469a:	a907      	add	r1, sp, #28
  40469c:	4620      	mov	r0, r4
  40469e:	4c7e      	ldr	r4, [pc, #504]	; (404898 <m2m_ip_cb+0x2a0>)
  4046a0:	47a0      	blx	r4
  4046a2:	2800      	cmp	r0, #0
  4046a4:	f040 8085 	bne.w	4047b2 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4046a8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4046ac:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4046b0:	4b7b      	ldr	r3, [pc, #492]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046b2:	681b      	ldr	r3, [r3, #0]
  4046b4:	2b00      	cmp	r3, #0
  4046b6:	d07c      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4046b8:	4b79      	ldr	r3, [pc, #484]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046ba:	681b      	ldr	r3, [r3, #0]
  4046bc:	aa03      	add	r2, sp, #12
  4046be:	2101      	movs	r1, #1
  4046c0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4046c4:	4798      	blx	r3
  4046c6:	e074      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4046c8:	2300      	movs	r3, #0
  4046ca:	2204      	movs	r2, #4
  4046cc:	a907      	add	r1, sp, #28
  4046ce:	4620      	mov	r0, r4
  4046d0:	4c71      	ldr	r4, [pc, #452]	; (404898 <m2m_ip_cb+0x2a0>)
  4046d2:	47a0      	blx	r4
  4046d4:	2800      	cmp	r0, #0
  4046d6:	d16c      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4046d8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4046dc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4046e0:	4b6f      	ldr	r3, [pc, #444]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046e2:	681b      	ldr	r3, [r3, #0]
  4046e4:	2b00      	cmp	r3, #0
  4046e6:	d064      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  4046e8:	4b6d      	ldr	r3, [pc, #436]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046ea:	681b      	ldr	r3, [r3, #0]
  4046ec:	aa03      	add	r2, sp, #12
  4046ee:	2102      	movs	r1, #2
  4046f0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4046f4:	4798      	blx	r3
  4046f6:	e05c      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  4046f8:	2300      	movs	r3, #0
  4046fa:	220c      	movs	r2, #12
  4046fc:	eb0d 0102 	add.w	r1, sp, r2
  404700:	4620      	mov	r0, r4
  404702:	4c65      	ldr	r4, [pc, #404]	; (404898 <m2m_ip_cb+0x2a0>)
  404704:	47a0      	blx	r4
  404706:	2800      	cmp	r0, #0
  404708:	d153      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40470a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40470e:	2b00      	cmp	r3, #0
  404710:	db19      	blt.n	404746 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  404712:	4a62      	ldr	r2, [pc, #392]	; (40489c <m2m_ip_cb+0x2a4>)
  404714:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404718:	2100      	movs	r1, #0
  40471a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40471c:	2101      	movs	r1, #1
  40471e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  404720:	4960      	ldr	r1, [pc, #384]	; (4048a4 <m2m_ip_cb+0x2ac>)
  404722:	880a      	ldrh	r2, [r1, #0]
  404724:	3201      	adds	r2, #1
  404726:	b292      	uxth	r2, r2
  404728:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40472a:	880a      	ldrh	r2, [r1, #0]
  40472c:	b292      	uxth	r2, r2
  40472e:	b91a      	cbnz	r2, 404738 <m2m_ip_cb+0x140>
					++gu16SessionID;
  404730:	880a      	ldrh	r2, [r1, #0]
  404732:	3201      	adds	r2, #1
  404734:	b292      	uxth	r2, r2
  404736:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404738:	4a5a      	ldr	r2, [pc, #360]	; (4048a4 <m2m_ip_cb+0x2ac>)
  40473a:	8811      	ldrh	r1, [r2, #0]
  40473c:	b289      	uxth	r1, r1
  40473e:	4a57      	ldr	r2, [pc, #348]	; (40489c <m2m_ip_cb+0x2a4>)
  404740:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404744:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404746:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  40474a:	2302      	movs	r3, #2
  40474c:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404750:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404754:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404758:	9b04      	ldr	r3, [sp, #16]
  40475a:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  40475c:	4b50      	ldr	r3, [pc, #320]	; (4048a0 <m2m_ip_cb+0x2a8>)
  40475e:	681b      	ldr	r3, [r3, #0]
  404760:	b33b      	cbz	r3, 4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  404762:	4b4f      	ldr	r3, [pc, #316]	; (4048a0 <m2m_ip_cb+0x2a8>)
  404764:	681b      	ldr	r3, [r3, #0]
  404766:	aa07      	add	r2, sp, #28
  404768:	2104      	movs	r1, #4
  40476a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40476e:	4798      	blx	r3
  404770:	e01f      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  404772:	2300      	movs	r3, #0
  404774:	2204      	movs	r2, #4
  404776:	a907      	add	r1, sp, #28
  404778:	4620      	mov	r0, r4
  40477a:	4c47      	ldr	r4, [pc, #284]	; (404898 <m2m_ip_cb+0x2a0>)
  40477c:	47a0      	blx	r4
  40477e:	b9c0      	cbnz	r0, 4047b2 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  404780:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404784:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404788:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  40478c:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  404790:	b93b      	cbnz	r3, 4047a2 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  404792:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404796:	3b08      	subs	r3, #8
  404798:	b29b      	uxth	r3, r3
  40479a:	4a40      	ldr	r2, [pc, #256]	; (40489c <m2m_ip_cb+0x2a4>)
  40479c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4047a0:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4047a2:	4b3f      	ldr	r3, [pc, #252]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047a4:	681b      	ldr	r3, [r3, #0]
  4047a6:	b123      	cbz	r3, 4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4047a8:	4b3d      	ldr	r3, [pc, #244]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047aa:	681b      	ldr	r3, [r3, #0]
  4047ac:	aa03      	add	r2, sp, #12
  4047ae:	2105      	movs	r1, #5
  4047b0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4047b2:	b019      	add	sp, #100	; 0x64
  4047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4047b6:	2300      	movs	r3, #0
  4047b8:	2244      	movs	r2, #68	; 0x44
  4047ba:	a907      	add	r1, sp, #28
  4047bc:	4620      	mov	r0, r4
  4047be:	4c36      	ldr	r4, [pc, #216]	; (404898 <m2m_ip_cb+0x2a0>)
  4047c0:	47a0      	blx	r4
  4047c2:	2800      	cmp	r0, #0
  4047c4:	d1f5      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4047c6:	4b38      	ldr	r3, [pc, #224]	; (4048a8 <m2m_ip_cb+0x2b0>)
  4047c8:	681b      	ldr	r3, [r3, #0]
  4047ca:	2b00      	cmp	r3, #0
  4047cc:	d0f1      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4047ce:	4b36      	ldr	r3, [pc, #216]	; (4048a8 <m2m_ip_cb+0x2b0>)
  4047d0:	681b      	ldr	r3, [r3, #0]
  4047d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4047d4:	a807      	add	r0, sp, #28
  4047d6:	4798      	blx	r3
  4047d8:	e7eb      	b.n	4047b2 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4047da:	f1be 0f00 	cmp.w	lr, #0
  4047de:	dd01      	ble.n	4047e4 <m2m_ip_cb+0x1ec>
  4047e0:	45ae      	cmp	lr, r5
  4047e2:	db0d      	blt.n	404800 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4047e4:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4047e8:	2300      	movs	r3, #0
  4047ea:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4047ec:	4b2c      	ldr	r3, [pc, #176]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047ee:	681b      	ldr	r3, [r3, #0]
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	d0de      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4047f4:	4b2a      	ldr	r3, [pc, #168]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047f6:	681b      	ldr	r3, [r3, #0]
  4047f8:	aa07      	add	r2, sp, #28
  4047fa:	4639      	mov	r1, r7
  4047fc:	4798      	blx	r3
  4047fe:	e7d8      	b.n	4047b2 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404800:	fa1f f28e 	uxth.w	r2, lr
  404804:	9200      	str	r2, [sp, #0]
  404806:	4423      	add	r3, r4
  404808:	463a      	mov	r2, r7
  40480a:	a907      	add	r1, sp, #28
  40480c:	4c27      	ldr	r4, [pc, #156]	; (4048ac <m2m_ip_cb+0x2b4>)
  40480e:	47a0      	blx	r4
  404810:	e7cf      	b.n	4047b2 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404812:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404816:	2b45      	cmp	r3, #69	; 0x45
  404818:	d019      	beq.n	40484e <m2m_ip_cb+0x256>
  40481a:	284c      	cmp	r0, #76	; 0x4c
  40481c:	d017      	beq.n	40484e <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40481e:	2852      	cmp	r0, #82	; 0x52
  404820:	d1c7      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  404822:	2301      	movs	r3, #1
  404824:	2214      	movs	r2, #20
  404826:	a907      	add	r1, sp, #28
  404828:	4620      	mov	r0, r4
  40482a:	4c1b      	ldr	r4, [pc, #108]	; (404898 <m2m_ip_cb+0x2a0>)
  40482c:	47a0      	blx	r4
  40482e:	2800      	cmp	r0, #0
  404830:	d1bf      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  404832:	4b1f      	ldr	r3, [pc, #124]	; (4048b0 <m2m_ip_cb+0x2b8>)
  404834:	9a08      	ldr	r2, [sp, #32]
  404836:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404838:	681b      	ldr	r3, [r3, #0]
  40483a:	2b00      	cmp	r3, #0
  40483c:	d0b9      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40483e:	4b1c      	ldr	r3, [pc, #112]	; (4048b0 <m2m_ip_cb+0x2b8>)
  404840:	681b      	ldr	r3, [r3, #0]
  404842:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404846:	9909      	ldr	r1, [sp, #36]	; 0x24
  404848:	9807      	ldr	r0, [sp, #28]
  40484a:	4798      	blx	r3
}
  40484c:	e7b1      	b.n	4047b2 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40484e:	2847      	cmp	r0, #71	; 0x47
  404850:	bf14      	ite	ne
  404852:	2507      	movne	r5, #7
  404854:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404856:	2300      	movs	r3, #0
  404858:	2208      	movs	r2, #8
  40485a:	a907      	add	r1, sp, #28
  40485c:	4620      	mov	r0, r4
  40485e:	4c0e      	ldr	r4, [pc, #56]	; (404898 <m2m_ip_cb+0x2a0>)
  404860:	47a0      	blx	r4
  404862:	2800      	cmp	r0, #0
  404864:	d1a5      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  404866:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40486a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40486e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404872:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404876:	4b09      	ldr	r3, [pc, #36]	; (40489c <m2m_ip_cb+0x2a4>)
  404878:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40487c:	88db      	ldrh	r3, [r3, #6]
  40487e:	b29b      	uxth	r3, r3
  404880:	429a      	cmp	r2, r3
  404882:	d196      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  404884:	4b06      	ldr	r3, [pc, #24]	; (4048a0 <m2m_ip_cb+0x2a8>)
  404886:	681b      	ldr	r3, [r3, #0]
  404888:	2b00      	cmp	r3, #0
  40488a:	d092      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40488c:	4b04      	ldr	r3, [pc, #16]	; (4048a0 <m2m_ip_cb+0x2a8>)
  40488e:	681b      	ldr	r3, [r3, #0]
  404890:	aa03      	add	r2, sp, #12
  404892:	4629      	mov	r1, r5
  404894:	4798      	blx	r3
	{
  404896:	e78c      	b.n	4047b2 <m2m_ip_cb+0x1ba>
  404898:	00402c75 	.word	0x00402c75
  40489c:	2040cf58 	.word	0x2040cf58
  4048a0:	2040d008 	.word	0x2040d008
  4048a4:	2040c362 	.word	0x2040c362
  4048a8:	2040d010 	.word	0x2040d010
  4048ac:	0040453d 	.word	0x0040453d
  4048b0:	2040d00c 	.word	0x2040d00c

004048b4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4048b4:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4048b6:	4b0a      	ldr	r3, [pc, #40]	; (4048e0 <socketInit+0x2c>)
  4048b8:	781b      	ldrb	r3, [r3, #0]
  4048ba:	b103      	cbz	r3, 4048be <socketInit+0xa>
  4048bc:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4048be:	22b0      	movs	r2, #176	; 0xb0
  4048c0:	2100      	movs	r1, #0
  4048c2:	4808      	ldr	r0, [pc, #32]	; (4048e4 <socketInit+0x30>)
  4048c4:	4b08      	ldr	r3, [pc, #32]	; (4048e8 <socketInit+0x34>)
  4048c6:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4048c8:	4908      	ldr	r1, [pc, #32]	; (4048ec <socketInit+0x38>)
  4048ca:	2002      	movs	r0, #2
  4048cc:	4b08      	ldr	r3, [pc, #32]	; (4048f0 <socketInit+0x3c>)
  4048ce:	4798      	blx	r3
		gbSocketInit=1;
  4048d0:	2201      	movs	r2, #1
  4048d2:	4b03      	ldr	r3, [pc, #12]	; (4048e0 <socketInit+0x2c>)
  4048d4:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4048d6:	2200      	movs	r2, #0
  4048d8:	4b06      	ldr	r3, [pc, #24]	; (4048f4 <socketInit+0x40>)
  4048da:	801a      	strh	r2, [r3, #0]
	}
}
  4048dc:	e7ee      	b.n	4048bc <socketInit+0x8>
  4048de:	bf00      	nop
  4048e0:	2040c361 	.word	0x2040c361
  4048e4:	2040cf58 	.word	0x2040cf58
  4048e8:	00402621 	.word	0x00402621
  4048ec:	004045f9 	.word	0x004045f9
  4048f0:	00402d89 	.word	0x00402d89
  4048f4:	2040c362 	.word	0x2040c362

004048f8 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4048f8:	4b02      	ldr	r3, [pc, #8]	; (404904 <registerSocketCallback+0xc>)
  4048fa:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4048fc:	4b02      	ldr	r3, [pc, #8]	; (404908 <registerSocketCallback+0x10>)
  4048fe:	6019      	str	r1, [r3, #0]
  404900:	4770      	bx	lr
  404902:	bf00      	nop
  404904:	2040d008 	.word	0x2040d008
  404908:	2040d010 	.word	0x2040d010

0040490c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40490c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40490e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404910:	2802      	cmp	r0, #2
  404912:	d158      	bne.n	4049c6 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404914:	2901      	cmp	r1, #1
  404916:	d059      	beq.n	4049cc <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404918:	2902      	cmp	r1, #2
  40491a:	d116      	bne.n	40494a <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  40491c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40491e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404920:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404922:	4b2e      	ldr	r3, [pc, #184]	; (4049dc <socket+0xd0>)
  404924:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404928:	7a9b      	ldrb	r3, [r3, #10]
  40492a:	2b00      	cmp	r3, #0
  40492c:	d051      	beq.n	4049d2 <socket+0xc6>
  40492e:	1c63      	adds	r3, r4, #1
  404930:	b2db      	uxtb	r3, r3
  404932:	4f2a      	ldr	r7, [pc, #168]	; (4049dc <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404934:	b2dc      	uxtb	r4, r3
  404936:	42b4      	cmp	r4, r6
  404938:	d240      	bcs.n	4049bc <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  40493a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  40493c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  404940:	7a89      	ldrb	r1, [r1, #10]
  404942:	1c58      	adds	r0, r3, #1
  404944:	b121      	cbz	r1, 404950 <socket+0x44>
  404946:	4603      	mov	r3, r0
  404948:	e7f4      	b.n	404934 <socket+0x28>
			return sock;
  40494a:	f04f 34ff 	mov.w	r4, #4294967295
  40494e:	e037      	b.n	4049c0 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  404950:	4822      	ldr	r0, [pc, #136]	; (4049dc <socket+0xd0>)
  404952:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404956:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404958:	2210      	movs	r2, #16
  40495a:	2100      	movs	r1, #0
  40495c:	4b20      	ldr	r3, [pc, #128]	; (4049e0 <socket+0xd4>)
  40495e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  404960:	4b1e      	ldr	r3, [pc, #120]	; (4049dc <socket+0xd0>)
  404962:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404966:	2201      	movs	r2, #1
  404968:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40496a:	4a1e      	ldr	r2, [pc, #120]	; (4049e4 <socket+0xd8>)
  40496c:	8813      	ldrh	r3, [r2, #0]
  40496e:	3301      	adds	r3, #1
  404970:	b29b      	uxth	r3, r3
  404972:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404974:	8813      	ldrh	r3, [r2, #0]
  404976:	b29b      	uxth	r3, r3
  404978:	b91b      	cbnz	r3, 404982 <socket+0x76>
					++gu16SessionID;
  40497a:	8813      	ldrh	r3, [r2, #0]
  40497c:	3301      	adds	r3, #1
  40497e:	b29b      	uxth	r3, r3
  404980:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  404982:	4b18      	ldr	r3, [pc, #96]	; (4049e4 <socket+0xd8>)
  404984:	881a      	ldrh	r2, [r3, #0]
  404986:	b292      	uxth	r2, r2
  404988:	4b14      	ldr	r3, [pc, #80]	; (4049dc <socket+0xd0>)
  40498a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40498e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404990:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  404992:	f016 0f01 	tst.w	r6, #1
  404996:	d013      	beq.n	4049c0 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404998:	aa06      	add	r2, sp, #24
  40499a:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40499e:	4b0f      	ldr	r3, [pc, #60]	; (4049dc <socket+0xd0>)
  4049a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4049a4:	2321      	movs	r3, #33	; 0x21
  4049a6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4049a8:	2300      	movs	r3, #0
  4049aa:	9302      	str	r3, [sp, #8]
  4049ac:	9301      	str	r3, [sp, #4]
  4049ae:	9300      	str	r3, [sp, #0]
  4049b0:	2304      	movs	r3, #4
  4049b2:	2150      	movs	r1, #80	; 0x50
  4049b4:	2002      	movs	r0, #2
  4049b6:	4d0c      	ldr	r5, [pc, #48]	; (4049e8 <socket+0xdc>)
  4049b8:	47a8      	blx	r5
  4049ba:	e001      	b.n	4049c0 <socket+0xb4>
	SOCKET		sock = -1;
  4049bc:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4049c0:	4620      	mov	r0, r4
  4049c2:	b007      	add	sp, #28
  4049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4049c6:	f04f 34ff 	mov.w	r4, #4294967295
  4049ca:	e7f9      	b.n	4049c0 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  4049cc:	2607      	movs	r6, #7
			u8Count = 0;
  4049ce:	2400      	movs	r4, #0
  4049d0:	e7a6      	b.n	404920 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  4049d2:	4802      	ldr	r0, [pc, #8]	; (4049dc <socket+0xd0>)
  4049d4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4049d8:	e7bd      	b.n	404956 <socket+0x4a>
  4049da:	bf00      	nop
  4049dc:	2040cf58 	.word	0x2040cf58
  4049e0:	00402621 	.word	0x00402621
  4049e4:	2040c362 	.word	0x2040c362
  4049e8:	00402785 	.word	0x00402785

004049ec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4049ec:	b530      	push	{r4, r5, lr}
  4049ee:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4049f0:	1e04      	subs	r4, r0, #0
  4049f2:	db36      	blt.n	404a62 <connect+0x76>
  4049f4:	2900      	cmp	r1, #0
  4049f6:	d034      	beq.n	404a62 <connect+0x76>
  4049f8:	4b1d      	ldr	r3, [pc, #116]	; (404a70 <connect+0x84>)
  4049fa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4049fe:	7a9b      	ldrb	r3, [r3, #10]
  404a00:	b2db      	uxtb	r3, r3
  404a02:	2a00      	cmp	r2, #0
  404a04:	d030      	beq.n	404a68 <connect+0x7c>
  404a06:	2b01      	cmp	r3, #1
  404a08:	d12e      	bne.n	404a68 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404a0a:	4b19      	ldr	r3, [pc, #100]	; (404a70 <connect+0x84>)
  404a0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404a10:	7adb      	ldrb	r3, [r3, #11]
  404a12:	f013 0f01 	tst.w	r3, #1
  404a16:	d022      	beq.n	404a5e <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404a18:	4b15      	ldr	r3, [pc, #84]	; (404a70 <connect+0x84>)
  404a1a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404a1e:	7adb      	ldrb	r3, [r3, #11]
  404a20:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404a24:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404a26:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404a2a:	2208      	movs	r2, #8
  404a2c:	a805      	add	r0, sp, #20
  404a2e:	4b11      	ldr	r3, [pc, #68]	; (404a74 <connect+0x88>)
  404a30:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404a32:	480f      	ldr	r0, [pc, #60]	; (404a70 <connect+0x84>)
  404a34:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404a38:	88c3      	ldrh	r3, [r0, #6]
  404a3a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404a3e:	2300      	movs	r3, #0
  404a40:	9302      	str	r3, [sp, #8]
  404a42:	9301      	str	r3, [sp, #4]
  404a44:	9300      	str	r3, [sp, #0]
  404a46:	230c      	movs	r3, #12
  404a48:	aa05      	add	r2, sp, #20
  404a4a:	4629      	mov	r1, r5
  404a4c:	2002      	movs	r0, #2
  404a4e:	4c0a      	ldr	r4, [pc, #40]	; (404a78 <connect+0x8c>)
  404a50:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404a52:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404a54:	bf18      	it	ne
  404a56:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404a5a:	b009      	add	sp, #36	; 0x24
  404a5c:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404a5e:	2544      	movs	r5, #68	; 0x44
  404a60:	e7e1      	b.n	404a26 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404a62:	f06f 0005 	mvn.w	r0, #5
  404a66:	e7f8      	b.n	404a5a <connect+0x6e>
  404a68:	f06f 0005 	mvn.w	r0, #5
  404a6c:	e7f5      	b.n	404a5a <connect+0x6e>
  404a6e:	bf00      	nop
  404a70:	2040cf58 	.word	0x2040cf58
  404a74:	0040260d 	.word	0x0040260d
  404a78:	00402785 	.word	0x00402785

00404a7c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404a7c:	b530      	push	{r4, r5, lr}
  404a7e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404a80:	460c      	mov	r4, r1
  404a82:	3100      	adds	r1, #0
  404a84:	bf18      	it	ne
  404a86:	2101      	movne	r1, #1
  404a88:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404a8c:	bf88      	it	hi
  404a8e:	2100      	movhi	r1, #0
  404a90:	2900      	cmp	r1, #0
  404a92:	d037      	beq.n	404b04 <send+0x88>
  404a94:	2800      	cmp	r0, #0
  404a96:	db35      	blt.n	404b04 <send+0x88>
  404a98:	4b1d      	ldr	r3, [pc, #116]	; (404b10 <send+0x94>)
  404a9a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a9e:	7a9b      	ldrb	r3, [r3, #10]
  404aa0:	b2db      	uxtb	r3, r3
  404aa2:	2b01      	cmp	r3, #1
  404aa4:	d131      	bne.n	404b0a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404aa6:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404aaa:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404aae:	4b18      	ldr	r3, [pc, #96]	; (404b10 <send+0x94>)
  404ab0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ab4:	88db      	ldrh	r3, [r3, #6]
  404ab6:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404aba:	2807      	cmp	r0, #7
  404abc:	bfb4      	ite	lt
  404abe:	2550      	movlt	r5, #80	; 0x50
  404ac0:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404ac2:	4b13      	ldr	r3, [pc, #76]	; (404b10 <send+0x94>)
  404ac4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ac8:	7adb      	ldrb	r3, [r3, #11]
  404aca:	f013 0f01 	tst.w	r3, #1
  404ace:	d017      	beq.n	404b00 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404ad0:	4b0f      	ldr	r3, [pc, #60]	; (404b10 <send+0x94>)
  404ad2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404ad6:	8905      	ldrh	r5, [r0, #8]
  404ad8:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404ada:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404adc:	9502      	str	r5, [sp, #8]
  404ade:	9201      	str	r2, [sp, #4]
  404ae0:	9400      	str	r4, [sp, #0]
  404ae2:	2310      	movs	r3, #16
  404ae4:	eb0d 0203 	add.w	r2, sp, r3
  404ae8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404aec:	2002      	movs	r0, #2
  404aee:	4c09      	ldr	r4, [pc, #36]	; (404b14 <send+0x98>)
  404af0:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404af2:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404af4:	bf0c      	ite	eq
  404af6:	2000      	moveq	r0, #0
  404af8:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404afc:	b009      	add	sp, #36	; 0x24
  404afe:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404b00:	2145      	movs	r1, #69	; 0x45
  404b02:	e7eb      	b.n	404adc <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b04:	f06f 0005 	mvn.w	r0, #5
  404b08:	e7f8      	b.n	404afc <send+0x80>
  404b0a:	f06f 0005 	mvn.w	r0, #5
  404b0e:	e7f5      	b.n	404afc <send+0x80>
  404b10:	2040cf58 	.word	0x2040cf58
  404b14:	00402785 	.word	0x00402785

00404b18 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404b18:	2900      	cmp	r1, #0
  404b1a:	bf18      	it	ne
  404b1c:	2a00      	cmpne	r2, #0
  404b1e:	d044      	beq.n	404baa <recv+0x92>
{
  404b20:	b570      	push	{r4, r5, r6, lr}
  404b22:	b086      	sub	sp, #24
  404b24:	460e      	mov	r6, r1
  404b26:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404b28:	2800      	cmp	r0, #0
  404b2a:	db36      	blt.n	404b9a <recv+0x82>
  404b2c:	4a20      	ldr	r2, [pc, #128]	; (404bb0 <recv+0x98>)
  404b2e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404b32:	7a92      	ldrb	r2, [r2, #10]
  404b34:	b2d2      	uxtb	r2, r2
  404b36:	2a01      	cmp	r2, #1
  404b38:	d132      	bne.n	404ba0 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404b3a:	4c1d      	ldr	r4, [pc, #116]	; (404bb0 <recv+0x98>)
  404b3c:	0101      	lsls	r1, r0, #4
  404b3e:	1862      	adds	r2, r4, r1
  404b40:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404b42:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404b44:	7b12      	ldrb	r2, [r2, #12]
  404b46:	2a00      	cmp	r2, #0
  404b48:	d12d      	bne.n	404ba6 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404b4a:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  404b4e:	2101      	movs	r1, #1
  404b50:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404b52:	7ad2      	ldrb	r2, [r2, #11]
  404b54:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404b56:	2a00      	cmp	r2, #0
  404b58:	bf0c      	ite	eq
  404b5a:	2146      	moveq	r1, #70	; 0x46
  404b5c:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404b5e:	b9d3      	cbnz	r3, 404b96 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404b60:	f04f 33ff 	mov.w	r3, #4294967295
  404b64:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404b66:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404b6a:	4b11      	ldr	r3, [pc, #68]	; (404bb0 <recv+0x98>)
  404b6c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404b70:	88c3      	ldrh	r3, [r0, #6]
  404b72:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404b76:	2300      	movs	r3, #0
  404b78:	9302      	str	r3, [sp, #8]
  404b7a:	9301      	str	r3, [sp, #4]
  404b7c:	9300      	str	r3, [sp, #0]
  404b7e:	2308      	movs	r3, #8
  404b80:	aa04      	add	r2, sp, #16
  404b82:	2002      	movs	r0, #2
  404b84:	4c0b      	ldr	r4, [pc, #44]	; (404bb4 <recv+0x9c>)
  404b86:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404b88:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404b8a:	bf0c      	ite	eq
  404b8c:	2000      	moveq	r0, #0
  404b8e:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  404b92:	b006      	add	sp, #24
  404b94:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404b96:	9304      	str	r3, [sp, #16]
  404b98:	e7e5      	b.n	404b66 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b9a:	f06f 0005 	mvn.w	r0, #5
  404b9e:	e7f8      	b.n	404b92 <recv+0x7a>
  404ba0:	f06f 0005 	mvn.w	r0, #5
  404ba4:	e7f5      	b.n	404b92 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404ba6:	2000      	movs	r0, #0
  404ba8:	e7f3      	b.n	404b92 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404baa:	f06f 0005 	mvn.w	r0, #5
}
  404bae:	4770      	bx	lr
  404bb0:	2040cf58 	.word	0x2040cf58
  404bb4:	00402785 	.word	0x00402785

00404bb8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404bb8:	b530      	push	{r4, r5, lr}
  404bba:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404bbc:	1e04      	subs	r4, r0, #0
  404bbe:	db2f      	blt.n	404c20 <close+0x68>
  404bc0:	4b1a      	ldr	r3, [pc, #104]	; (404c2c <close+0x74>)
  404bc2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404bc6:	7a9b      	ldrb	r3, [r3, #10]
  404bc8:	b2db      	uxtb	r3, r3
  404bca:	2b01      	cmp	r3, #1
  404bcc:	d12b      	bne.n	404c26 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404bce:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404bd2:	4b16      	ldr	r3, [pc, #88]	; (404c2c <close+0x74>)
  404bd4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404bd8:	88da      	ldrh	r2, [r3, #6]
  404bda:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404bde:	2200      	movs	r2, #0
  404be0:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404be2:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404be4:	7adb      	ldrb	r3, [r3, #11]
  404be6:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404bea:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404bec:	9202      	str	r2, [sp, #8]
  404bee:	9201      	str	r2, [sp, #4]
  404bf0:	9200      	str	r2, [sp, #0]
  404bf2:	f04f 0304 	mov.w	r3, #4
  404bf6:	aa05      	add	r2, sp, #20
  404bf8:	bf0c      	ite	eq
  404bfa:	2149      	moveq	r1, #73	; 0x49
  404bfc:	214e      	movne	r1, #78	; 0x4e
  404bfe:	2002      	movs	r0, #2
  404c00:	4d0b      	ldr	r5, [pc, #44]	; (404c30 <close+0x78>)
  404c02:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404c04:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404c06:	bf18      	it	ne
  404c08:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404c0c:	2210      	movs	r2, #16
  404c0e:	2100      	movs	r1, #0
  404c10:	4806      	ldr	r0, [pc, #24]	; (404c2c <close+0x74>)
  404c12:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404c16:	4b07      	ldr	r3, [pc, #28]	; (404c34 <close+0x7c>)
  404c18:	4798      	blx	r3
	}
	return s8Ret;
}
  404c1a:	4628      	mov	r0, r5
  404c1c:	b007      	add	sp, #28
  404c1e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404c20:	f06f 0505 	mvn.w	r5, #5
  404c24:	e7f9      	b.n	404c1a <close+0x62>
  404c26:	f06f 0505 	mvn.w	r5, #5
  404c2a:	e7f6      	b.n	404c1a <close+0x62>
  404c2c:	2040cf58 	.word	0x2040cf58
  404c30:	00402785 	.word	0x00402785
  404c34:	00402621 	.word	0x00402621

00404c38 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404c38:	b570      	push	{r4, r5, r6, lr}
  404c3a:	b082      	sub	sp, #8
  404c3c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404c3e:	4b2b      	ldr	r3, [pc, #172]	; (404cec <spi_flash_enable+0xb4>)
  404c40:	4798      	blx	r3
  404c42:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404c46:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404c4a:	d203      	bcs.n	404c54 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404c4c:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404c4e:	4620      	mov	r0, r4
  404c50:	b002      	add	sp, #8
  404c52:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404c54:	a901      	add	r1, sp, #4
  404c56:	f241 4010 	movw	r0, #5136	; 0x1410
  404c5a:	4b25      	ldr	r3, [pc, #148]	; (404cf0 <spi_flash_enable+0xb8>)
  404c5c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404c5e:	4604      	mov	r4, r0
  404c60:	2800      	cmp	r0, #0
  404c62:	d1f4      	bne.n	404c4e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404c64:	4b23      	ldr	r3, [pc, #140]	; (404cf4 <spi_flash_enable+0xbc>)
  404c66:	9a01      	ldr	r2, [sp, #4]
  404c68:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404c6a:	4923      	ldr	r1, [pc, #140]	; (404cf8 <spi_flash_enable+0xc0>)
  404c6c:	4319      	orrs	r1, r3
  404c6e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404c70:	f241 4010 	movw	r0, #5136	; 0x1410
  404c74:	4b21      	ldr	r3, [pc, #132]	; (404cfc <spi_flash_enable+0xc4>)
  404c76:	4798      	blx	r3
		if(enable) {
  404c78:	b305      	cbz	r5, 404cbc <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404c7a:	2100      	movs	r1, #0
  404c7c:	4820      	ldr	r0, [pc, #128]	; (404d00 <spi_flash_enable+0xc8>)
  404c7e:	4d1f      	ldr	r5, [pc, #124]	; (404cfc <spi_flash_enable+0xc4>)
  404c80:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404c82:	21ab      	movs	r1, #171	; 0xab
  404c84:	481f      	ldr	r0, [pc, #124]	; (404d04 <spi_flash_enable+0xcc>)
  404c86:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404c88:	2101      	movs	r1, #1
  404c8a:	481f      	ldr	r0, [pc, #124]	; (404d08 <spi_flash_enable+0xd0>)
  404c8c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404c8e:	2100      	movs	r1, #0
  404c90:	481e      	ldr	r0, [pc, #120]	; (404d0c <spi_flash_enable+0xd4>)
  404c92:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404c94:	2181      	movs	r1, #129	; 0x81
  404c96:	481e      	ldr	r0, [pc, #120]	; (404d10 <spi_flash_enable+0xd8>)
  404c98:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404c9a:	4e1e      	ldr	r6, [pc, #120]	; (404d14 <spi_flash_enable+0xdc>)
  404c9c:	4d1e      	ldr	r5, [pc, #120]	; (404d18 <spi_flash_enable+0xe0>)
  404c9e:	4630      	mov	r0, r6
  404ca0:	47a8      	blx	r5
  404ca2:	2801      	cmp	r0, #1
  404ca4:	d1fb      	bne.n	404c9e <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404ca6:	4913      	ldr	r1, [pc, #76]	; (404cf4 <spi_flash_enable+0xbc>)
  404ca8:	9b01      	ldr	r3, [sp, #4]
  404caa:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404cac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404cb0:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404cb2:	f241 4010 	movw	r0, #5136	; 0x1410
  404cb6:	4b11      	ldr	r3, [pc, #68]	; (404cfc <spi_flash_enable+0xc4>)
  404cb8:	4798      	blx	r3
  404cba:	e7c8      	b.n	404c4e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404cbc:	2100      	movs	r1, #0
  404cbe:	4810      	ldr	r0, [pc, #64]	; (404d00 <spi_flash_enable+0xc8>)
  404cc0:	4d0e      	ldr	r5, [pc, #56]	; (404cfc <spi_flash_enable+0xc4>)
  404cc2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404cc4:	21b9      	movs	r1, #185	; 0xb9
  404cc6:	480f      	ldr	r0, [pc, #60]	; (404d04 <spi_flash_enable+0xcc>)
  404cc8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404cca:	2101      	movs	r1, #1
  404ccc:	480e      	ldr	r0, [pc, #56]	; (404d08 <spi_flash_enable+0xd0>)
  404cce:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404cd0:	2100      	movs	r1, #0
  404cd2:	480e      	ldr	r0, [pc, #56]	; (404d0c <spi_flash_enable+0xd4>)
  404cd4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404cd6:	2181      	movs	r1, #129	; 0x81
  404cd8:	480d      	ldr	r0, [pc, #52]	; (404d10 <spi_flash_enable+0xd8>)
  404cda:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404cdc:	4e0d      	ldr	r6, [pc, #52]	; (404d14 <spi_flash_enable+0xdc>)
  404cde:	4d0e      	ldr	r5, [pc, #56]	; (404d18 <spi_flash_enable+0xe0>)
  404ce0:	4630      	mov	r0, r6
  404ce2:	47a8      	blx	r5
  404ce4:	2801      	cmp	r0, #1
  404ce6:	d1fb      	bne.n	404ce0 <spi_flash_enable+0xa8>
  404ce8:	e7dd      	b.n	404ca6 <spi_flash_enable+0x6e>
  404cea:	bf00      	nop
  404cec:	0040364d 	.word	0x0040364d
  404cf0:	00403949 	.word	0x00403949
  404cf4:	f8888fff 	.word	0xf8888fff
  404cf8:	01111000 	.word	0x01111000
  404cfc:	00403955 	.word	0x00403955
  404d00:	00010208 	.word	0x00010208
  404d04:	0001020c 	.word	0x0001020c
  404d08:	00010214 	.word	0x00010214
  404d0c:	0001021c 	.word	0x0001021c
  404d10:	00010204 	.word	0x00010204
  404d14:	00010218 	.word	0x00010218
  404d18:	0040393d 	.word	0x0040393d

00404d1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404d1c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404d1e:	4810      	ldr	r0, [pc, #64]	; (404d60 <sysclk_init+0x44>)
  404d20:	4b10      	ldr	r3, [pc, #64]	; (404d64 <sysclk_init+0x48>)
  404d22:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404d24:	213e      	movs	r1, #62	; 0x3e
  404d26:	2000      	movs	r0, #0
  404d28:	4b0f      	ldr	r3, [pc, #60]	; (404d68 <sysclk_init+0x4c>)
  404d2a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404d2c:	4c0f      	ldr	r4, [pc, #60]	; (404d6c <sysclk_init+0x50>)
  404d2e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404d30:	2800      	cmp	r0, #0
  404d32:	d0fc      	beq.n	404d2e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404d34:	4b0e      	ldr	r3, [pc, #56]	; (404d70 <sysclk_init+0x54>)
  404d36:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404d38:	4a0e      	ldr	r2, [pc, #56]	; (404d74 <sysclk_init+0x58>)
  404d3a:	4b0f      	ldr	r3, [pc, #60]	; (404d78 <sysclk_init+0x5c>)
  404d3c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  404d3e:	4c0f      	ldr	r4, [pc, #60]	; (404d7c <sysclk_init+0x60>)
  404d40:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404d42:	2800      	cmp	r0, #0
  404d44:	d0fc      	beq.n	404d40 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404d46:	2002      	movs	r0, #2
  404d48:	4b0d      	ldr	r3, [pc, #52]	; (404d80 <sysclk_init+0x64>)
  404d4a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404d4c:	2000      	movs	r0, #0
  404d4e:	4b0d      	ldr	r3, [pc, #52]	; (404d84 <sysclk_init+0x68>)
  404d50:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404d52:	4b0d      	ldr	r3, [pc, #52]	; (404d88 <sysclk_init+0x6c>)
  404d54:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404d56:	4802      	ldr	r0, [pc, #8]	; (404d60 <sysclk_init+0x44>)
  404d58:	4b02      	ldr	r3, [pc, #8]	; (404d64 <sysclk_init+0x48>)
  404d5a:	4798      	blx	r3
  404d5c:	bd10      	pop	{r4, pc}
  404d5e:	bf00      	nop
  404d60:	11e1a300 	.word	0x11e1a300
  404d64:	00405a69 	.word	0x00405a69
  404d68:	00405531 	.word	0x00405531
  404d6c:	00405585 	.word	0x00405585
  404d70:	00405595 	.word	0x00405595
  404d74:	20183f01 	.word	0x20183f01
  404d78:	400e0600 	.word	0x400e0600
  404d7c:	004055a5 	.word	0x004055a5
  404d80:	00405495 	.word	0x00405495
  404d84:	004054cd 	.word	0x004054cd
  404d88:	0040595d 	.word	0x0040595d

00404d8c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404d90:	b980      	cbnz	r0, 404db4 <_read+0x28>
  404d92:	460c      	mov	r4, r1
  404d94:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404d96:	2a00      	cmp	r2, #0
  404d98:	dd0f      	ble.n	404dba <_read+0x2e>
  404d9a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404d9c:	4e08      	ldr	r6, [pc, #32]	; (404dc0 <_read+0x34>)
  404d9e:	4d09      	ldr	r5, [pc, #36]	; (404dc4 <_read+0x38>)
  404da0:	6830      	ldr	r0, [r6, #0]
  404da2:	4621      	mov	r1, r4
  404da4:	682b      	ldr	r3, [r5, #0]
  404da6:	4798      	blx	r3
		ptr++;
  404da8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404daa:	42bc      	cmp	r4, r7
  404dac:	d1f8      	bne.n	404da0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404dae:	4640      	mov	r0, r8
  404db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404db4:	f04f 38ff 	mov.w	r8, #4294967295
  404db8:	e7f9      	b.n	404dae <_read+0x22>
	for (; len > 0; --len) {
  404dba:	4680      	mov	r8, r0
  404dbc:	e7f7      	b.n	404dae <_read+0x22>
  404dbe:	bf00      	nop
  404dc0:	2040d01c 	.word	0x2040d01c
  404dc4:	2040d014 	.word	0x2040d014

00404dc8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404dc8:	3801      	subs	r0, #1
  404dca:	2802      	cmp	r0, #2
  404dcc:	d815      	bhi.n	404dfa <_write+0x32>
{
  404dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dd2:	460e      	mov	r6, r1
  404dd4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404dd6:	b19a      	cbz	r2, 404e00 <_write+0x38>
  404dd8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404dda:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404e14 <_write+0x4c>
  404dde:	4f0c      	ldr	r7, [pc, #48]	; (404e10 <_write+0x48>)
  404de0:	f8d8 0000 	ldr.w	r0, [r8]
  404de4:	f815 1b01 	ldrb.w	r1, [r5], #1
  404de8:	683b      	ldr	r3, [r7, #0]
  404dea:	4798      	blx	r3
  404dec:	2800      	cmp	r0, #0
  404dee:	db0a      	blt.n	404e06 <_write+0x3e>
  404df0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404df2:	3c01      	subs	r4, #1
  404df4:	d1f4      	bne.n	404de0 <_write+0x18>
  404df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404dfa:	f04f 30ff 	mov.w	r0, #4294967295
  404dfe:	4770      	bx	lr
	for (; len != 0; --len) {
  404e00:	4610      	mov	r0, r2
  404e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404e06:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e0e:	bf00      	nop
  404e10:	2040d018 	.word	0x2040d018
  404e14:	2040d01c 	.word	0x2040d01c

00404e18 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404e1e:	4b5c      	ldr	r3, [pc, #368]	; (404f90 <board_init+0x178>)
  404e20:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e26:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404e2a:	4b5a      	ldr	r3, [pc, #360]	; (404f94 <board_init+0x17c>)
  404e2c:	2200      	movs	r2, #0
  404e2e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404e32:	695a      	ldr	r2, [r3, #20]
  404e34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404e38:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e3e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404e42:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404e46:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404e4a:	f007 0007 	and.w	r0, r7, #7
  404e4e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404e50:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404e54:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404e58:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404e5c:	f3bf 8f4f 	dsb	sy
  404e60:	f04f 34ff 	mov.w	r4, #4294967295
  404e64:	fa04 fc00 	lsl.w	ip, r4, r0
  404e68:	fa06 f000 	lsl.w	r0, r6, r0
  404e6c:	fa04 f40e 	lsl.w	r4, r4, lr
  404e70:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404e74:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404e76:	463a      	mov	r2, r7
  404e78:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404e7a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404e7e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404e82:	3a01      	subs	r2, #1
  404e84:	4423      	add	r3, r4
  404e86:	f1b2 3fff 	cmp.w	r2, #4294967295
  404e8a:	d1f6      	bne.n	404e7a <board_init+0x62>
        } while(sets--);
  404e8c:	3e01      	subs	r6, #1
  404e8e:	4460      	add	r0, ip
  404e90:	f1b6 3fff 	cmp.w	r6, #4294967295
  404e94:	d1ef      	bne.n	404e76 <board_init+0x5e>
  404e96:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404e9a:	4b3e      	ldr	r3, [pc, #248]	; (404f94 <board_init+0x17c>)
  404e9c:	695a      	ldr	r2, [r3, #20]
  404e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404ea2:	615a      	str	r2, [r3, #20]
  404ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ea8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404eac:	4a3a      	ldr	r2, [pc, #232]	; (404f98 <board_init+0x180>)
  404eae:	493b      	ldr	r1, [pc, #236]	; (404f9c <board_init+0x184>)
  404eb0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404eb2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404eb6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404eb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ebc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404ec0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404ec4:	f022 0201 	bic.w	r2, r2, #1
  404ec8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404ecc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404ed0:	f022 0201 	bic.w	r2, r2, #1
  404ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404edc:	f3bf 8f6f 	isb	sy
  404ee0:	200a      	movs	r0, #10
  404ee2:	4c2f      	ldr	r4, [pc, #188]	; (404fa0 <board_init+0x188>)
  404ee4:	47a0      	blx	r4
  404ee6:	200b      	movs	r0, #11
  404ee8:	47a0      	blx	r4
  404eea:	200c      	movs	r0, #12
  404eec:	47a0      	blx	r4
  404eee:	2010      	movs	r0, #16
  404ef0:	47a0      	blx	r4
  404ef2:	2011      	movs	r0, #17
  404ef4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404ef6:	4b2b      	ldr	r3, [pc, #172]	; (404fa4 <board_init+0x18c>)
  404ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
  404efc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404efe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404f02:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404f04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404f0c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404f0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404f12:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f18:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404f1a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404f20:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f22:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404f26:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404f28:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f2a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404f2e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404f30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404f34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404f38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404f3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404f40:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f46:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404f48:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404f4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f50:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404f54:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404f56:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f58:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404f5c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404f5e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404f60:	4a11      	ldr	r2, [pc, #68]	; (404fa8 <board_init+0x190>)
  404f62:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404f66:	f043 0310 	orr.w	r3, r3, #16
  404f6a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404f6e:	4b0f      	ldr	r3, [pc, #60]	; (404fac <board_init+0x194>)
  404f70:	2210      	movs	r2, #16
  404f72:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f78:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404f7a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404f80:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f82:	4311      	orrs	r1, r2
  404f84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404f86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f88:	4311      	orrs	r1, r2
  404f8a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404f8c:	605a      	str	r2, [r3, #4]
  404f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f90:	400e1850 	.word	0x400e1850
  404f94:	e000ed00 	.word	0xe000ed00
  404f98:	400e0c00 	.word	0x400e0c00
  404f9c:	5a00080c 	.word	0x5a00080c
  404fa0:	004055b5 	.word	0x004055b5
  404fa4:	400e1200 	.word	0x400e1200
  404fa8:	40088000 	.word	0x40088000
  404fac:	400e1000 	.word	0x400e1000

00404fb0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404fb0:	b90a      	cbnz	r2, 404fb6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404fb2:	6601      	str	r1, [r0, #96]	; 0x60
  404fb4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404fb6:	6641      	str	r1, [r0, #100]	; 0x64
  404fb8:	4770      	bx	lr

00404fba <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  404fba:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  404fbe:	0053      	lsls	r3, r2, #1
  404fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404fc4:	fbb2 f2f3 	udiv	r2, r2, r3
  404fc8:	3a01      	subs	r2, #1
  404fca:	f3c2 020d 	ubfx	r2, r2, #0, #14
  404fce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  404fd2:	4770      	bx	lr

00404fd4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  404fd4:	6301      	str	r1, [r0, #48]	; 0x30
  404fd6:	4770      	bx	lr

00404fd8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  404fd8:	6341      	str	r1, [r0, #52]	; 0x34
  404fda:	4770      	bx	lr

00404fdc <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  404fdc:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  404fe0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404fe4:	d105      	bne.n	404ff2 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  404fe6:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  404fe8:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  404fea:	bf14      	ite	ne
  404fec:	2001      	movne	r0, #1
  404fee:	2000      	moveq	r0, #0
  404ff0:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  404ff2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404ff4:	e7f8      	b.n	404fe8 <pio_get+0xc>

00404ff6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404ff6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404ff8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404ffc:	d03a      	beq.n	405074 <pio_set_peripheral+0x7e>
  404ffe:	d813      	bhi.n	405028 <pio_set_peripheral+0x32>
  405000:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  405004:	d025      	beq.n	405052 <pio_set_peripheral+0x5c>
  405006:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40500a:	d10a      	bne.n	405022 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40500c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40500e:	4313      	orrs	r3, r2
  405010:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405012:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405014:	6f41      	ldr	r1, [r0, #116]	; 0x74
  405016:	400b      	ands	r3, r1
  405018:	ea23 0302 	bic.w	r3, r3, r2
  40501c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40501e:	6042      	str	r2, [r0, #4]
  405020:	4770      	bx	lr
	switch (ul_type) {
  405022:	2900      	cmp	r1, #0
  405024:	d1fb      	bne.n	40501e <pio_set_peripheral+0x28>
  405026:	4770      	bx	lr
  405028:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40502c:	d021      	beq.n	405072 <pio_set_peripheral+0x7c>
  40502e:	d809      	bhi.n	405044 <pio_set_peripheral+0x4e>
  405030:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  405034:	d1f3      	bne.n	40501e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  405036:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405038:	4313      	orrs	r3, r2
  40503a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40503c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40503e:	4313      	orrs	r3, r2
  405040:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  405042:	e7ec      	b.n	40501e <pio_set_peripheral+0x28>
	switch (ul_type) {
  405044:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  405048:	d013      	beq.n	405072 <pio_set_peripheral+0x7c>
  40504a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40504e:	d010      	beq.n	405072 <pio_set_peripheral+0x7c>
  405050:	e7e5      	b.n	40501e <pio_set_peripheral+0x28>
{
  405052:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  405054:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405056:	6f04      	ldr	r4, [r0, #112]	; 0x70
  405058:	43d3      	mvns	r3, r2
  40505a:	4021      	ands	r1, r4
  40505c:	461c      	mov	r4, r3
  40505e:	4019      	ands	r1, r3
  405060:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405062:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405064:	6f41      	ldr	r1, [r0, #116]	; 0x74
  405066:	400b      	ands	r3, r1
  405068:	4023      	ands	r3, r4
  40506a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40506c:	6042      	str	r2, [r0, #4]
}
  40506e:	f85d 4b04 	ldr.w	r4, [sp], #4
  405072:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  405074:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405076:	6f01      	ldr	r1, [r0, #112]	; 0x70
  405078:	400b      	ands	r3, r1
  40507a:	ea23 0302 	bic.w	r3, r3, r2
  40507e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405080:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405082:	4313      	orrs	r3, r2
  405084:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  405086:	e7ca      	b.n	40501e <pio_set_peripheral+0x28>

00405088 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405088:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40508a:	f012 0f01 	tst.w	r2, #1
  40508e:	d10d      	bne.n	4050ac <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  405090:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405092:	f012 0f0a 	tst.w	r2, #10
  405096:	d00b      	beq.n	4050b0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  405098:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40509a:	f012 0f02 	tst.w	r2, #2
  40509e:	d109      	bne.n	4050b4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4050a0:	f012 0f08 	tst.w	r2, #8
  4050a4:	d008      	beq.n	4050b8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4050a6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4050aa:	e005      	b.n	4050b8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4050ac:	6641      	str	r1, [r0, #100]	; 0x64
  4050ae:	e7f0      	b.n	405092 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4050b0:	6241      	str	r1, [r0, #36]	; 0x24
  4050b2:	e7f2      	b.n	40509a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4050b4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4050b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4050ba:	6001      	str	r1, [r0, #0]
  4050bc:	4770      	bx	lr

004050be <pio_set_output>:
{
  4050be:	b410      	push	{r4}
  4050c0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4050c2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4050c4:	b94c      	cbnz	r4, 4050da <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4050c6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4050c8:	b14b      	cbz	r3, 4050de <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4050ca:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4050cc:	b94a      	cbnz	r2, 4050e2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4050ce:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4050d0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4050d2:	6001      	str	r1, [r0, #0]
}
  4050d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4050d8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4050da:	6641      	str	r1, [r0, #100]	; 0x64
  4050dc:	e7f4      	b.n	4050c8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4050de:	6541      	str	r1, [r0, #84]	; 0x54
  4050e0:	e7f4      	b.n	4050cc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4050e2:	6301      	str	r1, [r0, #48]	; 0x30
  4050e4:	e7f4      	b.n	4050d0 <pio_set_output+0x12>
	...

004050e8 <pio_configure>:
{
  4050e8:	b570      	push	{r4, r5, r6, lr}
  4050ea:	b082      	sub	sp, #8
  4050ec:	4605      	mov	r5, r0
  4050ee:	4616      	mov	r6, r2
  4050f0:	461c      	mov	r4, r3
	switch (ul_type) {
  4050f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4050f6:	d014      	beq.n	405122 <pio_configure+0x3a>
  4050f8:	d90a      	bls.n	405110 <pio_configure+0x28>
  4050fa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4050fe:	d024      	beq.n	40514a <pio_configure+0x62>
  405100:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405104:	d021      	beq.n	40514a <pio_configure+0x62>
  405106:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40510a:	d017      	beq.n	40513c <pio_configure+0x54>
		return 0;
  40510c:	2000      	movs	r0, #0
  40510e:	e01a      	b.n	405146 <pio_configure+0x5e>
	switch (ul_type) {
  405110:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405114:	d005      	beq.n	405122 <pio_configure+0x3a>
  405116:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40511a:	d002      	beq.n	405122 <pio_configure+0x3a>
  40511c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  405120:	d1f4      	bne.n	40510c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  405122:	4632      	mov	r2, r6
  405124:	4628      	mov	r0, r5
  405126:	4b11      	ldr	r3, [pc, #68]	; (40516c <pio_configure+0x84>)
  405128:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40512a:	f014 0f01 	tst.w	r4, #1
  40512e:	d102      	bne.n	405136 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  405130:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  405132:	2001      	movs	r0, #1
  405134:	e007      	b.n	405146 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  405136:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  405138:	2001      	movs	r0, #1
  40513a:	e004      	b.n	405146 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40513c:	461a      	mov	r2, r3
  40513e:	4631      	mov	r1, r6
  405140:	4b0b      	ldr	r3, [pc, #44]	; (405170 <pio_configure+0x88>)
  405142:	4798      	blx	r3
	return 1;
  405144:	2001      	movs	r0, #1
}
  405146:	b002      	add	sp, #8
  405148:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40514a:	f004 0301 	and.w	r3, r4, #1
  40514e:	9300      	str	r3, [sp, #0]
  405150:	f3c4 0380 	ubfx	r3, r4, #2, #1
  405154:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405158:	bf14      	ite	ne
  40515a:	2200      	movne	r2, #0
  40515c:	2201      	moveq	r2, #1
  40515e:	4631      	mov	r1, r6
  405160:	4628      	mov	r0, r5
  405162:	4c04      	ldr	r4, [pc, #16]	; (405174 <pio_configure+0x8c>)
  405164:	47a0      	blx	r4
	return 1;
  405166:	2001      	movs	r0, #1
		break;
  405168:	e7ed      	b.n	405146 <pio_configure+0x5e>
  40516a:	bf00      	nop
  40516c:	00404ff7 	.word	0x00404ff7
  405170:	00405089 	.word	0x00405089
  405174:	004050bf 	.word	0x004050bf

00405178 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  405178:	f012 0f10 	tst.w	r2, #16
  40517c:	d012      	beq.n	4051a4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40517e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  405182:	f012 0f20 	tst.w	r2, #32
  405186:	d007      	beq.n	405198 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  405188:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40518c:	f012 0f40 	tst.w	r2, #64	; 0x40
  405190:	d005      	beq.n	40519e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  405192:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  405196:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  405198:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40519c:	e7f6      	b.n	40518c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40519e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4051a2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4051a4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4051a8:	4770      	bx	lr

004051aa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4051aa:	6401      	str	r1, [r0, #64]	; 0x40
  4051ac:	4770      	bx	lr

004051ae <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  4051ae:	6441      	str	r1, [r0, #68]	; 0x44
  4051b0:	4770      	bx	lr

004051b2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4051b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4051b4:	4770      	bx	lr

004051b6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4051b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4051b8:	4770      	bx	lr
	...

004051bc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4051bc:	b570      	push	{r4, r5, r6, lr}
  4051be:	b082      	sub	sp, #8
  4051c0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4051c2:	4c46      	ldr	r4, [pc, #280]	; (4052dc <pio_configure_pin+0x120>)
  4051c4:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4051c8:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4051ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4051d2:	d059      	beq.n	405288 <pio_configure_pin+0xcc>
  4051d4:	d80a      	bhi.n	4051ec <pio_configure_pin+0x30>
  4051d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4051da:	d02f      	beq.n	40523c <pio_configure_pin+0x80>
  4051dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4051e0:	d03f      	beq.n	405262 <pio_configure_pin+0xa6>
  4051e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4051e6:	d016      	beq.n	405216 <pio_configure_pin+0x5a>
		return 0;
  4051e8:	2000      	movs	r0, #0
  4051ea:	e012      	b.n	405212 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4051ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4051f0:	d05d      	beq.n	4052ae <pio_configure_pin+0xf2>
  4051f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4051f6:	d05a      	beq.n	4052ae <pio_configure_pin+0xf2>
  4051f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4051fc:	d1f4      	bne.n	4051e8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4051fe:	f000 011f 	and.w	r1, r0, #31
  405202:	2601      	movs	r6, #1
  405204:	462a      	mov	r2, r5
  405206:	fa06 f101 	lsl.w	r1, r6, r1
  40520a:	4620      	mov	r0, r4
  40520c:	4b34      	ldr	r3, [pc, #208]	; (4052e0 <pio_configure_pin+0x124>)
  40520e:	4798      	blx	r3
	return 1;
  405210:	4630      	mov	r0, r6
}
  405212:	b002      	add	sp, #8
  405214:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405216:	f000 001f 	and.w	r0, r0, #31
  40521a:	2601      	movs	r6, #1
  40521c:	4086      	lsls	r6, r0
  40521e:	4632      	mov	r2, r6
  405220:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405224:	4620      	mov	r0, r4
  405226:	4b2f      	ldr	r3, [pc, #188]	; (4052e4 <pio_configure_pin+0x128>)
  405228:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40522a:	f015 0f01 	tst.w	r5, #1
  40522e:	d102      	bne.n	405236 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  405230:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405232:	2001      	movs	r0, #1
  405234:	e7ed      	b.n	405212 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405236:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405238:	2001      	movs	r0, #1
  40523a:	e7ea      	b.n	405212 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40523c:	f000 001f 	and.w	r0, r0, #31
  405240:	2601      	movs	r6, #1
  405242:	4086      	lsls	r6, r0
  405244:	4632      	mov	r2, r6
  405246:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40524a:	4620      	mov	r0, r4
  40524c:	4b25      	ldr	r3, [pc, #148]	; (4052e4 <pio_configure_pin+0x128>)
  40524e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405250:	f015 0f01 	tst.w	r5, #1
  405254:	d102      	bne.n	40525c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  405256:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405258:	2001      	movs	r0, #1
  40525a:	e7da      	b.n	405212 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40525c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40525e:	2001      	movs	r0, #1
  405260:	e7d7      	b.n	405212 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  405262:	f000 001f 	and.w	r0, r0, #31
  405266:	2601      	movs	r6, #1
  405268:	4086      	lsls	r6, r0
  40526a:	4632      	mov	r2, r6
  40526c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405270:	4620      	mov	r0, r4
  405272:	4b1c      	ldr	r3, [pc, #112]	; (4052e4 <pio_configure_pin+0x128>)
  405274:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405276:	f015 0f01 	tst.w	r5, #1
  40527a:	d102      	bne.n	405282 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  40527c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40527e:	2001      	movs	r0, #1
  405280:	e7c7      	b.n	405212 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405282:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405284:	2001      	movs	r0, #1
  405286:	e7c4      	b.n	405212 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  405288:	f000 001f 	and.w	r0, r0, #31
  40528c:	2601      	movs	r6, #1
  40528e:	4086      	lsls	r6, r0
  405290:	4632      	mov	r2, r6
  405292:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405296:	4620      	mov	r0, r4
  405298:	4b12      	ldr	r3, [pc, #72]	; (4052e4 <pio_configure_pin+0x128>)
  40529a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40529c:	f015 0f01 	tst.w	r5, #1
  4052a0:	d102      	bne.n	4052a8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4052a2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4052a4:	2001      	movs	r0, #1
  4052a6:	e7b4      	b.n	405212 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4052a8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4052aa:	2001      	movs	r0, #1
  4052ac:	e7b1      	b.n	405212 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4052ae:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4052b2:	f000 011f 	and.w	r1, r0, #31
  4052b6:	2601      	movs	r6, #1
  4052b8:	ea05 0306 	and.w	r3, r5, r6
  4052bc:	9300      	str	r3, [sp, #0]
  4052be:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4052c2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4052c6:	bf14      	ite	ne
  4052c8:	2200      	movne	r2, #0
  4052ca:	2201      	moveq	r2, #1
  4052cc:	fa06 f101 	lsl.w	r1, r6, r1
  4052d0:	4620      	mov	r0, r4
  4052d2:	4c05      	ldr	r4, [pc, #20]	; (4052e8 <pio_configure_pin+0x12c>)
  4052d4:	47a0      	blx	r4
	return 1;
  4052d6:	4630      	mov	r0, r6
		break;
  4052d8:	e79b      	b.n	405212 <pio_configure_pin+0x56>
  4052da:	bf00      	nop
  4052dc:	00200707 	.word	0x00200707
  4052e0:	00405089 	.word	0x00405089
  4052e4:	00404ff7 	.word	0x00404ff7
  4052e8:	004050bf 	.word	0x004050bf

004052ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4052ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052f0:	4604      	mov	r4, r0
  4052f2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4052f4:	4b0e      	ldr	r3, [pc, #56]	; (405330 <pio_handler_process+0x44>)
  4052f6:	4798      	blx	r3
  4052f8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4052fa:	4620      	mov	r0, r4
  4052fc:	4b0d      	ldr	r3, [pc, #52]	; (405334 <pio_handler_process+0x48>)
  4052fe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  405300:	4005      	ands	r5, r0
  405302:	d013      	beq.n	40532c <pio_handler_process+0x40>
  405304:	4c0c      	ldr	r4, [pc, #48]	; (405338 <pio_handler_process+0x4c>)
  405306:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40530a:	e003      	b.n	405314 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40530c:	42b4      	cmp	r4, r6
  40530e:	d00d      	beq.n	40532c <pio_handler_process+0x40>
  405310:	3410      	adds	r4, #16
		while (status != 0) {
  405312:	b15d      	cbz	r5, 40532c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  405314:	6820      	ldr	r0, [r4, #0]
  405316:	4540      	cmp	r0, r8
  405318:	d1f8      	bne.n	40530c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40531a:	6861      	ldr	r1, [r4, #4]
  40531c:	4229      	tst	r1, r5
  40531e:	d0f5      	beq.n	40530c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405320:	68e3      	ldr	r3, [r4, #12]
  405322:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  405324:	6863      	ldr	r3, [r4, #4]
  405326:	ea25 0503 	bic.w	r5, r5, r3
  40532a:	e7ef      	b.n	40530c <pio_handler_process+0x20>
  40532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405330:	004051b3 	.word	0x004051b3
  405334:	004051b7 	.word	0x004051b7
  405338:	2040c364 	.word	0x2040c364

0040533c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40533e:	4c18      	ldr	r4, [pc, #96]	; (4053a0 <pio_handler_set+0x64>)
  405340:	6826      	ldr	r6, [r4, #0]
  405342:	2e06      	cmp	r6, #6
  405344:	d82a      	bhi.n	40539c <pio_handler_set+0x60>
  405346:	f04f 0c00 	mov.w	ip, #0
  40534a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40534c:	4f15      	ldr	r7, [pc, #84]	; (4053a4 <pio_handler_set+0x68>)
  40534e:	e004      	b.n	40535a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  405350:	3401      	adds	r4, #1
  405352:	b2e4      	uxtb	r4, r4
  405354:	46a4      	mov	ip, r4
  405356:	42a6      	cmp	r6, r4
  405358:	d309      	bcc.n	40536e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40535a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40535c:	0125      	lsls	r5, r4, #4
  40535e:	597d      	ldr	r5, [r7, r5]
  405360:	428d      	cmp	r5, r1
  405362:	d1f5      	bne.n	405350 <pio_handler_set+0x14>
  405364:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  405368:	686d      	ldr	r5, [r5, #4]
  40536a:	4295      	cmp	r5, r2
  40536c:	d1f0      	bne.n	405350 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40536e:	4d0d      	ldr	r5, [pc, #52]	; (4053a4 <pio_handler_set+0x68>)
  405370:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  405374:	eb05 040e 	add.w	r4, r5, lr
  405378:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40537c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40537e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  405380:	9906      	ldr	r1, [sp, #24]
  405382:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  405384:	3601      	adds	r6, #1
  405386:	4566      	cmp	r6, ip
  405388:	d005      	beq.n	405396 <pio_handler_set+0x5a>
  40538a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40538c:	461a      	mov	r2, r3
  40538e:	4b06      	ldr	r3, [pc, #24]	; (4053a8 <pio_handler_set+0x6c>)
  405390:	4798      	blx	r3

	return 0;
  405392:	2000      	movs	r0, #0
  405394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  405396:	4902      	ldr	r1, [pc, #8]	; (4053a0 <pio_handler_set+0x64>)
  405398:	600e      	str	r6, [r1, #0]
  40539a:	e7f6      	b.n	40538a <pio_handler_set+0x4e>
		return 1;
  40539c:	2001      	movs	r0, #1
}
  40539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4053a0:	2040c3d4 	.word	0x2040c3d4
  4053a4:	2040c364 	.word	0x2040c364
  4053a8:	00405179 	.word	0x00405179

004053ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4053ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4053ae:	210a      	movs	r1, #10
  4053b0:	4801      	ldr	r0, [pc, #4]	; (4053b8 <PIOA_Handler+0xc>)
  4053b2:	4b02      	ldr	r3, [pc, #8]	; (4053bc <PIOA_Handler+0x10>)
  4053b4:	4798      	blx	r3
  4053b6:	bd08      	pop	{r3, pc}
  4053b8:	400e0e00 	.word	0x400e0e00
  4053bc:	004052ed 	.word	0x004052ed

004053c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4053c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4053c2:	210b      	movs	r1, #11
  4053c4:	4801      	ldr	r0, [pc, #4]	; (4053cc <PIOB_Handler+0xc>)
  4053c6:	4b02      	ldr	r3, [pc, #8]	; (4053d0 <PIOB_Handler+0x10>)
  4053c8:	4798      	blx	r3
  4053ca:	bd08      	pop	{r3, pc}
  4053cc:	400e1000 	.word	0x400e1000
  4053d0:	004052ed 	.word	0x004052ed

004053d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4053d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4053d6:	210c      	movs	r1, #12
  4053d8:	4801      	ldr	r0, [pc, #4]	; (4053e0 <PIOC_Handler+0xc>)
  4053da:	4b02      	ldr	r3, [pc, #8]	; (4053e4 <PIOC_Handler+0x10>)
  4053dc:	4798      	blx	r3
  4053de:	bd08      	pop	{r3, pc}
  4053e0:	400e1200 	.word	0x400e1200
  4053e4:	004052ed 	.word	0x004052ed

004053e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4053e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4053ea:	2110      	movs	r1, #16
  4053ec:	4801      	ldr	r0, [pc, #4]	; (4053f4 <PIOD_Handler+0xc>)
  4053ee:	4b02      	ldr	r3, [pc, #8]	; (4053f8 <PIOD_Handler+0x10>)
  4053f0:	4798      	blx	r3
  4053f2:	bd08      	pop	{r3, pc}
  4053f4:	400e1400 	.word	0x400e1400
  4053f8:	004052ed 	.word	0x004052ed

004053fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4053fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4053fe:	2111      	movs	r1, #17
  405400:	4801      	ldr	r0, [pc, #4]	; (405408 <PIOE_Handler+0xc>)
  405402:	4b02      	ldr	r3, [pc, #8]	; (40540c <PIOE_Handler+0x10>)
  405404:	4798      	blx	r3
  405406:	bd08      	pop	{r3, pc}
  405408:	400e1600 	.word	0x400e1600
  40540c:	004052ed 	.word	0x004052ed

00405410 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  405410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405412:	4606      	mov	r6, r0
  405414:	460d      	mov	r5, r1
  405416:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  405418:	4b17      	ldr	r3, [pc, #92]	; (405478 <pio_handler_set_priority+0x68>)
  40541a:	4798      	blx	r3
  40541c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40541e:	f04f 31ff 	mov.w	r1, #4294967295
  405422:	4630      	mov	r0, r6
  405424:	4b15      	ldr	r3, [pc, #84]	; (40547c <pio_handler_set_priority+0x6c>)
  405426:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405428:	4630      	mov	r0, r6
  40542a:	4b15      	ldr	r3, [pc, #84]	; (405480 <pio_handler_set_priority+0x70>)
  40542c:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40542e:	fa5f fe85 	uxtb.w	lr, r5
  405432:	f00e 031f 	and.w	r3, lr, #31
  405436:	2201      	movs	r2, #1
  405438:	fa02 f303 	lsl.w	r3, r2, r3
  40543c:	0968      	lsrs	r0, r5, #5
  40543e:	4911      	ldr	r1, [pc, #68]	; (405484 <pio_handler_set_priority+0x74>)
  405440:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  405444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405448:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  40544c:	2d00      	cmp	r5, #0
  40544e:	db0a      	blt.n	405466 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405450:	0164      	lsls	r4, r4, #5
  405452:	b2e4      	uxtb	r4, r4
  405454:	4a0c      	ldr	r2, [pc, #48]	; (405488 <pio_handler_set_priority+0x78>)
  405456:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405458:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  40545c:	4639      	mov	r1, r7
  40545e:	4630      	mov	r0, r6
  405460:	4b0a      	ldr	r3, [pc, #40]	; (40548c <pio_handler_set_priority+0x7c>)
  405462:	4798      	blx	r3
  405464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405466:	f00e 0e0f 	and.w	lr, lr, #15
  40546a:	0164      	lsls	r4, r4, #5
  40546c:	b2e4      	uxtb	r4, r4
  40546e:	4a08      	ldr	r2, [pc, #32]	; (405490 <pio_handler_set_priority+0x80>)
  405470:	f802 400e 	strb.w	r4, [r2, lr]
  405474:	e7f0      	b.n	405458 <pio_handler_set_priority+0x48>
  405476:	bf00      	nop
  405478:	004051b7 	.word	0x004051b7
  40547c:	004051af 	.word	0x004051af
  405480:	004051b3 	.word	0x004051b3
  405484:	e000e100 	.word	0xe000e100
  405488:	e000e400 	.word	0xe000e400
  40548c:	004051ab 	.word	0x004051ab
  405490:	e000ed14 	.word	0xe000ed14

00405494 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  405494:	2803      	cmp	r0, #3
  405496:	d011      	beq.n	4054bc <pmc_mck_set_division+0x28>
  405498:	2804      	cmp	r0, #4
  40549a:	d012      	beq.n	4054c2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40549c:	2802      	cmp	r0, #2
  40549e:	bf0c      	ite	eq
  4054a0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4054a4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4054a6:	4a08      	ldr	r2, [pc, #32]	; (4054c8 <pmc_mck_set_division+0x34>)
  4054a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4054ae:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4054b0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4054b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4054b4:	f013 0f08 	tst.w	r3, #8
  4054b8:	d0fb      	beq.n	4054b2 <pmc_mck_set_division+0x1e>
}
  4054ba:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4054bc:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4054c0:	e7f1      	b.n	4054a6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4054c2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4054c6:	e7ee      	b.n	4054a6 <pmc_mck_set_division+0x12>
  4054c8:	400e0600 	.word	0x400e0600

004054cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4054cc:	4a17      	ldr	r2, [pc, #92]	; (40552c <pmc_switch_mck_to_pllack+0x60>)
  4054ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4054d4:	4318      	orrs	r0, r3
  4054d6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4054d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4054da:	f013 0f08 	tst.w	r3, #8
  4054de:	d10a      	bne.n	4054f6 <pmc_switch_mck_to_pllack+0x2a>
  4054e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4054e4:	4911      	ldr	r1, [pc, #68]	; (40552c <pmc_switch_mck_to_pllack+0x60>)
  4054e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4054e8:	f012 0f08 	tst.w	r2, #8
  4054ec:	d103      	bne.n	4054f6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4054ee:	3b01      	subs	r3, #1
  4054f0:	d1f9      	bne.n	4054e6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4054f2:	2001      	movs	r0, #1
  4054f4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4054f6:	4a0d      	ldr	r2, [pc, #52]	; (40552c <pmc_switch_mck_to_pllack+0x60>)
  4054f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4054fa:	f023 0303 	bic.w	r3, r3, #3
  4054fe:	f043 0302 	orr.w	r3, r3, #2
  405502:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405504:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405506:	f013 0f08 	tst.w	r3, #8
  40550a:	d10a      	bne.n	405522 <pmc_switch_mck_to_pllack+0x56>
  40550c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405510:	4906      	ldr	r1, [pc, #24]	; (40552c <pmc_switch_mck_to_pllack+0x60>)
  405512:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405514:	f012 0f08 	tst.w	r2, #8
  405518:	d105      	bne.n	405526 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40551a:	3b01      	subs	r3, #1
  40551c:	d1f9      	bne.n	405512 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40551e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  405520:	4770      	bx	lr
	return 0;
  405522:	2000      	movs	r0, #0
  405524:	4770      	bx	lr
  405526:	2000      	movs	r0, #0
  405528:	4770      	bx	lr
  40552a:	bf00      	nop
  40552c:	400e0600 	.word	0x400e0600

00405530 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405530:	b9a0      	cbnz	r0, 40555c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405532:	480e      	ldr	r0, [pc, #56]	; (40556c <pmc_switch_mainck_to_xtal+0x3c>)
  405534:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405536:	0209      	lsls	r1, r1, #8
  405538:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40553a:	4a0d      	ldr	r2, [pc, #52]	; (405570 <pmc_switch_mainck_to_xtal+0x40>)
  40553c:	401a      	ands	r2, r3
  40553e:	4b0d      	ldr	r3, [pc, #52]	; (405574 <pmc_switch_mainck_to_xtal+0x44>)
  405540:	4313      	orrs	r3, r2
  405542:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405544:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405546:	4602      	mov	r2, r0
  405548:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40554a:	f013 0f01 	tst.w	r3, #1
  40554e:	d0fb      	beq.n	405548 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  405550:	4a06      	ldr	r2, [pc, #24]	; (40556c <pmc_switch_mainck_to_xtal+0x3c>)
  405552:	6a11      	ldr	r1, [r2, #32]
  405554:	4b08      	ldr	r3, [pc, #32]	; (405578 <pmc_switch_mainck_to_xtal+0x48>)
  405556:	430b      	orrs	r3, r1
  405558:	6213      	str	r3, [r2, #32]
  40555a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40555c:	4903      	ldr	r1, [pc, #12]	; (40556c <pmc_switch_mainck_to_xtal+0x3c>)
  40555e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405560:	4a06      	ldr	r2, [pc, #24]	; (40557c <pmc_switch_mainck_to_xtal+0x4c>)
  405562:	401a      	ands	r2, r3
  405564:	4b06      	ldr	r3, [pc, #24]	; (405580 <pmc_switch_mainck_to_xtal+0x50>)
  405566:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405568:	620b      	str	r3, [r1, #32]
  40556a:	4770      	bx	lr
  40556c:	400e0600 	.word	0x400e0600
  405570:	ffc8fffc 	.word	0xffc8fffc
  405574:	00370001 	.word	0x00370001
  405578:	01370000 	.word	0x01370000
  40557c:	fec8fffc 	.word	0xfec8fffc
  405580:	01370002 	.word	0x01370002

00405584 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405584:	4b02      	ldr	r3, [pc, #8]	; (405590 <pmc_osc_is_ready_mainck+0xc>)
  405586:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405588:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40558c:	4770      	bx	lr
  40558e:	bf00      	nop
  405590:	400e0600 	.word	0x400e0600

00405594 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405594:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405598:	4b01      	ldr	r3, [pc, #4]	; (4055a0 <pmc_disable_pllack+0xc>)
  40559a:	629a      	str	r2, [r3, #40]	; 0x28
  40559c:	4770      	bx	lr
  40559e:	bf00      	nop
  4055a0:	400e0600 	.word	0x400e0600

004055a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4055a4:	4b02      	ldr	r3, [pc, #8]	; (4055b0 <pmc_is_locked_pllack+0xc>)
  4055a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4055a8:	f000 0002 	and.w	r0, r0, #2
  4055ac:	4770      	bx	lr
  4055ae:	bf00      	nop
  4055b0:	400e0600 	.word	0x400e0600

004055b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4055b4:	283f      	cmp	r0, #63	; 0x3f
  4055b6:	d81e      	bhi.n	4055f6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4055b8:	281f      	cmp	r0, #31
  4055ba:	d80c      	bhi.n	4055d6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4055bc:	4b11      	ldr	r3, [pc, #68]	; (405604 <pmc_enable_periph_clk+0x50>)
  4055be:	699a      	ldr	r2, [r3, #24]
  4055c0:	2301      	movs	r3, #1
  4055c2:	4083      	lsls	r3, r0
  4055c4:	4393      	bics	r3, r2
  4055c6:	d018      	beq.n	4055fa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4055c8:	2301      	movs	r3, #1
  4055ca:	fa03 f000 	lsl.w	r0, r3, r0
  4055ce:	4b0d      	ldr	r3, [pc, #52]	; (405604 <pmc_enable_periph_clk+0x50>)
  4055d0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4055d2:	2000      	movs	r0, #0
  4055d4:	4770      	bx	lr
		ul_id -= 32;
  4055d6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4055d8:	4b0a      	ldr	r3, [pc, #40]	; (405604 <pmc_enable_periph_clk+0x50>)
  4055da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4055de:	2301      	movs	r3, #1
  4055e0:	4083      	lsls	r3, r0
  4055e2:	4393      	bics	r3, r2
  4055e4:	d00b      	beq.n	4055fe <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4055e6:	2301      	movs	r3, #1
  4055e8:	fa03 f000 	lsl.w	r0, r3, r0
  4055ec:	4b05      	ldr	r3, [pc, #20]	; (405604 <pmc_enable_periph_clk+0x50>)
  4055ee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4055f2:	2000      	movs	r0, #0
  4055f4:	4770      	bx	lr
		return 1;
  4055f6:	2001      	movs	r0, #1
  4055f8:	4770      	bx	lr
	return 0;
  4055fa:	2000      	movs	r0, #0
  4055fc:	4770      	bx	lr
  4055fe:	2000      	movs	r0, #0
}
  405600:	4770      	bx	lr
  405602:	bf00      	nop
  405604:	400e0600 	.word	0x400e0600

00405608 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405608:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40560a:	4b07      	ldr	r3, [pc, #28]	; (405628 <spi_enable_clock+0x20>)
  40560c:	4298      	cmp	r0, r3
  40560e:	d003      	beq.n	405618 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  405610:	4b06      	ldr	r3, [pc, #24]	; (40562c <spi_enable_clock+0x24>)
  405612:	4298      	cmp	r0, r3
  405614:	d004      	beq.n	405620 <spi_enable_clock+0x18>
  405616:	bd08      	pop	{r3, pc}
  405618:	2015      	movs	r0, #21
  40561a:	4b05      	ldr	r3, [pc, #20]	; (405630 <spi_enable_clock+0x28>)
  40561c:	4798      	blx	r3
  40561e:	bd08      	pop	{r3, pc}
  405620:	202a      	movs	r0, #42	; 0x2a
  405622:	4b03      	ldr	r3, [pc, #12]	; (405630 <spi_enable_clock+0x28>)
  405624:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405626:	e7f6      	b.n	405616 <spi_enable_clock+0xe>
  405628:	40008000 	.word	0x40008000
  40562c:	40058000 	.word	0x40058000
  405630:	004055b5 	.word	0x004055b5

00405634 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405634:	6843      	ldr	r3, [r0, #4]
  405636:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40563a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40563c:	6843      	ldr	r3, [r0, #4]
  40563e:	0409      	lsls	r1, r1, #16
  405640:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405644:	4319      	orrs	r1, r3
  405646:	6041      	str	r1, [r0, #4]
  405648:	4770      	bx	lr

0040564a <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40564a:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40564c:	f643 2399 	movw	r3, #15001	; 0x3a99
  405650:	6904      	ldr	r4, [r0, #16]
  405652:	f014 0f01 	tst.w	r4, #1
  405656:	d103      	bne.n	405660 <spi_read+0x16>
		if (!timeout--) {
  405658:	3b01      	subs	r3, #1
  40565a:	d1f9      	bne.n	405650 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  40565c:	2001      	movs	r0, #1
  40565e:	e009      	b.n	405674 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  405660:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  405662:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405664:	f010 0f02 	tst.w	r0, #2
  405668:	d002      	beq.n	405670 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40566a:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40566e:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  405670:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  405672:	2000      	movs	r0, #0
}
  405674:	f85d 4b04 	ldr.w	r4, [sp], #4
  405678:	4770      	bx	lr

0040567a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40567a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40567c:	f643 2499 	movw	r4, #15001	; 0x3a99
  405680:	6905      	ldr	r5, [r0, #16]
  405682:	f015 0f02 	tst.w	r5, #2
  405686:	d103      	bne.n	405690 <spi_write+0x16>
		if (!timeout--) {
  405688:	3c01      	subs	r4, #1
  40568a:	d1f9      	bne.n	405680 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40568c:	2001      	movs	r0, #1
  40568e:	e00c      	b.n	4056aa <spi_write+0x30>
  405690:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  405692:	f014 0f02 	tst.w	r4, #2
  405696:	d006      	beq.n	4056a6 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405698:	0412      	lsls	r2, r2, #16
  40569a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40569e:	4311      	orrs	r1, r2
		if (uc_last) {
  4056a0:	b10b      	cbz	r3, 4056a6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4056a2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4056a6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4056a8:	2000      	movs	r0, #0
}
  4056aa:	bc30      	pop	{r4, r5}
  4056ac:	4770      	bx	lr

004056ae <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4056ae:	b932      	cbnz	r2, 4056be <spi_set_clock_polarity+0x10>
  4056b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4056b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4056b6:	f023 0301 	bic.w	r3, r3, #1
  4056ba:	6303      	str	r3, [r0, #48]	; 0x30
  4056bc:	4770      	bx	lr
  4056be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4056c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4056c4:	f043 0301 	orr.w	r3, r3, #1
  4056c8:	6303      	str	r3, [r0, #48]	; 0x30
  4056ca:	4770      	bx	lr

004056cc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4056cc:	b932      	cbnz	r2, 4056dc <spi_set_clock_phase+0x10>
  4056ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4056d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4056d4:	f023 0302 	bic.w	r3, r3, #2
  4056d8:	6303      	str	r3, [r0, #48]	; 0x30
  4056da:	4770      	bx	lr
  4056dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4056e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4056e2:	f043 0302 	orr.w	r3, r3, #2
  4056e6:	6303      	str	r3, [r0, #48]	; 0x30
  4056e8:	4770      	bx	lr

004056ea <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4056ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4056ee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4056f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4056f4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4056f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4056f8:	431a      	orrs	r2, r3
  4056fa:	630a      	str	r2, [r1, #48]	; 0x30
  4056fc:	4770      	bx	lr

004056fe <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4056fe:	1e43      	subs	r3, r0, #1
  405700:	4419      	add	r1, r3
  405702:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405706:	1e43      	subs	r3, r0, #1
  405708:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40570a:	bf94      	ite	ls
  40570c:	b200      	sxthls	r0, r0
		return -1;
  40570e:	f04f 30ff 	movhi.w	r0, #4294967295
}
  405712:	4770      	bx	lr

00405714 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405714:	b17a      	cbz	r2, 405736 <spi_set_baudrate_div+0x22>
{
  405716:	b410      	push	{r4}
  405718:	4614      	mov	r4, r2
  40571a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40571e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405724:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405726:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405728:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40572c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40572e:	2000      	movs	r0, #0
}
  405730:	f85d 4b04 	ldr.w	r4, [sp], #4
  405734:	4770      	bx	lr
        return -1;
  405736:	f04f 30ff 	mov.w	r0, #4294967295
  40573a:	4770      	bx	lr

0040573c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40573c:	b410      	push	{r4}
  40573e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  405742:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405744:	b280      	uxth	r0, r0
  405746:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405748:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40574a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40574e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405752:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405754:	f85d 4b04 	ldr.w	r4, [sp], #4
  405758:	4770      	bx	lr

0040575a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40575a:	6943      	ldr	r3, [r0, #20]
  40575c:	f013 0f02 	tst.w	r3, #2
  405760:	d002      	beq.n	405768 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  405762:	61c1      	str	r1, [r0, #28]
	return 0;
  405764:	2000      	movs	r0, #0
  405766:	4770      	bx	lr
		return 1;
  405768:	2001      	movs	r0, #1
}
  40576a:	4770      	bx	lr

0040576c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40576c:	6943      	ldr	r3, [r0, #20]
  40576e:	f013 0f01 	tst.w	r3, #1
  405772:	d003      	beq.n	40577c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405774:	6983      	ldr	r3, [r0, #24]
  405776:	700b      	strb	r3, [r1, #0]
	return 0;
  405778:	2000      	movs	r0, #0
  40577a:	4770      	bx	lr
		return 1;
  40577c:	2001      	movs	r0, #1
}
  40577e:	4770      	bx	lr

00405780 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  405780:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  405782:	010b      	lsls	r3, r1, #4
  405784:	4293      	cmp	r3, r2
  405786:	d914      	bls.n	4057b2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405788:	00c9      	lsls	r1, r1, #3
  40578a:	084b      	lsrs	r3, r1, #1
  40578c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  405790:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405794:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405796:	1e5c      	subs	r4, r3, #1
  405798:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40579c:	428c      	cmp	r4, r1
  40579e:	d901      	bls.n	4057a4 <usart_set_async_baudrate+0x24>
		return 1;
  4057a0:	2001      	movs	r0, #1
  4057a2:	e017      	b.n	4057d4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4057a4:	6841      	ldr	r1, [r0, #4]
  4057a6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4057aa:	6041      	str	r1, [r0, #4]
  4057ac:	e00c      	b.n	4057c8 <usart_set_async_baudrate+0x48>
		return 1;
  4057ae:	2001      	movs	r0, #1
  4057b0:	e010      	b.n	4057d4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4057b2:	0859      	lsrs	r1, r3, #1
  4057b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4057b8:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4057bc:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4057be:	1e5c      	subs	r4, r3, #1
  4057c0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4057c4:	428c      	cmp	r4, r1
  4057c6:	d8f2      	bhi.n	4057ae <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4057c8:	0412      	lsls	r2, r2, #16
  4057ca:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4057ce:	431a      	orrs	r2, r3
  4057d0:	6202      	str	r2, [r0, #32]

	return 0;
  4057d2:	2000      	movs	r0, #0
}
  4057d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4057d8:	4770      	bx	lr
	...

004057dc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4057dc:	4b08      	ldr	r3, [pc, #32]	; (405800 <usart_reset+0x24>)
  4057de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4057e2:	2300      	movs	r3, #0
  4057e4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4057e6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4057e8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4057ea:	2388      	movs	r3, #136	; 0x88
  4057ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4057ee:	2324      	movs	r3, #36	; 0x24
  4057f0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4057f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4057f6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4057f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4057fc:	6003      	str	r3, [r0, #0]
  4057fe:	4770      	bx	lr
  405800:	55534100 	.word	0x55534100

00405804 <usart_init_rs232>:
{
  405804:	b570      	push	{r4, r5, r6, lr}
  405806:	4605      	mov	r5, r0
  405808:	460c      	mov	r4, r1
  40580a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40580c:	4b0f      	ldr	r3, [pc, #60]	; (40584c <usart_init_rs232+0x48>)
  40580e:	4798      	blx	r3
	ul_reg_val = 0;
  405810:	2200      	movs	r2, #0
  405812:	4b0f      	ldr	r3, [pc, #60]	; (405850 <usart_init_rs232+0x4c>)
  405814:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405816:	b1a4      	cbz	r4, 405842 <usart_init_rs232+0x3e>
  405818:	4632      	mov	r2, r6
  40581a:	6821      	ldr	r1, [r4, #0]
  40581c:	4628      	mov	r0, r5
  40581e:	4b0d      	ldr	r3, [pc, #52]	; (405854 <usart_init_rs232+0x50>)
  405820:	4798      	blx	r3
  405822:	4602      	mov	r2, r0
  405824:	b978      	cbnz	r0, 405846 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405826:	6863      	ldr	r3, [r4, #4]
  405828:	68a1      	ldr	r1, [r4, #8]
  40582a:	430b      	orrs	r3, r1
  40582c:	6921      	ldr	r1, [r4, #16]
  40582e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405830:	68e1      	ldr	r1, [r4, #12]
  405832:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405834:	4906      	ldr	r1, [pc, #24]	; (405850 <usart_init_rs232+0x4c>)
  405836:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405838:	6869      	ldr	r1, [r5, #4]
  40583a:	430b      	orrs	r3, r1
  40583c:	606b      	str	r3, [r5, #4]
}
  40583e:	4610      	mov	r0, r2
  405840:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  405842:	2201      	movs	r2, #1
  405844:	e7fb      	b.n	40583e <usart_init_rs232+0x3a>
  405846:	2201      	movs	r2, #1
  405848:	e7f9      	b.n	40583e <usart_init_rs232+0x3a>
  40584a:	bf00      	nop
  40584c:	004057dd 	.word	0x004057dd
  405850:	2040c3d8 	.word	0x2040c3d8
  405854:	00405781 	.word	0x00405781

00405858 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  405858:	2340      	movs	r3, #64	; 0x40
  40585a:	6003      	str	r3, [r0, #0]
  40585c:	4770      	bx	lr

0040585e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40585e:	2310      	movs	r3, #16
  405860:	6003      	str	r3, [r0, #0]
  405862:	4770      	bx	lr

00405864 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405864:	6943      	ldr	r3, [r0, #20]
  405866:	f013 0f02 	tst.w	r3, #2
  40586a:	d004      	beq.n	405876 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40586c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  405870:	61c1      	str	r1, [r0, #28]
	return 0;
  405872:	2000      	movs	r0, #0
  405874:	4770      	bx	lr
		return 1;
  405876:	2001      	movs	r0, #1
}
  405878:	4770      	bx	lr

0040587a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40587a:	6943      	ldr	r3, [r0, #20]
  40587c:	f013 0f01 	tst.w	r3, #1
  405880:	d005      	beq.n	40588e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405882:	6983      	ldr	r3, [r0, #24]
  405884:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405888:	600b      	str	r3, [r1, #0]
	return 0;
  40588a:	2000      	movs	r0, #0
  40588c:	4770      	bx	lr
		return 1;
  40588e:	2001      	movs	r0, #1
}
  405890:	4770      	bx	lr

00405892 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405892:	e7fe      	b.n	405892 <Dummy_Handler>

00405894 <Reset_Handler>:
{
  405894:	b500      	push	{lr}
  405896:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405898:	4b25      	ldr	r3, [pc, #148]	; (405930 <Reset_Handler+0x9c>)
  40589a:	4a26      	ldr	r2, [pc, #152]	; (405934 <Reset_Handler+0xa0>)
  40589c:	429a      	cmp	r2, r3
  40589e:	d010      	beq.n	4058c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4058a0:	4b25      	ldr	r3, [pc, #148]	; (405938 <Reset_Handler+0xa4>)
  4058a2:	4a23      	ldr	r2, [pc, #140]	; (405930 <Reset_Handler+0x9c>)
  4058a4:	429a      	cmp	r2, r3
  4058a6:	d20c      	bcs.n	4058c2 <Reset_Handler+0x2e>
  4058a8:	3b01      	subs	r3, #1
  4058aa:	1a9b      	subs	r3, r3, r2
  4058ac:	f023 0303 	bic.w	r3, r3, #3
  4058b0:	3304      	adds	r3, #4
  4058b2:	4413      	add	r3, r2
  4058b4:	491f      	ldr	r1, [pc, #124]	; (405934 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4058b6:	f851 0b04 	ldr.w	r0, [r1], #4
  4058ba:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4058be:	429a      	cmp	r2, r3
  4058c0:	d1f9      	bne.n	4058b6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4058c2:	4b1e      	ldr	r3, [pc, #120]	; (40593c <Reset_Handler+0xa8>)
  4058c4:	4a1e      	ldr	r2, [pc, #120]	; (405940 <Reset_Handler+0xac>)
  4058c6:	429a      	cmp	r2, r3
  4058c8:	d20a      	bcs.n	4058e0 <Reset_Handler+0x4c>
  4058ca:	3b01      	subs	r3, #1
  4058cc:	1a9b      	subs	r3, r3, r2
  4058ce:	f023 0303 	bic.w	r3, r3, #3
  4058d2:	3304      	adds	r3, #4
  4058d4:	4413      	add	r3, r2
                *pDest++ = 0;
  4058d6:	2100      	movs	r1, #0
  4058d8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4058dc:	4293      	cmp	r3, r2
  4058de:	d1fb      	bne.n	4058d8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4058e0:	4a18      	ldr	r2, [pc, #96]	; (405944 <Reset_Handler+0xb0>)
  4058e2:	4b19      	ldr	r3, [pc, #100]	; (405948 <Reset_Handler+0xb4>)
  4058e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4058e8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4058ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4058ee:	fab3 f383 	clz	r3, r3
  4058f2:	095b      	lsrs	r3, r3, #5
  4058f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4058f6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4058f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4058fc:	2200      	movs	r2, #0
  4058fe:	4b13      	ldr	r3, [pc, #76]	; (40594c <Reset_Handler+0xb8>)
  405900:	701a      	strb	r2, [r3, #0]
	return flags;
  405902:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405904:	4a12      	ldr	r2, [pc, #72]	; (405950 <Reset_Handler+0xbc>)
  405906:	6813      	ldr	r3, [r2, #0]
  405908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40590c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40590e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405912:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  405916:	b129      	cbz	r1, 405924 <Reset_Handler+0x90>
		cpu_irq_enable();
  405918:	2201      	movs	r2, #1
  40591a:	4b0c      	ldr	r3, [pc, #48]	; (40594c <Reset_Handler+0xb8>)
  40591c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40591e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405922:	b662      	cpsie	i
        __libc_init_array();
  405924:	4b0b      	ldr	r3, [pc, #44]	; (405954 <Reset_Handler+0xc0>)
  405926:	4798      	blx	r3
        main();
  405928:	4b0b      	ldr	r3, [pc, #44]	; (405958 <Reset_Handler+0xc4>)
  40592a:	4798      	blx	r3
  40592c:	e7fe      	b.n	40592c <Reset_Handler+0x98>
  40592e:	bf00      	nop
  405930:	20400000 	.word	0x20400000
  405934:	0040a980 	.word	0x0040a980
  405938:	204009d0 	.word	0x204009d0
  40593c:	2040d054 	.word	0x2040d054
  405940:	204009d0 	.word	0x204009d0
  405944:	e000ed00 	.word	0xe000ed00
  405948:	00400000 	.word	0x00400000
  40594c:	20400018 	.word	0x20400018
  405950:	e000ed88 	.word	0xe000ed88
  405954:	004061e1 	.word	0x004061e1
  405958:	00406141 	.word	0x00406141

0040595c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40595c:	4b3b      	ldr	r3, [pc, #236]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  40595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405960:	f003 0303 	and.w	r3, r3, #3
  405964:	2b01      	cmp	r3, #1
  405966:	d01d      	beq.n	4059a4 <SystemCoreClockUpdate+0x48>
  405968:	b183      	cbz	r3, 40598c <SystemCoreClockUpdate+0x30>
  40596a:	2b02      	cmp	r3, #2
  40596c:	d036      	beq.n	4059dc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40596e:	4b37      	ldr	r3, [pc, #220]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  405970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405972:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405976:	2b70      	cmp	r3, #112	; 0x70
  405978:	d05f      	beq.n	405a3a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40597a:	4b34      	ldr	r3, [pc, #208]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  40597c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40597e:	4934      	ldr	r1, [pc, #208]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  405980:	f3c2 1202 	ubfx	r2, r2, #4, #3
  405984:	680b      	ldr	r3, [r1, #0]
  405986:	40d3      	lsrs	r3, r2
  405988:	600b      	str	r3, [r1, #0]
  40598a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40598c:	4b31      	ldr	r3, [pc, #196]	; (405a54 <SystemCoreClockUpdate+0xf8>)
  40598e:	695b      	ldr	r3, [r3, #20]
  405990:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405994:	bf14      	ite	ne
  405996:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40599a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40599e:	4b2c      	ldr	r3, [pc, #176]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059a0:	601a      	str	r2, [r3, #0]
  4059a2:	e7e4      	b.n	40596e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4059a4:	4b29      	ldr	r3, [pc, #164]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  4059a6:	6a1b      	ldr	r3, [r3, #32]
  4059a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4059ac:	d003      	beq.n	4059b6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4059ae:	4a2a      	ldr	r2, [pc, #168]	; (405a58 <SystemCoreClockUpdate+0xfc>)
  4059b0:	4b27      	ldr	r3, [pc, #156]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059b2:	601a      	str	r2, [r3, #0]
  4059b4:	e7db      	b.n	40596e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4059b6:	4a29      	ldr	r2, [pc, #164]	; (405a5c <SystemCoreClockUpdate+0x100>)
  4059b8:	4b25      	ldr	r3, [pc, #148]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059ba:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4059bc:	4b23      	ldr	r3, [pc, #140]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  4059be:	6a1b      	ldr	r3, [r3, #32]
  4059c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4059c4:	2b10      	cmp	r3, #16
  4059c6:	d005      	beq.n	4059d4 <SystemCoreClockUpdate+0x78>
  4059c8:	2b20      	cmp	r3, #32
  4059ca:	d1d0      	bne.n	40596e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4059cc:	4a22      	ldr	r2, [pc, #136]	; (405a58 <SystemCoreClockUpdate+0xfc>)
  4059ce:	4b20      	ldr	r3, [pc, #128]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059d0:	601a      	str	r2, [r3, #0]
          break;
  4059d2:	e7cc      	b.n	40596e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4059d4:	4a22      	ldr	r2, [pc, #136]	; (405a60 <SystemCoreClockUpdate+0x104>)
  4059d6:	4b1e      	ldr	r3, [pc, #120]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059d8:	601a      	str	r2, [r3, #0]
          break;
  4059da:	e7c8      	b.n	40596e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4059dc:	4b1b      	ldr	r3, [pc, #108]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  4059de:	6a1b      	ldr	r3, [r3, #32]
  4059e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4059e4:	d016      	beq.n	405a14 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4059e6:	4a1c      	ldr	r2, [pc, #112]	; (405a58 <SystemCoreClockUpdate+0xfc>)
  4059e8:	4b19      	ldr	r3, [pc, #100]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  4059ea:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4059ec:	4b17      	ldr	r3, [pc, #92]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  4059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059f0:	f003 0303 	and.w	r3, r3, #3
  4059f4:	2b02      	cmp	r3, #2
  4059f6:	d1ba      	bne.n	40596e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4059f8:	4a14      	ldr	r2, [pc, #80]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  4059fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4059fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4059fe:	4814      	ldr	r0, [pc, #80]	; (405a50 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405a00:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405a04:	6803      	ldr	r3, [r0, #0]
  405a06:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405a0a:	b2d2      	uxtb	r2, r2
  405a0c:	fbb3 f3f2 	udiv	r3, r3, r2
  405a10:	6003      	str	r3, [r0, #0]
  405a12:	e7ac      	b.n	40596e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405a14:	4a11      	ldr	r2, [pc, #68]	; (405a5c <SystemCoreClockUpdate+0x100>)
  405a16:	4b0e      	ldr	r3, [pc, #56]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  405a18:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405a1a:	4b0c      	ldr	r3, [pc, #48]	; (405a4c <SystemCoreClockUpdate+0xf0>)
  405a1c:	6a1b      	ldr	r3, [r3, #32]
  405a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405a22:	2b10      	cmp	r3, #16
  405a24:	d005      	beq.n	405a32 <SystemCoreClockUpdate+0xd6>
  405a26:	2b20      	cmp	r3, #32
  405a28:	d1e0      	bne.n	4059ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405a2a:	4a0b      	ldr	r2, [pc, #44]	; (405a58 <SystemCoreClockUpdate+0xfc>)
  405a2c:	4b08      	ldr	r3, [pc, #32]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  405a2e:	601a      	str	r2, [r3, #0]
          break;
  405a30:	e7dc      	b.n	4059ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  405a32:	4a0b      	ldr	r2, [pc, #44]	; (405a60 <SystemCoreClockUpdate+0x104>)
  405a34:	4b06      	ldr	r3, [pc, #24]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  405a36:	601a      	str	r2, [r3, #0]
          break;
  405a38:	e7d8      	b.n	4059ec <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405a3a:	4a05      	ldr	r2, [pc, #20]	; (405a50 <SystemCoreClockUpdate+0xf4>)
  405a3c:	6813      	ldr	r3, [r2, #0]
  405a3e:	4909      	ldr	r1, [pc, #36]	; (405a64 <SystemCoreClockUpdate+0x108>)
  405a40:	fba1 1303 	umull	r1, r3, r1, r3
  405a44:	085b      	lsrs	r3, r3, #1
  405a46:	6013      	str	r3, [r2, #0]
  405a48:	4770      	bx	lr
  405a4a:	bf00      	nop
  405a4c:	400e0600 	.word	0x400e0600
  405a50:	2040001c 	.word	0x2040001c
  405a54:	400e1810 	.word	0x400e1810
  405a58:	00b71b00 	.word	0x00b71b00
  405a5c:	003d0900 	.word	0x003d0900
  405a60:	007a1200 	.word	0x007a1200
  405a64:	aaaaaaab 	.word	0xaaaaaaab

00405a68 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405a68:	4b12      	ldr	r3, [pc, #72]	; (405ab4 <system_init_flash+0x4c>)
  405a6a:	4298      	cmp	r0, r3
  405a6c:	d911      	bls.n	405a92 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  405a6e:	4b12      	ldr	r3, [pc, #72]	; (405ab8 <system_init_flash+0x50>)
  405a70:	4298      	cmp	r0, r3
  405a72:	d913      	bls.n	405a9c <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  405a74:	4b11      	ldr	r3, [pc, #68]	; (405abc <system_init_flash+0x54>)
  405a76:	4298      	cmp	r0, r3
  405a78:	d914      	bls.n	405aa4 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405a7a:	4b11      	ldr	r3, [pc, #68]	; (405ac0 <system_init_flash+0x58>)
  405a7c:	4298      	cmp	r0, r3
  405a7e:	d915      	bls.n	405aac <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  405a80:	4b10      	ldr	r3, [pc, #64]	; (405ac4 <system_init_flash+0x5c>)
  405a82:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405a84:	bf94      	ite	ls
  405a86:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405a8a:	4a0f      	ldrhi	r2, [pc, #60]	; (405ac8 <system_init_flash+0x60>)
  405a8c:	4b0f      	ldr	r3, [pc, #60]	; (405acc <system_init_flash+0x64>)
  405a8e:	601a      	str	r2, [r3, #0]
  405a90:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405a92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405a96:	4b0d      	ldr	r3, [pc, #52]	; (405acc <system_init_flash+0x64>)
  405a98:	601a      	str	r2, [r3, #0]
  405a9a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405a9c:	4a0c      	ldr	r2, [pc, #48]	; (405ad0 <system_init_flash+0x68>)
  405a9e:	4b0b      	ldr	r3, [pc, #44]	; (405acc <system_init_flash+0x64>)
  405aa0:	601a      	str	r2, [r3, #0]
  405aa2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405aa4:	4a0b      	ldr	r2, [pc, #44]	; (405ad4 <system_init_flash+0x6c>)
  405aa6:	4b09      	ldr	r3, [pc, #36]	; (405acc <system_init_flash+0x64>)
  405aa8:	601a      	str	r2, [r3, #0]
  405aaa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405aac:	4a0a      	ldr	r2, [pc, #40]	; (405ad8 <system_init_flash+0x70>)
  405aae:	4b07      	ldr	r3, [pc, #28]	; (405acc <system_init_flash+0x64>)
  405ab0:	601a      	str	r2, [r3, #0]
  405ab2:	4770      	bx	lr
  405ab4:	01312cff 	.word	0x01312cff
  405ab8:	026259ff 	.word	0x026259ff
  405abc:	039386ff 	.word	0x039386ff
  405ac0:	04c4b3ff 	.word	0x04c4b3ff
  405ac4:	05f5e0ff 	.word	0x05f5e0ff
  405ac8:	04000500 	.word	0x04000500
  405acc:	400e0c00 	.word	0x400e0c00
  405ad0:	04000100 	.word	0x04000100
  405ad4:	04000200 	.word	0x04000200
  405ad8:	04000300 	.word	0x04000300

00405adc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405adc:	4b0a      	ldr	r3, [pc, #40]	; (405b08 <_sbrk+0x2c>)
  405ade:	681b      	ldr	r3, [r3, #0]
  405ae0:	b153      	cbz	r3, 405af8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405ae2:	4b09      	ldr	r3, [pc, #36]	; (405b08 <_sbrk+0x2c>)
  405ae4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405ae6:	181a      	adds	r2, r3, r0
  405ae8:	4908      	ldr	r1, [pc, #32]	; (405b0c <_sbrk+0x30>)
  405aea:	4291      	cmp	r1, r2
  405aec:	db08      	blt.n	405b00 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  405aee:	4610      	mov	r0, r2
  405af0:	4a05      	ldr	r2, [pc, #20]	; (405b08 <_sbrk+0x2c>)
  405af2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405af4:	4618      	mov	r0, r3
  405af6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405af8:	4a05      	ldr	r2, [pc, #20]	; (405b10 <_sbrk+0x34>)
  405afa:	4b03      	ldr	r3, [pc, #12]	; (405b08 <_sbrk+0x2c>)
  405afc:	601a      	str	r2, [r3, #0]
  405afe:	e7f0      	b.n	405ae2 <_sbrk+0x6>
		return (caddr_t) -1;	
  405b00:	f04f 30ff 	mov.w	r0, #4294967295
}
  405b04:	4770      	bx	lr
  405b06:	bf00      	nop
  405b08:	2040c3dc 	.word	0x2040c3dc
  405b0c:	2045fffc 	.word	0x2045fffc
  405b10:	2040f258 	.word	0x2040f258

00405b14 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405b14:	f04f 30ff 	mov.w	r0, #4294967295
  405b18:	4770      	bx	lr

00405b1a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405b1e:	604b      	str	r3, [r1, #4]

	return 0;
}
  405b20:	2000      	movs	r0, #0
  405b22:	4770      	bx	lr

00405b24 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405b24:	2001      	movs	r0, #1
  405b26:	4770      	bx	lr

00405b28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405b28:	2000      	movs	r0, #0
  405b2a:	4770      	bx	lr

00405b2c <resolve_cb>:
* \param[in] hostIp Server IP.
*
* \return None.
*/
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405b2c:	b510      	push	{r4, lr}
  405b2e:	b082      	sub	sp, #8
  gu32HostIp = hostIp;
  405b30:	4b07      	ldr	r3, [pc, #28]	; (405b50 <resolve_cb+0x24>)
  405b32:	6019      	str	r1, [r3, #0]
  gbHostIpByName = true;
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
  (int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405b34:	0e0b      	lsrs	r3, r1, #24
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405b36:	9301      	str	r3, [sp, #4]
  405b38:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405b3c:	9300      	str	r3, [sp, #0]
  405b3e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405b42:	b2ca      	uxtb	r2, r1
  405b44:	4601      	mov	r1, r0
  405b46:	4803      	ldr	r0, [pc, #12]	; (405b54 <resolve_cb+0x28>)
  405b48:	4c03      	ldr	r4, [pc, #12]	; (405b58 <resolve_cb+0x2c>)
  405b4a:	47a0      	blx	r4
}
  405b4c:	b002      	add	sp, #8
  405b4e:	bd10      	pop	{r4, pc}
  405b50:	2040ced4 	.word	0x2040ced4
  405b54:	0040a520 	.word	0x0040a520
  405b58:	00406231 	.word	0x00406231

00405b5c <task_process>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_process(void *pvParameters) {
  405b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b60:	b085      	sub	sp, #20
  pmc_enable_periph_clk(LED_0_PIO_ID);
  405b62:	200c      	movs	r0, #12
  405b64:	4b8f      	ldr	r3, [pc, #572]	; (405da4 <task_process+0x248>)
  405b66:	4798      	blx	r3
  pio_set_output(LED_0_PIO, LED_0_PIO_PIN_MASK, HIGH, DISABLE, ENABLE);
  405b68:	2201      	movs	r2, #1
  405b6a:	9200      	str	r2, [sp, #0]
  405b6c:	2300      	movs	r3, #0
  405b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
  405b72:	488d      	ldr	r0, [pc, #564]	; (405da8 <task_process+0x24c>)
  405b74:	4c8d      	ldr	r4, [pc, #564]	; (405dac <task_process+0x250>)
  405b76:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405b78:	4b8d      	ldr	r3, [pc, #564]	; (405db0 <task_process+0x254>)
  405b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405b7e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405b80:	2280      	movs	r2, #128	; 0x80
  405b82:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  
  NVIC_EnableIRQ(BUT_1_PIO_ID);
  NVIC_SetPriority(BUT_1_PIO_ID, 4);
  pio_configure(BUT_1_PIO, PIO_INPUT, BUT_1_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  405b86:	4c8b      	ldr	r4, [pc, #556]	; (405db4 <task_process+0x258>)
  405b88:	2309      	movs	r3, #9
  405b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405b8e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405b92:	4620      	mov	r0, r4
  405b94:	4d88      	ldr	r5, [pc, #544]	; (405db8 <task_process+0x25c>)
  405b96:	47a8      	blx	r5
  pio_set_debounce_filter(BUT_1_PIO, BUT_1_PIO_PIN_MASK, 60);
  405b98:	223c      	movs	r2, #60	; 0x3c
  405b9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405b9e:	4620      	mov	r0, r4
  405ba0:	4b86      	ldr	r3, [pc, #536]	; (405dbc <task_process+0x260>)
  405ba2:	4798      	blx	r3
  pio_enable_interrupt(BUT_1_PIO, BUT_1_PIO_PIN_MASK);
  405ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405ba8:	4620      	mov	r0, r4
  405baa:	4b85      	ldr	r3, [pc, #532]	; (405dc0 <task_process+0x264>)
  405bac:	4798      	blx	r3
  pio_handler_set(BUT_1_PIO, BUT_1_PIO_ID, BUT_1_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but1_callback);
  405bae:	4b85      	ldr	r3, [pc, #532]	; (405dc4 <task_process+0x268>)
  405bb0:	9300      	str	r3, [sp, #0]
  405bb2:	2350      	movs	r3, #80	; 0x50
  405bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405bb8:	210a      	movs	r1, #10
  405bba:	4620      	mov	r0, r4
  405bbc:	4c82      	ldr	r4, [pc, #520]	; (405dc8 <task_process+0x26c>)
  405bbe:	47a0      	blx	r4

  printf("task process created \n");
  405bc0:	4882      	ldr	r0, [pc, #520]	; (405dcc <task_process+0x270>)
  405bc2:	4b83      	ldr	r3, [pc, #524]	; (405dd0 <task_process+0x274>)
  405bc4:	4798      	blx	r3
  vTaskDelay(1000);
  405bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405bca:	4b82      	ldr	r3, [pc, #520]	; (405dd4 <task_process+0x278>)
  405bcc:	4798      	blx	r3
    MSG,
    TIMEOUT,
    DONE,
  };

  enum states state = WAIT;
  405bce:	2600      	movs	r6, #0

      state = WAIT;
      break;

      case TIMEOUT:
      state = WAIT;
  405bd0:	46b0      	mov	r8, r6
      printf("STATE: DONE \n");
  405bd2:	f8df a264 	ldr.w	sl, [pc, #612]	; 405e38 <task_process+0x2dc>
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405bd6:	4d80      	ldr	r5, [pc, #512]	; (405dd8 <task_process+0x27c>)
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405bd8:	4c80      	ldr	r4, [pc, #512]	; (405ddc <task_process+0x280>)
			pio_set(LED_0_PIO, LED_0_PIO_PIN_MASK);
  405bda:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 405da8 <task_process+0x24c>
  405bde:	e0b2      	b.n	405d46 <task_process+0x1ea>
      printf("STATE: WAIT \n");
  405be0:	487f      	ldr	r0, [pc, #508]	; (405de0 <task_process+0x284>)
  405be2:	4b7b      	ldr	r3, [pc, #492]	; (405dd0 <task_process+0x274>)
  405be4:	4798      	blx	r3
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405be6:	4b7f      	ldr	r3, [pc, #508]	; (405de4 <task_process+0x288>)
  405be8:	781b      	ldrb	r3, [r3, #0]
  405bea:	2b00      	cmp	r3, #0
  405bec:	f040 80bc 	bne.w	405d68 <task_process+0x20c>
  405bf0:	f995 3000 	ldrsb.w	r3, [r5]
  405bf4:	2b00      	cmp	r3, #0
  405bf6:	f2c0 80b9 	blt.w	405d6c <task_process+0x210>
        vTaskDelay(10);
  405bfa:	4f76      	ldr	r7, [pc, #472]	; (405dd4 <task_process+0x278>)
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405bfc:	4e79      	ldr	r6, [pc, #484]	; (405de4 <task_process+0x288>)
        vTaskDelay(10);
  405bfe:	200a      	movs	r0, #10
  405c00:	47b8      	blx	r7
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405c02:	7833      	ldrb	r3, [r6, #0]
  405c04:	2b00      	cmp	r3, #0
  405c06:	f040 80b3 	bne.w	405d70 <task_process+0x214>
  405c0a:	f995 3000 	ldrsb.w	r3, [r5]
  405c0e:	2b00      	cmp	r3, #0
  405c10:	daf5      	bge.n	405bfe <task_process+0xa2>
      state = GET;
  405c12:	2601      	movs	r6, #1
  405c14:	e090      	b.n	405d38 <task_process+0x1dc>
      printf("STATE: GET \n");
  405c16:	4874      	ldr	r0, [pc, #464]	; (405de8 <task_process+0x28c>)
  405c18:	4b6d      	ldr	r3, [pc, #436]	; (405dd0 <task_process+0x274>)
  405c1a:	4798      	blx	r3
      sprintf((char *)g_sendBuffer, MAIN_PREFIX_BUFFER);
  405c1c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 405e3c <task_process+0x2e0>
  405c20:	465e      	mov	r6, fp
  405c22:	4f72      	ldr	r7, [pc, #456]	; (405dec <task_process+0x290>)
  405c24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  405c26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  405c28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  405c2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  405c2c:	e897 0003 	ldmia.w	r7, {r0, r1}
  405c30:	f846 0b04 	str.w	r0, [r6], #4
  405c34:	f826 1b02 	strh.w	r1, [r6], #2
  405c38:	0c09      	lsrs	r1, r1, #16
  405c3a:	7031      	strb	r1, [r6, #0]
      send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  405c3c:	4658      	mov	r0, fp
  405c3e:	4b6c      	ldr	r3, [pc, #432]	; (405df0 <task_process+0x294>)
  405c40:	4798      	blx	r3
  405c42:	4643      	mov	r3, r8
  405c44:	b282      	uxth	r2, r0
  405c46:	4659      	mov	r1, fp
  405c48:	f995 0000 	ldrsb.w	r0, [r5]
  405c4c:	4e69      	ldr	r6, [pc, #420]	; (405df4 <task_process+0x298>)
  405c4e:	47b0      	blx	r6
      state = ACK;
  405c50:	2602      	movs	r6, #2
      break;
  405c52:	e071      	b.n	405d38 <task_process+0x1dc>
      printf("STATE: ACK \n");
  405c54:	4868      	ldr	r0, [pc, #416]	; (405df8 <task_process+0x29c>)
  405c56:	4b5e      	ldr	r3, [pc, #376]	; (405dd0 <task_process+0x274>)
  405c58:	4798      	blx	r3
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405c5a:	4e68      	ldr	r6, [pc, #416]	; (405dfc <task_process+0x2a0>)
  405c5c:	f44f 67af 	mov.w	r7, #1400	; 0x578
  405c60:	463a      	mov	r2, r7
  405c62:	4641      	mov	r1, r8
  405c64:	4630      	mov	r0, r6
  405c66:	4b66      	ldr	r3, [pc, #408]	; (405e00 <task_process+0x2a4>)
  405c68:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405c6a:	4643      	mov	r3, r8
  405c6c:	463a      	mov	r2, r7
  405c6e:	4631      	mov	r1, r6
  405c70:	f995 0000 	ldrsb.w	r0, [r5]
  405c74:	4e63      	ldr	r6, [pc, #396]	; (405e04 <task_process+0x2a8>)
  405c76:	47b0      	blx	r6
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405c78:	4643      	mov	r3, r8
  405c7a:	f241 3288 	movw	r2, #5000	; 0x1388
  405c7e:	a903      	add	r1, sp, #12
  405c80:	4861      	ldr	r0, [pc, #388]	; (405e08 <task_process+0x2ac>)
  405c82:	6800      	ldr	r0, [r0, #0]
  405c84:	47a0      	blx	r4
  405c86:	2801      	cmp	r0, #1
  405c88:	d001      	beq.n	405c8e <task_process+0x132>
        state = TIMEOUT;
  405c8a:	2604      	movs	r6, #4
  405c8c:	e054      	b.n	405d38 <task_process+0x1dc>
        printf(STRING_LINE);
  405c8e:	4f5f      	ldr	r7, [pc, #380]	; (405e0c <task_process+0x2b0>)
  405c90:	4638      	mov	r0, r7
  405c92:	4e4f      	ldr	r6, [pc, #316]	; (405dd0 <task_process+0x274>)
  405c94:	47b0      	blx	r6
        printf(p_recvMsg->pu8Buffer);
  405c96:	9b03      	ldr	r3, [sp, #12]
  405c98:	6818      	ldr	r0, [r3, #0]
  405c9a:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  405c9c:	485c      	ldr	r0, [pc, #368]	; (405e10 <task_process+0x2b4>)
  405c9e:	47b0      	blx	r6
  405ca0:	4638      	mov	r0, r7
  405ca2:	47b0      	blx	r6
        state = MSG;
  405ca4:	2603      	movs	r6, #3
  405ca6:	e047      	b.n	405d38 <task_process+0x1dc>
      printf("STATE: MSG \n");
  405ca8:	485a      	ldr	r0, [pc, #360]	; (405e14 <task_process+0x2b8>)
  405caa:	4b49      	ldr	r3, [pc, #292]	; (405dd0 <task_process+0x274>)
  405cac:	4798      	blx	r3
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405cae:	4e53      	ldr	r6, [pc, #332]	; (405dfc <task_process+0x2a0>)
  405cb0:	f44f 67af 	mov.w	r7, #1400	; 0x578
  405cb4:	463a      	mov	r2, r7
  405cb6:	4641      	mov	r1, r8
  405cb8:	4630      	mov	r0, r6
  405cba:	4b51      	ldr	r3, [pc, #324]	; (405e00 <task_process+0x2a4>)
  405cbc:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405cbe:	4643      	mov	r3, r8
  405cc0:	463a      	mov	r2, r7
  405cc2:	4631      	mov	r1, r6
  405cc4:	f995 0000 	ldrsb.w	r0, [r5]
  405cc8:	4e4e      	ldr	r6, [pc, #312]	; (405e04 <task_process+0x2a8>)
  405cca:	47b0      	blx	r6
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405ccc:	4643      	mov	r3, r8
  405cce:	f241 3288 	movw	r2, #5000	; 0x1388
  405cd2:	a903      	add	r1, sp, #12
  405cd4:	484c      	ldr	r0, [pc, #304]	; (405e08 <task_process+0x2ac>)
  405cd6:	6800      	ldr	r0, [r0, #0]
  405cd8:	47a0      	blx	r4
  405cda:	2801      	cmp	r0, #1
  405cdc:	d001      	beq.n	405ce2 <task_process+0x186>
        state = TIMEOUT;
  405cde:	2604      	movs	r6, #4
  405ce0:	e02a      	b.n	405d38 <task_process+0x1dc>
        printf(STRING_LINE);
  405ce2:	4f4a      	ldr	r7, [pc, #296]	; (405e0c <task_process+0x2b0>)
  405ce4:	4638      	mov	r0, r7
  405ce6:	4e3a      	ldr	r6, [pc, #232]	; (405dd0 <task_process+0x274>)
  405ce8:	47b0      	blx	r6
        printf(p_recvMsg->pu8Buffer);
  405cea:	9b03      	ldr	r3, [sp, #12]
  405cec:	6818      	ldr	r0, [r3, #0]
  405cee:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  405cf0:	4847      	ldr	r0, [pc, #284]	; (405e10 <task_process+0x2b4>)
  405cf2:	47b0      	blx	r6
  405cf4:	4638      	mov	r0, r7
  405cf6:	47b0      	blx	r6
		char *led_match = strstr(p_recvMsg->pu8Buffer, "\"led\": \"");
  405cf8:	4947      	ldr	r1, [pc, #284]	; (405e18 <task_process+0x2bc>)
  405cfa:	9b03      	ldr	r3, [sp, #12]
  405cfc:	6818      	ldr	r0, [r3, #0]
  405cfe:	4b47      	ldr	r3, [pc, #284]	; (405e1c <task_process+0x2c0>)
  405d00:	4798      	blx	r3
		switch (led_status) {
  405d02:	7a03      	ldrb	r3, [r0, #8]
  405d04:	2b30      	cmp	r3, #48	; 0x30
  405d06:	d003      	beq.n	405d10 <task_process+0x1b4>
  405d08:	2b31      	cmp	r3, #49	; 0x31
  405d0a:	d008      	beq.n	405d1e <task_process+0x1c2>
        state = DONE;
  405d0c:	2605      	movs	r6, #5
  405d0e:	e013      	b.n	405d38 <task_process+0x1dc>
			pio_set(LED_0_PIO, LED_0_PIO_PIN_MASK);
  405d10:	f44f 7180 	mov.w	r1, #256	; 0x100
  405d14:	4648      	mov	r0, r9
  405d16:	4b42      	ldr	r3, [pc, #264]	; (405e20 <task_process+0x2c4>)
  405d18:	4798      	blx	r3
        state = DONE;
  405d1a:	2605      	movs	r6, #5
			break;
  405d1c:	e00c      	b.n	405d38 <task_process+0x1dc>
			pio_clear(LED_0_PIO, LED_0_PIO_PIN_MASK);
  405d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
  405d22:	4648      	mov	r0, r9
  405d24:	4b3f      	ldr	r3, [pc, #252]	; (405e24 <task_process+0x2c8>)
  405d26:	4798      	blx	r3
        state = DONE;
  405d28:	2605      	movs	r6, #5
			break;
  405d2a:	e005      	b.n	405d38 <task_process+0x1dc>
      printf("STATE: DONE \n");
  405d2c:	4650      	mov	r0, sl
  405d2e:	4b28      	ldr	r3, [pc, #160]	; (405dd0 <task_process+0x274>)
  405d30:	4798      	blx	r3
      state = WAIT;
  405d32:	4646      	mov	r6, r8
      break;
  405d34:	e000      	b.n	405d38 <task_process+0x1dc>
      state = WAIT;
  405d36:	4646      	mov	r6, r8
      break;

      default: state = WAIT;
    }
	
	if (xSemaphoreTake(xSemaphoreBut1, 0)) {
  405d38:	4643      	mov	r3, r8
  405d3a:	4642      	mov	r2, r8
  405d3c:	4641      	mov	r1, r8
  405d3e:	483a      	ldr	r0, [pc, #232]	; (405e28 <task_process+0x2cc>)
  405d40:	6800      	ldr	r0, [r0, #0]
  405d42:	47a0      	blx	r4
  405d44:	b9b0      	cbnz	r0, 405d74 <task_process+0x218>
    switch(state){
  405d46:	2e05      	cmp	r6, #5
  405d48:	d8f5      	bhi.n	405d36 <task_process+0x1da>
  405d4a:	a301      	add	r3, pc, #4	; (adr r3, 405d50 <task_process+0x1f4>)
  405d4c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
  405d50:	00405be1 	.word	0x00405be1
  405d54:	00405c17 	.word	0x00405c17
  405d58:	00405c55 	.word	0x00405c55
  405d5c:	00405ca9 	.word	0x00405ca9
  405d60:	00405d37 	.word	0x00405d37
  405d64:	00405d2d 	.word	0x00405d2d
      state = GET;
  405d68:	2601      	movs	r6, #1
  405d6a:	e7e5      	b.n	405d38 <task_process+0x1dc>
  405d6c:	2601      	movs	r6, #1
  405d6e:	e7e3      	b.n	405d38 <task_process+0x1dc>
  405d70:	2601      	movs	r6, #1
  405d72:	e7e1      	b.n	405d38 <task_process+0x1dc>
		puts("Button 1");
  405d74:	482d      	ldr	r0, [pc, #180]	; (405e2c <task_process+0x2d0>)
  405d76:	4b2e      	ldr	r3, [pc, #184]	; (405e30 <task_process+0x2d4>)
  405d78:	4798      	blx	r3

		if (pio_get(LED_0_PIO, PIO_OUTPUT_1, LED_0_PIO_PIN_MASK)) {
  405d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
  405d7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  405d82:	4648      	mov	r0, r9
  405d84:	4b2b      	ldr	r3, [pc, #172]	; (405e34 <task_process+0x2d8>)
  405d86:	4798      	blx	r3
  405d88:	b128      	cbz	r0, 405d96 <task_process+0x23a>
			pio_clear(LED_0_PIO, LED_0_PIO_PIN_MASK);
  405d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
  405d8e:	4648      	mov	r0, r9
  405d90:	4b24      	ldr	r3, [pc, #144]	; (405e24 <task_process+0x2c8>)
  405d92:	4798      	blx	r3
  405d94:	e7d7      	b.n	405d46 <task_process+0x1ea>
		}
		else {
			pio_set(LED_0_PIO, LED_0_PIO_PIN_MASK);
  405d96:	f44f 7180 	mov.w	r1, #256	; 0x100
  405d9a:	4648      	mov	r0, r9
  405d9c:	4b20      	ldr	r3, [pc, #128]	; (405e20 <task_process+0x2c4>)
  405d9e:	4798      	blx	r3
  405da0:	e7d1      	b.n	405d46 <task_process+0x1ea>
  405da2:	bf00      	nop
  405da4:	004055b5 	.word	0x004055b5
  405da8:	400e1200 	.word	0x400e1200
  405dac:	004050bf 	.word	0x004050bf
  405db0:	e000e100 	.word	0xe000e100
  405db4:	400e0e00 	.word	0x400e0e00
  405db8:	004050e9 	.word	0x004050e9
  405dbc:	00404fbb 	.word	0x00404fbb
  405dc0:	004051ab 	.word	0x004051ab
  405dc4:	00405e41 	.word	0x00405e41
  405dc8:	0040533d 	.word	0x0040533d
  405dcc:	0040a598 	.word	0x0040a598
  405dd0:	00406231 	.word	0x00406231
  405dd4:	004017dd 	.word	0x004017dd
  405dd8:	20400020 	.word	0x20400020
  405ddc:	00400fb5 	.word	0x00400fb5
  405de0:	0040a5b0 	.word	0x0040a5b0
  405de4:	2040ced0 	.word	0x2040ced0
  405de8:	0040a5c0 	.word	0x0040a5c0
  405dec:	0040a5d0 	.word	0x0040a5d0
  405df0:	00406681 	.word	0x00406681
  405df4:	00404a7d 	.word	0x00404a7d
  405df8:	0040a5f8 	.word	0x0040a5f8
  405dfc:	2040c3e0 	.word	0x2040c3e0
  405e00:	0040638d 	.word	0x0040638d
  405e04:	00404b19 	.word	0x00404b19
  405e08:	2040d020 	.word	0x2040d020
  405e0c:	0040a4bc 	.word	0x0040a4bc
  405e10:	0040a5f4 	.word	0x0040a5f4
  405e14:	0040a608 	.word	0x0040a608
  405e18:	0040a618 	.word	0x0040a618
  405e1c:	00406a0d 	.word	0x00406a0d
  405e20:	00404fd5 	.word	0x00404fd5
  405e24:	00404fd9 	.word	0x00404fd9
  405e28:	2040d024 	.word	0x2040d024
  405e2c:	0040a634 	.word	0x0040a634
  405e30:	004064c5 	.word	0x004064c5
  405e34:	00404fdd 	.word	0x00404fdd
  405e38:	0040a624 	.word	0x0040a624
  405e3c:	2040c958 	.word	0x2040c958

00405e40 <but1_callback>:
static void but1_callback(void) {
  405e40:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xSemaphoreBut1, pdFALSE);
  405e42:	2100      	movs	r1, #0
  405e44:	4b02      	ldr	r3, [pc, #8]	; (405e50 <but1_callback+0x10>)
  405e46:	6818      	ldr	r0, [r3, #0]
  405e48:	4b02      	ldr	r3, [pc, #8]	; (405e54 <but1_callback+0x14>)
  405e4a:	4798      	blx	r3
  405e4c:	bd08      	pop	{r3, pc}
  405e4e:	bf00      	nop
  405e50:	2040d024 	.word	0x2040d024
  405e54:	00400ed5 	.word	0x00400ed5

00405e58 <task_wifi>:
		}
	}
  }
}

static void task_wifi(void *pvParameters) {
  405e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e5a:	b08d      	sub	sp, #52	; 0x34
  tstrWifiInitParam param;
  struct sockaddr_in addr_in;

  xSemaphore = xSemaphoreCreateCounting(20,0);
  405e5c:	2100      	movs	r1, #0
  405e5e:	2014      	movs	r0, #20
  405e60:	4b3b      	ldr	r3, [pc, #236]	; (405f50 <task_wifi+0xf8>)
  405e62:	4798      	blx	r3
  405e64:	4b3b      	ldr	r3, [pc, #236]	; (405f54 <task_wifi+0xfc>)
  405e66:	6018      	str	r0, [r3, #0]
  xQueueMsg = xQueueCreate(10, sizeof(tstrSocketRecvMsg));
  405e68:	2200      	movs	r2, #0
  405e6a:	2118      	movs	r1, #24
  405e6c:	200a      	movs	r0, #10
  405e6e:	4b3a      	ldr	r3, [pc, #232]	; (405f58 <task_wifi+0x100>)
  405e70:	4798      	blx	r3
  405e72:	4b3a      	ldr	r3, [pc, #232]	; (405f5c <task_wifi+0x104>)
  405e74:	6018      	str	r0, [r3, #0]

  /* Initialize the BSP. */
  nm_bsp_init();
  405e76:	4b3a      	ldr	r3, [pc, #232]	; (405f60 <task_wifi+0x108>)
  405e78:	4798      	blx	r3

  /* Initialize Wi-Fi parameters structure. */
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405e7a:	2300      	movs	r3, #0
  405e7c:	9307      	str	r3, [sp, #28]
  405e7e:	9308      	str	r3, [sp, #32]
  405e80:	9309      	str	r3, [sp, #36]	; 0x24
  405e82:	930a      	str	r3, [sp, #40]	; 0x28
  405e84:	930b      	str	r3, [sp, #44]	; 0x2c

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
  405e86:	4b37      	ldr	r3, [pc, #220]	; (405f64 <task_wifi+0x10c>)
  405e88:	9306      	str	r3, [sp, #24]
  int8_t ret = m2m_wifi_init(&param);
  405e8a:	a806      	add	r0, sp, #24
  405e8c:	4b36      	ldr	r3, [pc, #216]	; (405f68 <task_wifi+0x110>)
  405e8e:	4798      	blx	r3
  if (M2M_SUCCESS != ret) {
  405e90:	b120      	cbz	r0, 405e9c <task_wifi+0x44>
  405e92:	4601      	mov	r1, r0
    printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405e94:	4835      	ldr	r0, [pc, #212]	; (405f6c <task_wifi+0x114>)
  405e96:	4b36      	ldr	r3, [pc, #216]	; (405f70 <task_wifi+0x118>)
  405e98:	4798      	blx	r3
  405e9a:	e7fe      	b.n	405e9a <task_wifi+0x42>
    while (1) { }
  }

  /* Initialize socket module. */
  socketInit();
  405e9c:	4b35      	ldr	r3, [pc, #212]	; (405f74 <task_wifi+0x11c>)
  405e9e:	4798      	blx	r3

  /* Register socket callback function. */
  registerSocketCallback(socket_cb, resolve_cb);
  405ea0:	4935      	ldr	r1, [pc, #212]	; (405f78 <task_wifi+0x120>)
  405ea2:	4836      	ldr	r0, [pc, #216]	; (405f7c <task_wifi+0x124>)
  405ea4:	4b36      	ldr	r3, [pc, #216]	; (405f80 <task_wifi+0x128>)
  405ea6:	4798      	blx	r3

  /* Connect to router. */
  printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405ea8:	4d36      	ldr	r5, [pc, #216]	; (405f84 <task_wifi+0x12c>)
  405eaa:	4629      	mov	r1, r5
  405eac:	4836      	ldr	r0, [pc, #216]	; (405f88 <task_wifi+0x130>)
  405eae:	4c30      	ldr	r4, [pc, #192]	; (405f70 <task_wifi+0x118>)
  405eb0:	47a0      	blx	r4
  m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405eb2:	23ff      	movs	r3, #255	; 0xff
  405eb4:	9300      	str	r3, [sp, #0]
  405eb6:	4b35      	ldr	r3, [pc, #212]	; (405f8c <task_wifi+0x134>)
  405eb8:	2202      	movs	r2, #2
  405eba:	2107      	movs	r1, #7
  405ebc:	4628      	mov	r0, r5
  405ebe:	4d34      	ldr	r5, [pc, #208]	; (405f90 <task_wifi+0x138>)
  405ec0:	47a8      	blx	r5

  /* formata ip */
  addr_in.sin_family = AF_INET;
  405ec2:	2302      	movs	r3, #2
  405ec4:	f8ad 3008 	strh.w	r3, [sp, #8]
  addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405ec8:	f648 0313 	movw	r3, #34835	; 0x8813
  405ecc:	f8ad 300a 	strh.w	r3, [sp, #10]
  inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405ed0:	a903      	add	r1, sp, #12
  405ed2:	4830      	ldr	r0, [pc, #192]	; (405f94 <task_wifi+0x13c>)
  405ed4:	4b30      	ldr	r3, [pc, #192]	; (405f98 <task_wifi+0x140>)
  405ed6:	4798      	blx	r3

  printf(STRING_LINE);
  405ed8:	4830      	ldr	r0, [pc, #192]	; (405f9c <task_wifi+0x144>)
  405eda:	47a0      	blx	r4

  while(1){
    vTaskDelay(50);
  405edc:	4e30      	ldr	r6, [pc, #192]	; (405fa0 <task_wifi+0x148>)
    m2m_wifi_handle_events(NULL);
  405ede:	4d31      	ldr	r5, [pc, #196]	; (405fa4 <task_wifi+0x14c>)

    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405ee0:	4c31      	ldr	r4, [pc, #196]	; (405fa8 <task_wifi+0x150>)
  405ee2:	e001      	b.n	405ee8 <task_wifi+0x90>
      /* Open client socket. */
      if (tcp_client_socket < 0) {
        printf(STRING_LINE);
        printf("socket init \n");
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
          printf("main: failed to create TCP client socket error!\r\n");
  405ee4:	4831      	ldr	r0, [pc, #196]	; (405fac <task_wifi+0x154>)
  405ee6:	47b8      	blx	r7
    vTaskDelay(50);
  405ee8:	2032      	movs	r0, #50	; 0x32
  405eea:	47b0      	blx	r6
    m2m_wifi_handle_events(NULL);
  405eec:	2000      	movs	r0, #0
  405eee:	47a8      	blx	r5
    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405ef0:	7823      	ldrb	r3, [r4, #0]
  405ef2:	2b01      	cmp	r3, #1
  405ef4:	d1f8      	bne.n	405ee8 <task_wifi+0x90>
      if (tcp_client_socket < 0) {
  405ef6:	4b2e      	ldr	r3, [pc, #184]	; (405fb0 <task_wifi+0x158>)
  405ef8:	f993 3000 	ldrsb.w	r3, [r3]
  405efc:	2b00      	cmp	r3, #0
  405efe:	daf3      	bge.n	405ee8 <task_wifi+0x90>
        printf(STRING_LINE);
  405f00:	4826      	ldr	r0, [pc, #152]	; (405f9c <task_wifi+0x144>)
  405f02:	4f1b      	ldr	r7, [pc, #108]	; (405f70 <task_wifi+0x118>)
  405f04:	47b8      	blx	r7
        printf("socket init \n");
  405f06:	482b      	ldr	r0, [pc, #172]	; (405fb4 <task_wifi+0x15c>)
  405f08:	47b8      	blx	r7
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405f0a:	2200      	movs	r2, #0
  405f0c:	2101      	movs	r1, #1
  405f0e:	2002      	movs	r0, #2
  405f10:	4b29      	ldr	r3, [pc, #164]	; (405fb8 <task_wifi+0x160>)
  405f12:	4798      	blx	r3
  405f14:	4b26      	ldr	r3, [pc, #152]	; (405fb0 <task_wifi+0x158>)
  405f16:	7018      	strb	r0, [r3, #0]
  405f18:	2800      	cmp	r0, #0
  405f1a:	dbe3      	blt.n	405ee4 <task_wifi+0x8c>
          continue;
        }

        /* Connect server */
        printf("socket connecting\n");
  405f1c:	4827      	ldr	r0, [pc, #156]	; (405fbc <task_wifi+0x164>)
  405f1e:	4b14      	ldr	r3, [pc, #80]	; (405f70 <task_wifi+0x118>)
  405f20:	4798      	blx	r3
        if (connect(tcp_client_socket, (struct sockaddr *)&addr_in,
  405f22:	2210      	movs	r2, #16
  405f24:	a902      	add	r1, sp, #8
  405f26:	4b22      	ldr	r3, [pc, #136]	; (405fb0 <task_wifi+0x158>)
  405f28:	f993 0000 	ldrsb.w	r0, [r3]
  405f2c:	4b24      	ldr	r3, [pc, #144]	; (405fc0 <task_wifi+0x168>)
  405f2e:	4798      	blx	r3
  405f30:	b918      	cbnz	r0, 405f3a <task_wifi+0xe2>
        sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
          close(tcp_client_socket);
          tcp_client_socket = -1;
          printf("main: error connect to socket\n");
          }else{
          gbTcpConnection = true;
  405f32:	2201      	movs	r2, #1
  405f34:	4b23      	ldr	r3, [pc, #140]	; (405fc4 <task_wifi+0x16c>)
  405f36:	701a      	strb	r2, [r3, #0]
  405f38:	e7d6      	b.n	405ee8 <task_wifi+0x90>
          close(tcp_client_socket);
  405f3a:	4f1d      	ldr	r7, [pc, #116]	; (405fb0 <task_wifi+0x158>)
  405f3c:	f997 0000 	ldrsb.w	r0, [r7]
  405f40:	4b21      	ldr	r3, [pc, #132]	; (405fc8 <task_wifi+0x170>)
  405f42:	4798      	blx	r3
          tcp_client_socket = -1;
  405f44:	23ff      	movs	r3, #255	; 0xff
  405f46:	703b      	strb	r3, [r7, #0]
          printf("main: error connect to socket\n");
  405f48:	4820      	ldr	r0, [pc, #128]	; (405fcc <task_wifi+0x174>)
  405f4a:	4b09      	ldr	r3, [pc, #36]	; (405f70 <task_wifi+0x118>)
  405f4c:	4798      	blx	r3
  405f4e:	e7cb      	b.n	405ee8 <task_wifi+0x90>
  405f50:	00400b91 	.word	0x00400b91
  405f54:	2040d028 	.word	0x2040d028
  405f58:	00400b15 	.word	0x00400b15
  405f5c:	2040d020 	.word	0x2040d020
  405f60:	004022b5 	.word	0x004022b5
  405f64:	00406089 	.word	0x00406089
  405f68:	00403105 	.word	0x00403105
  405f6c:	0040a640 	.word	0x0040a640
  405f70:	00406231 	.word	0x00406231
  405f74:	004048b5 	.word	0x004048b5
  405f78:	00405b2d 	.word	0x00405b2d
  405f7c:	00405fd1 	.word	0x00405fd1
  405f80:	004048f9 	.word	0x004048f9
  405f84:	0040a668 	.word	0x0040a668
  405f88:	0040a670 	.word	0x0040a670
  405f8c:	0040a694 	.word	0x0040a694
  405f90:	0040345d 	.word	0x0040345d
  405f94:	0040a6a0 	.word	0x0040a6a0
  405f98:	004003f5 	.word	0x004003f5
  405f9c:	0040a4bc 	.word	0x0040a4bc
  405fa0:	004017dd 	.word	0x004017dd
  405fa4:	00403201 	.word	0x00403201
  405fa8:	2040ced8 	.word	0x2040ced8
  405fac:	0040a6c0 	.word	0x0040a6c0
  405fb0:	20400020 	.word	0x20400020
  405fb4:	0040a6b0 	.word	0x0040a6b0
  405fb8:	0040490d 	.word	0x0040490d
  405fbc:	0040a6f4 	.word	0x0040a6f4
  405fc0:	004049ed 	.word	0x004049ed
  405fc4:	2040ced0 	.word	0x2040ced0
  405fc8:	00404bb9 	.word	0x00404bb9
  405fcc:	0040a708 	.word	0x0040a708

00405fd0 <socket_cb>:
  if (sock == tcp_client_socket) {
  405fd0:	4b23      	ldr	r3, [pc, #140]	; (406060 <socket_cb+0x90>)
  405fd2:	f993 3000 	ldrsb.w	r3, [r3]
  405fd6:	4283      	cmp	r3, r0
  405fd8:	d000      	beq.n	405fdc <socket_cb+0xc>
  405fda:	4770      	bx	lr
{
  405fdc:	b510      	push	{r4, lr}
  405fde:	b082      	sub	sp, #8
  405fe0:	4614      	mov	r4, r2
    switch (u8Msg) {
  405fe2:	2905      	cmp	r1, #5
  405fe4:	d003      	beq.n	405fee <socket_cb+0x1e>
  405fe6:	2906      	cmp	r1, #6
  405fe8:	d01f      	beq.n	40602a <socket_cb+0x5a>
}
  405fea:	b002      	add	sp, #8
  405fec:	bd10      	pop	{r4, pc}
        printf("socket_msg_connect\n");
  405fee:	481d      	ldr	r0, [pc, #116]	; (406064 <socket_cb+0x94>)
  405ff0:	4b1d      	ldr	r3, [pc, #116]	; (406068 <socket_cb+0x98>)
  405ff2:	4798      	blx	r3
        if (gbTcpConnection) {
  405ff4:	4b1d      	ldr	r3, [pc, #116]	; (40606c <socket_cb+0x9c>)
  405ff6:	781b      	ldrb	r3, [r3, #0]
  405ff8:	2b00      	cmp	r3, #0
  405ffa:	d0f6      	beq.n	405fea <socket_cb+0x1a>
          if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  405ffc:	b13c      	cbz	r4, 40600e <socket_cb+0x3e>
  405ffe:	f994 3001 	ldrsb.w	r3, [r4, #1]
  406002:	2b00      	cmp	r3, #0
  406004:	db03      	blt.n	40600e <socket_cb+0x3e>
            printf("socket_cb: connect ok \n");
  406006:	481a      	ldr	r0, [pc, #104]	; (406070 <socket_cb+0xa0>)
  406008:	4b17      	ldr	r3, [pc, #92]	; (406068 <socket_cb+0x98>)
  40600a:	4798      	blx	r3
            gbTcpConnected = true;
  40600c:	e7ed      	b.n	405fea <socket_cb+0x1a>
            printf("socket_cb: connect error!\r\n");
  40600e:	4819      	ldr	r0, [pc, #100]	; (406074 <socket_cb+0xa4>)
  406010:	4b15      	ldr	r3, [pc, #84]	; (406068 <socket_cb+0x98>)
  406012:	4798      	blx	r3
            gbTcpConnection = false;
  406014:	2200      	movs	r2, #0
  406016:	4b15      	ldr	r3, [pc, #84]	; (40606c <socket_cb+0x9c>)
  406018:	701a      	strb	r2, [r3, #0]
            close(tcp_client_socket);
  40601a:	4c11      	ldr	r4, [pc, #68]	; (406060 <socket_cb+0x90>)
  40601c:	f994 0000 	ldrsb.w	r0, [r4]
  406020:	4b15      	ldr	r3, [pc, #84]	; (406078 <socket_cb+0xa8>)
  406022:	4798      	blx	r3
            tcp_client_socket = -1;
  406024:	23ff      	movs	r3, #255	; 0xff
  406026:	7023      	strb	r3, [r4, #0]
  406028:	e7df      	b.n	405fea <socket_cb+0x1a>
        tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  40602a:	9201      	str	r2, [sp, #4]
        if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  40602c:	b18a      	cbz	r2, 406052 <socket_cb+0x82>
  40602e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  406032:	2a00      	cmp	r2, #0
  406034:	dd0d      	ble.n	406052 <socket_cb+0x82>
          xQueueSend(xQueueMsg, &pstrRecv, 10);
  406036:	2300      	movs	r3, #0
  406038:	220a      	movs	r2, #10
  40603a:	a901      	add	r1, sp, #4
  40603c:	480f      	ldr	r0, [pc, #60]	; (40607c <socket_cb+0xac>)
  40603e:	6800      	ldr	r0, [r0, #0]
  406040:	4c0f      	ldr	r4, [pc, #60]	; (406080 <socket_cb+0xb0>)
  406042:	47a0      	blx	r4
          xSemaphoreGive( xSemaphore );
  406044:	2300      	movs	r3, #0
  406046:	461a      	mov	r2, r3
  406048:	4619      	mov	r1, r3
  40604a:	480e      	ldr	r0, [pc, #56]	; (406084 <socket_cb+0xb4>)
  40604c:	6800      	ldr	r0, [r0, #0]
  40604e:	47a0      	blx	r4
  406050:	e7cb      	b.n	405fea <socket_cb+0x1a>
          close(tcp_client_socket);
  406052:	4618      	mov	r0, r3
  406054:	4b08      	ldr	r3, [pc, #32]	; (406078 <socket_cb+0xa8>)
  406056:	4798      	blx	r3
          tcp_client_socket = -1;
  406058:	22ff      	movs	r2, #255	; 0xff
  40605a:	4b01      	ldr	r3, [pc, #4]	; (406060 <socket_cb+0x90>)
  40605c:	701a      	strb	r2, [r3, #0]
}
  40605e:	e7c4      	b.n	405fea <socket_cb+0x1a>
  406060:	20400020 	.word	0x20400020
  406064:	0040a550 	.word	0x0040a550
  406068:	00406231 	.word	0x00406231
  40606c:	2040ced0 	.word	0x2040ced0
  406070:	0040a564 	.word	0x0040a564
  406074:	0040a57c 	.word	0x0040a57c
  406078:	00404bb9 	.word	0x00404bb9
  40607c:	2040d020 	.word	0x2040d020
  406080:	00400bf1 	.word	0x00400bf1
  406084:	2040d028 	.word	0x2040d028

00406088 <wifi_cb>:
{
  406088:	b510      	push	{r4, lr}
  40608a:	b082      	sub	sp, #8
  switch (u8MsgType) {
  40608c:	282c      	cmp	r0, #44	; 0x2c
  40608e:	d005      	beq.n	40609c <wifi_cb+0x14>
  406090:	2832      	cmp	r0, #50	; 0x32
  406092:	d015      	beq.n	4060c0 <wifi_cb+0x38>
  406094:	281b      	cmp	r0, #27
  406096:	d020      	beq.n	4060da <wifi_cb+0x52>
}
  406098:	b002      	add	sp, #8
  40609a:	bd10      	pop	{r4, pc}
      if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  40609c:	780b      	ldrb	r3, [r1, #0]
  40609e:	2b01      	cmp	r3, #1
  4060a0:	d008      	beq.n	4060b4 <wifi_cb+0x2c>
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4060a2:	2b00      	cmp	r3, #0
  4060a4:	d1f8      	bne.n	406098 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  4060a6:	4813      	ldr	r0, [pc, #76]	; (4060f4 <wifi_cb+0x6c>)
  4060a8:	4b13      	ldr	r3, [pc, #76]	; (4060f8 <wifi_cb+0x70>)
  4060aa:	4798      	blx	r3
        wifi_connected = 0;
  4060ac:	2200      	movs	r2, #0
  4060ae:	4b13      	ldr	r3, [pc, #76]	; (4060fc <wifi_cb+0x74>)
  4060b0:	701a      	strb	r2, [r3, #0]
  4060b2:	e7f1      	b.n	406098 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  4060b4:	4812      	ldr	r0, [pc, #72]	; (406100 <wifi_cb+0x78>)
  4060b6:	4b10      	ldr	r3, [pc, #64]	; (4060f8 <wifi_cb+0x70>)
  4060b8:	4798      	blx	r3
        m2m_wifi_request_dhcp_client();
  4060ba:	4b12      	ldr	r3, [pc, #72]	; (406104 <wifi_cb+0x7c>)
  4060bc:	4798      	blx	r3
  4060be:	e7eb      	b.n	406098 <wifi_cb+0x10>
      printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4060c0:	788b      	ldrb	r3, [r1, #2]
  4060c2:	784a      	ldrb	r2, [r1, #1]
  4060c4:	7808      	ldrb	r0, [r1, #0]
  4060c6:	78c9      	ldrb	r1, [r1, #3]
  4060c8:	9100      	str	r1, [sp, #0]
  4060ca:	4601      	mov	r1, r0
  4060cc:	480e      	ldr	r0, [pc, #56]	; (406108 <wifi_cb+0x80>)
  4060ce:	4c0a      	ldr	r4, [pc, #40]	; (4060f8 <wifi_cb+0x70>)
  4060d0:	47a0      	blx	r4
      wifi_connected = M2M_WIFI_CONNECTED;
  4060d2:	2201      	movs	r2, #1
  4060d4:	4b09      	ldr	r3, [pc, #36]	; (4060fc <wifi_cb+0x74>)
  4060d6:	701a      	strb	r2, [r3, #0]
      break;
  4060d8:	e7de      	b.n	406098 <wifi_cb+0x10>
      printf("socket_cb: Year: %d, Month: %d, The GMT time is %u:%02u:%02u\r\n",
  4060da:	790b      	ldrb	r3, [r1, #4]
  4060dc:	788a      	ldrb	r2, [r1, #2]
  4060de:	8808      	ldrh	r0, [r1, #0]
  4060e0:	798c      	ldrb	r4, [r1, #6]
  4060e2:	9401      	str	r4, [sp, #4]
  4060e4:	7949      	ldrb	r1, [r1, #5]
  4060e6:	9100      	str	r1, [sp, #0]
  4060e8:	4601      	mov	r1, r0
  4060ea:	4808      	ldr	r0, [pc, #32]	; (40610c <wifi_cb+0x84>)
  4060ec:	4c02      	ldr	r4, [pc, #8]	; (4060f8 <wifi_cb+0x70>)
  4060ee:	47a0      	blx	r4
}
  4060f0:	e7d2      	b.n	406098 <wifi_cb+0x10>
  4060f2:	bf00      	nop
  4060f4:	0040a760 	.word	0x0040a760
  4060f8:	00406231 	.word	0x00406231
  4060fc:	2040ced8 	.word	0x2040ced8
  406100:	0040a740 	.word	0x0040a740
  406104:	00403479 	.word	0x00403479
  406108:	0040a784 	.word	0x0040a784
  40610c:	0040a7ac 	.word	0x0040a7ac

00406110 <vApplicationStackOverflowHook>:
signed char *pcTaskName){
  406110:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  406112:	460a      	mov	r2, r1
  406114:	4601      	mov	r1, r0
  406116:	4802      	ldr	r0, [pc, #8]	; (406120 <vApplicationStackOverflowHook+0x10>)
  406118:	4b02      	ldr	r3, [pc, #8]	; (406124 <vApplicationStackOverflowHook+0x14>)
  40611a:	4798      	blx	r3
  40611c:	e7fe      	b.n	40611c <vApplicationStackOverflowHook+0xc>
  40611e:	bf00      	nop
  406120:	0040a728 	.word	0x0040a728
  406124:	00406231 	.word	0x00406231

00406128 <vApplicationTickHook>:
extern void vApplicationTickHook(void){}
  406128:	4770      	bx	lr

0040612a <vApplicationMallocFailedHook>:
  40612a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40612e:	b672      	cpsid	i
  406130:	f383 8811 	msr	BASEPRI, r3
  406134:	f3bf 8f6f 	isb	sy
  406138:	f3bf 8f4f 	dsb	sy
  40613c:	b662      	cpsie	i
  40613e:	e7fe      	b.n	40613e <vApplicationMallocFailedHook+0x14>

00406140 <main>:
    }
  }
}

int main(void)
{
  406140:	b500      	push	{lr}
  406142:	b085      	sub	sp, #20
  /* Initialize the board. */
  sysclk_init();
  406144:	4b17      	ldr	r3, [pc, #92]	; (4061a4 <main+0x64>)
  406146:	4798      	blx	r3
  board_init();
  406148:	4b17      	ldr	r3, [pc, #92]	; (4061a8 <main+0x68>)
  40614a:	4798      	blx	r3

  /* Initialize the UART console. */
  configure_console();
  40614c:	4b17      	ldr	r3, [pc, #92]	; (4061ac <main+0x6c>)
  40614e:	4798      	blx	r3
  printf(STRING_HEADER);
  406150:	4817      	ldr	r0, [pc, #92]	; (4061b0 <main+0x70>)
  406152:	4b18      	ldr	r3, [pc, #96]	; (4061b4 <main+0x74>)
  406154:	4798      	blx	r3

  xSemaphoreBut1 = xSemaphoreCreateBinary();
  406156:	2203      	movs	r2, #3
  406158:	2100      	movs	r1, #0
  40615a:	2001      	movs	r0, #1
  40615c:	4b16      	ldr	r3, [pc, #88]	; (4061b8 <main+0x78>)
  40615e:	4798      	blx	r3
  406160:	4b16      	ldr	r3, [pc, #88]	; (4061bc <main+0x7c>)
  406162:	6018      	str	r0, [r3, #0]
  if (xSemaphoreBut1 == NULL) {
  406164:	b1d0      	cbz	r0, 40619c <main+0x5c>
	  printf("Failed to create But1 semaphore\n");
  }

  xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL, TASK_WIFI_PRIORITY, &xHandleWifi);
  406166:	2400      	movs	r4, #0
  406168:	9403      	str	r4, [sp, #12]
  40616a:	9402      	str	r4, [sp, #8]
  40616c:	4b14      	ldr	r3, [pc, #80]	; (4061c0 <main+0x80>)
  40616e:	9301      	str	r3, [sp, #4]
  406170:	2301      	movs	r3, #1
  406172:	9300      	str	r3, [sp, #0]
  406174:	4623      	mov	r3, r4
  406176:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  40617a:	4912      	ldr	r1, [pc, #72]	; (4061c4 <main+0x84>)
  40617c:	4812      	ldr	r0, [pc, #72]	; (4061c8 <main+0x88>)
  40617e:	4d13      	ldr	r5, [pc, #76]	; (4061cc <main+0x8c>)
  406180:	47a8      	blx	r5
  xTaskCreate(task_process, "process", TASK_PROCESS_STACK_SIZE, NULL, TASK_PROCESS_PRIORITY,  NULL );
  406182:	9403      	str	r4, [sp, #12]
  406184:	9402      	str	r4, [sp, #8]
  406186:	9401      	str	r4, [sp, #4]
  406188:	9400      	str	r4, [sp, #0]
  40618a:	4623      	mov	r3, r4
  40618c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406190:	490f      	ldr	r1, [pc, #60]	; (4061d0 <main+0x90>)
  406192:	4810      	ldr	r0, [pc, #64]	; (4061d4 <main+0x94>)
  406194:	47a8      	blx	r5

  vTaskStartScheduler();
  406196:	4b10      	ldr	r3, [pc, #64]	; (4061d8 <main+0x98>)
  406198:	4798      	blx	r3
  40619a:	e7fe      	b.n	40619a <main+0x5a>
	  printf("Failed to create But1 semaphore\n");
  40619c:	480f      	ldr	r0, [pc, #60]	; (4061dc <main+0x9c>)
  40619e:	4b05      	ldr	r3, [pc, #20]	; (4061b4 <main+0x74>)
  4061a0:	4798      	blx	r3
  4061a2:	e7e0      	b.n	406166 <main+0x26>
  4061a4:	00404d1d 	.word	0x00404d1d
  4061a8:	00404e19 	.word	0x00404e19
  4061ac:	0040035d 	.word	0x0040035d
  4061b0:	0040a464 	.word	0x0040a464
  4061b4:	00406231 	.word	0x00406231
  4061b8:	00400b15 	.word	0x00400b15
  4061bc:	2040d024 	.word	0x2040d024
  4061c0:	2040cedc 	.word	0x2040cedc
  4061c4:	0040a510 	.word	0x0040a510
  4061c8:	00405e59 	.word	0x00405e59
  4061cc:	00401295 	.word	0x00401295
  4061d0:	0040a518 	.word	0x0040a518
  4061d4:	00405b5d 	.word	0x00405b5d
  4061d8:	004014c9 	.word	0x004014c9
  4061dc:	0040a4ec 	.word	0x0040a4ec

004061e0 <__libc_init_array>:
  4061e0:	b570      	push	{r4, r5, r6, lr}
  4061e2:	4e0f      	ldr	r6, [pc, #60]	; (406220 <__libc_init_array+0x40>)
  4061e4:	4d0f      	ldr	r5, [pc, #60]	; (406224 <__libc_init_array+0x44>)
  4061e6:	1b76      	subs	r6, r6, r5
  4061e8:	10b6      	asrs	r6, r6, #2
  4061ea:	bf18      	it	ne
  4061ec:	2400      	movne	r4, #0
  4061ee:	d005      	beq.n	4061fc <__libc_init_array+0x1c>
  4061f0:	3401      	adds	r4, #1
  4061f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4061f6:	4798      	blx	r3
  4061f8:	42a6      	cmp	r6, r4
  4061fa:	d1f9      	bne.n	4061f0 <__libc_init_array+0x10>
  4061fc:	4e0a      	ldr	r6, [pc, #40]	; (406228 <__libc_init_array+0x48>)
  4061fe:	4d0b      	ldr	r5, [pc, #44]	; (40622c <__libc_init_array+0x4c>)
  406200:	1b76      	subs	r6, r6, r5
  406202:	f004 fba7 	bl	40a954 <_init>
  406206:	10b6      	asrs	r6, r6, #2
  406208:	bf18      	it	ne
  40620a:	2400      	movne	r4, #0
  40620c:	d006      	beq.n	40621c <__libc_init_array+0x3c>
  40620e:	3401      	adds	r4, #1
  406210:	f855 3b04 	ldr.w	r3, [r5], #4
  406214:	4798      	blx	r3
  406216:	42a6      	cmp	r6, r4
  406218:	d1f9      	bne.n	40620e <__libc_init_array+0x2e>
  40621a:	bd70      	pop	{r4, r5, r6, pc}
  40621c:	bd70      	pop	{r4, r5, r6, pc}
  40621e:	bf00      	nop
  406220:	0040a960 	.word	0x0040a960
  406224:	0040a960 	.word	0x0040a960
  406228:	0040a968 	.word	0x0040a968
  40622c:	0040a960 	.word	0x0040a960

00406230 <iprintf>:
  406230:	b40f      	push	{r0, r1, r2, r3}
  406232:	b500      	push	{lr}
  406234:	4907      	ldr	r1, [pc, #28]	; (406254 <iprintf+0x24>)
  406236:	b083      	sub	sp, #12
  406238:	ab04      	add	r3, sp, #16
  40623a:	6808      	ldr	r0, [r1, #0]
  40623c:	f853 2b04 	ldr.w	r2, [r3], #4
  406240:	6881      	ldr	r1, [r0, #8]
  406242:	9301      	str	r3, [sp, #4]
  406244:	f000 fd2e 	bl	406ca4 <_vfiprintf_r>
  406248:	b003      	add	sp, #12
  40624a:	f85d eb04 	ldr.w	lr, [sp], #4
  40624e:	b004      	add	sp, #16
  406250:	4770      	bx	lr
  406252:	bf00      	nop
  406254:	20400024 	.word	0x20400024

00406258 <memcpy>:
  406258:	4684      	mov	ip, r0
  40625a:	ea41 0300 	orr.w	r3, r1, r0
  40625e:	f013 0303 	ands.w	r3, r3, #3
  406262:	d16d      	bne.n	406340 <memcpy+0xe8>
  406264:	3a40      	subs	r2, #64	; 0x40
  406266:	d341      	bcc.n	4062ec <memcpy+0x94>
  406268:	f851 3b04 	ldr.w	r3, [r1], #4
  40626c:	f840 3b04 	str.w	r3, [r0], #4
  406270:	f851 3b04 	ldr.w	r3, [r1], #4
  406274:	f840 3b04 	str.w	r3, [r0], #4
  406278:	f851 3b04 	ldr.w	r3, [r1], #4
  40627c:	f840 3b04 	str.w	r3, [r0], #4
  406280:	f851 3b04 	ldr.w	r3, [r1], #4
  406284:	f840 3b04 	str.w	r3, [r0], #4
  406288:	f851 3b04 	ldr.w	r3, [r1], #4
  40628c:	f840 3b04 	str.w	r3, [r0], #4
  406290:	f851 3b04 	ldr.w	r3, [r1], #4
  406294:	f840 3b04 	str.w	r3, [r0], #4
  406298:	f851 3b04 	ldr.w	r3, [r1], #4
  40629c:	f840 3b04 	str.w	r3, [r0], #4
  4062a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062a4:	f840 3b04 	str.w	r3, [r0], #4
  4062a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062ac:	f840 3b04 	str.w	r3, [r0], #4
  4062b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062b4:	f840 3b04 	str.w	r3, [r0], #4
  4062b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062bc:	f840 3b04 	str.w	r3, [r0], #4
  4062c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062c4:	f840 3b04 	str.w	r3, [r0], #4
  4062c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062cc:	f840 3b04 	str.w	r3, [r0], #4
  4062d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062d4:	f840 3b04 	str.w	r3, [r0], #4
  4062d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062dc:	f840 3b04 	str.w	r3, [r0], #4
  4062e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062e4:	f840 3b04 	str.w	r3, [r0], #4
  4062e8:	3a40      	subs	r2, #64	; 0x40
  4062ea:	d2bd      	bcs.n	406268 <memcpy+0x10>
  4062ec:	3230      	adds	r2, #48	; 0x30
  4062ee:	d311      	bcc.n	406314 <memcpy+0xbc>
  4062f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062f4:	f840 3b04 	str.w	r3, [r0], #4
  4062f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062fc:	f840 3b04 	str.w	r3, [r0], #4
  406300:	f851 3b04 	ldr.w	r3, [r1], #4
  406304:	f840 3b04 	str.w	r3, [r0], #4
  406308:	f851 3b04 	ldr.w	r3, [r1], #4
  40630c:	f840 3b04 	str.w	r3, [r0], #4
  406310:	3a10      	subs	r2, #16
  406312:	d2ed      	bcs.n	4062f0 <memcpy+0x98>
  406314:	320c      	adds	r2, #12
  406316:	d305      	bcc.n	406324 <memcpy+0xcc>
  406318:	f851 3b04 	ldr.w	r3, [r1], #4
  40631c:	f840 3b04 	str.w	r3, [r0], #4
  406320:	3a04      	subs	r2, #4
  406322:	d2f9      	bcs.n	406318 <memcpy+0xc0>
  406324:	3204      	adds	r2, #4
  406326:	d008      	beq.n	40633a <memcpy+0xe2>
  406328:	07d2      	lsls	r2, r2, #31
  40632a:	bf1c      	itt	ne
  40632c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406330:	f800 3b01 	strbne.w	r3, [r0], #1
  406334:	d301      	bcc.n	40633a <memcpy+0xe2>
  406336:	880b      	ldrh	r3, [r1, #0]
  406338:	8003      	strh	r3, [r0, #0]
  40633a:	4660      	mov	r0, ip
  40633c:	4770      	bx	lr
  40633e:	bf00      	nop
  406340:	2a08      	cmp	r2, #8
  406342:	d313      	bcc.n	40636c <memcpy+0x114>
  406344:	078b      	lsls	r3, r1, #30
  406346:	d08d      	beq.n	406264 <memcpy+0xc>
  406348:	f010 0303 	ands.w	r3, r0, #3
  40634c:	d08a      	beq.n	406264 <memcpy+0xc>
  40634e:	f1c3 0304 	rsb	r3, r3, #4
  406352:	1ad2      	subs	r2, r2, r3
  406354:	07db      	lsls	r3, r3, #31
  406356:	bf1c      	itt	ne
  406358:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40635c:	f800 3b01 	strbne.w	r3, [r0], #1
  406360:	d380      	bcc.n	406264 <memcpy+0xc>
  406362:	f831 3b02 	ldrh.w	r3, [r1], #2
  406366:	f820 3b02 	strh.w	r3, [r0], #2
  40636a:	e77b      	b.n	406264 <memcpy+0xc>
  40636c:	3a04      	subs	r2, #4
  40636e:	d3d9      	bcc.n	406324 <memcpy+0xcc>
  406370:	3a01      	subs	r2, #1
  406372:	f811 3b01 	ldrb.w	r3, [r1], #1
  406376:	f800 3b01 	strb.w	r3, [r0], #1
  40637a:	d2f9      	bcs.n	406370 <memcpy+0x118>
  40637c:	780b      	ldrb	r3, [r1, #0]
  40637e:	7003      	strb	r3, [r0, #0]
  406380:	784b      	ldrb	r3, [r1, #1]
  406382:	7043      	strb	r3, [r0, #1]
  406384:	788b      	ldrb	r3, [r1, #2]
  406386:	7083      	strb	r3, [r0, #2]
  406388:	4660      	mov	r0, ip
  40638a:	4770      	bx	lr

0040638c <memset>:
  40638c:	b470      	push	{r4, r5, r6}
  40638e:	0786      	lsls	r6, r0, #30
  406390:	d046      	beq.n	406420 <memset+0x94>
  406392:	1e54      	subs	r4, r2, #1
  406394:	2a00      	cmp	r2, #0
  406396:	d041      	beq.n	40641c <memset+0x90>
  406398:	b2ca      	uxtb	r2, r1
  40639a:	4603      	mov	r3, r0
  40639c:	e002      	b.n	4063a4 <memset+0x18>
  40639e:	f114 34ff 	adds.w	r4, r4, #4294967295
  4063a2:	d33b      	bcc.n	40641c <memset+0x90>
  4063a4:	f803 2b01 	strb.w	r2, [r3], #1
  4063a8:	079d      	lsls	r5, r3, #30
  4063aa:	d1f8      	bne.n	40639e <memset+0x12>
  4063ac:	2c03      	cmp	r4, #3
  4063ae:	d92e      	bls.n	40640e <memset+0x82>
  4063b0:	b2cd      	uxtb	r5, r1
  4063b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4063b6:	2c0f      	cmp	r4, #15
  4063b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4063bc:	d919      	bls.n	4063f2 <memset+0x66>
  4063be:	f103 0210 	add.w	r2, r3, #16
  4063c2:	4626      	mov	r6, r4
  4063c4:	3e10      	subs	r6, #16
  4063c6:	2e0f      	cmp	r6, #15
  4063c8:	f842 5c10 	str.w	r5, [r2, #-16]
  4063cc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4063d0:	f842 5c08 	str.w	r5, [r2, #-8]
  4063d4:	f842 5c04 	str.w	r5, [r2, #-4]
  4063d8:	f102 0210 	add.w	r2, r2, #16
  4063dc:	d8f2      	bhi.n	4063c4 <memset+0x38>
  4063de:	f1a4 0210 	sub.w	r2, r4, #16
  4063e2:	f022 020f 	bic.w	r2, r2, #15
  4063e6:	f004 040f 	and.w	r4, r4, #15
  4063ea:	3210      	adds	r2, #16
  4063ec:	2c03      	cmp	r4, #3
  4063ee:	4413      	add	r3, r2
  4063f0:	d90d      	bls.n	40640e <memset+0x82>
  4063f2:	461e      	mov	r6, r3
  4063f4:	4622      	mov	r2, r4
  4063f6:	3a04      	subs	r2, #4
  4063f8:	2a03      	cmp	r2, #3
  4063fa:	f846 5b04 	str.w	r5, [r6], #4
  4063fe:	d8fa      	bhi.n	4063f6 <memset+0x6a>
  406400:	1f22      	subs	r2, r4, #4
  406402:	f022 0203 	bic.w	r2, r2, #3
  406406:	3204      	adds	r2, #4
  406408:	4413      	add	r3, r2
  40640a:	f004 0403 	and.w	r4, r4, #3
  40640e:	b12c      	cbz	r4, 40641c <memset+0x90>
  406410:	b2c9      	uxtb	r1, r1
  406412:	441c      	add	r4, r3
  406414:	f803 1b01 	strb.w	r1, [r3], #1
  406418:	429c      	cmp	r4, r3
  40641a:	d1fb      	bne.n	406414 <memset+0x88>
  40641c:	bc70      	pop	{r4, r5, r6}
  40641e:	4770      	bx	lr
  406420:	4614      	mov	r4, r2
  406422:	4603      	mov	r3, r0
  406424:	e7c2      	b.n	4063ac <memset+0x20>
  406426:	bf00      	nop

00406428 <_puts_r>:
  406428:	b5f0      	push	{r4, r5, r6, r7, lr}
  40642a:	4605      	mov	r5, r0
  40642c:	b089      	sub	sp, #36	; 0x24
  40642e:	4608      	mov	r0, r1
  406430:	460c      	mov	r4, r1
  406432:	f000 f925 	bl	406680 <strlen>
  406436:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406438:	4f21      	ldr	r7, [pc, #132]	; (4064c0 <_puts_r+0x98>)
  40643a:	9404      	str	r4, [sp, #16]
  40643c:	2601      	movs	r6, #1
  40643e:	1c44      	adds	r4, r0, #1
  406440:	a904      	add	r1, sp, #16
  406442:	2202      	movs	r2, #2
  406444:	9403      	str	r4, [sp, #12]
  406446:	9005      	str	r0, [sp, #20]
  406448:	68ac      	ldr	r4, [r5, #8]
  40644a:	9706      	str	r7, [sp, #24]
  40644c:	9607      	str	r6, [sp, #28]
  40644e:	9101      	str	r1, [sp, #4]
  406450:	9202      	str	r2, [sp, #8]
  406452:	b353      	cbz	r3, 4064aa <_puts_r+0x82>
  406454:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406456:	f013 0f01 	tst.w	r3, #1
  40645a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40645e:	b29a      	uxth	r2, r3
  406460:	d101      	bne.n	406466 <_puts_r+0x3e>
  406462:	0590      	lsls	r0, r2, #22
  406464:	d525      	bpl.n	4064b2 <_puts_r+0x8a>
  406466:	0491      	lsls	r1, r2, #18
  406468:	d406      	bmi.n	406478 <_puts_r+0x50>
  40646a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40646c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  406474:	81a3      	strh	r3, [r4, #12]
  406476:	6662      	str	r2, [r4, #100]	; 0x64
  406478:	4628      	mov	r0, r5
  40647a:	aa01      	add	r2, sp, #4
  40647c:	4621      	mov	r1, r4
  40647e:	f001 fe13 	bl	4080a8 <__sfvwrite_r>
  406482:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406484:	2800      	cmp	r0, #0
  406486:	bf0c      	ite	eq
  406488:	250a      	moveq	r5, #10
  40648a:	f04f 35ff 	movne.w	r5, #4294967295
  40648e:	07da      	lsls	r2, r3, #31
  406490:	d402      	bmi.n	406498 <_puts_r+0x70>
  406492:	89a3      	ldrh	r3, [r4, #12]
  406494:	059b      	lsls	r3, r3, #22
  406496:	d502      	bpl.n	40649e <_puts_r+0x76>
  406498:	4628      	mov	r0, r5
  40649a:	b009      	add	sp, #36	; 0x24
  40649c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40649e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4064a0:	f001 ffb8 	bl	408414 <__retarget_lock_release_recursive>
  4064a4:	4628      	mov	r0, r5
  4064a6:	b009      	add	sp, #36	; 0x24
  4064a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4064aa:	4628      	mov	r0, r5
  4064ac:	f001 fbf0 	bl	407c90 <__sinit>
  4064b0:	e7d0      	b.n	406454 <_puts_r+0x2c>
  4064b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4064b4:	f001 ffac 	bl	408410 <__retarget_lock_acquire_recursive>
  4064b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064bc:	b29a      	uxth	r2, r3
  4064be:	e7d2      	b.n	406466 <_puts_r+0x3e>
  4064c0:	0040a6f0 	.word	0x0040a6f0

004064c4 <puts>:
  4064c4:	4b02      	ldr	r3, [pc, #8]	; (4064d0 <puts+0xc>)
  4064c6:	4601      	mov	r1, r0
  4064c8:	6818      	ldr	r0, [r3, #0]
  4064ca:	f7ff bfad 	b.w	406428 <_puts_r>
  4064ce:	bf00      	nop
  4064d0:	20400024 	.word	0x20400024

004064d4 <setbuf>:
  4064d4:	2900      	cmp	r1, #0
  4064d6:	bf0c      	ite	eq
  4064d8:	2202      	moveq	r2, #2
  4064da:	2200      	movne	r2, #0
  4064dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4064e0:	f000 b800 	b.w	4064e4 <setvbuf>

004064e4 <setvbuf>:
  4064e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4064e8:	4c61      	ldr	r4, [pc, #388]	; (406670 <setvbuf+0x18c>)
  4064ea:	6825      	ldr	r5, [r4, #0]
  4064ec:	b083      	sub	sp, #12
  4064ee:	4604      	mov	r4, r0
  4064f0:	460f      	mov	r7, r1
  4064f2:	4690      	mov	r8, r2
  4064f4:	461e      	mov	r6, r3
  4064f6:	b115      	cbz	r5, 4064fe <setvbuf+0x1a>
  4064f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4064fa:	2b00      	cmp	r3, #0
  4064fc:	d064      	beq.n	4065c8 <setvbuf+0xe4>
  4064fe:	f1b8 0f02 	cmp.w	r8, #2
  406502:	d006      	beq.n	406512 <setvbuf+0x2e>
  406504:	f1b8 0f01 	cmp.w	r8, #1
  406508:	f200 809f 	bhi.w	40664a <setvbuf+0x166>
  40650c:	2e00      	cmp	r6, #0
  40650e:	f2c0 809c 	blt.w	40664a <setvbuf+0x166>
  406512:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406514:	07d8      	lsls	r0, r3, #31
  406516:	d534      	bpl.n	406582 <setvbuf+0x9e>
  406518:	4621      	mov	r1, r4
  40651a:	4628      	mov	r0, r5
  40651c:	f001 fb60 	bl	407be0 <_fflush_r>
  406520:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406522:	b141      	cbz	r1, 406536 <setvbuf+0x52>
  406524:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406528:	4299      	cmp	r1, r3
  40652a:	d002      	beq.n	406532 <setvbuf+0x4e>
  40652c:	4628      	mov	r0, r5
  40652e:	f001 fcd5 	bl	407edc <_free_r>
  406532:	2300      	movs	r3, #0
  406534:	6323      	str	r3, [r4, #48]	; 0x30
  406536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40653a:	2200      	movs	r2, #0
  40653c:	61a2      	str	r2, [r4, #24]
  40653e:	6062      	str	r2, [r4, #4]
  406540:	061a      	lsls	r2, r3, #24
  406542:	d43a      	bmi.n	4065ba <setvbuf+0xd6>
  406544:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406548:	f023 0303 	bic.w	r3, r3, #3
  40654c:	f1b8 0f02 	cmp.w	r8, #2
  406550:	81a3      	strh	r3, [r4, #12]
  406552:	d01d      	beq.n	406590 <setvbuf+0xac>
  406554:	ab01      	add	r3, sp, #4
  406556:	466a      	mov	r2, sp
  406558:	4621      	mov	r1, r4
  40655a:	4628      	mov	r0, r5
  40655c:	f001 ff5c 	bl	408418 <__swhatbuf_r>
  406560:	89a3      	ldrh	r3, [r4, #12]
  406562:	4318      	orrs	r0, r3
  406564:	81a0      	strh	r0, [r4, #12]
  406566:	2e00      	cmp	r6, #0
  406568:	d132      	bne.n	4065d0 <setvbuf+0xec>
  40656a:	9e00      	ldr	r6, [sp, #0]
  40656c:	4630      	mov	r0, r6
  40656e:	f001 ffcb 	bl	408508 <malloc>
  406572:	4607      	mov	r7, r0
  406574:	2800      	cmp	r0, #0
  406576:	d06b      	beq.n	406650 <setvbuf+0x16c>
  406578:	89a3      	ldrh	r3, [r4, #12]
  40657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40657e:	81a3      	strh	r3, [r4, #12]
  406580:	e028      	b.n	4065d4 <setvbuf+0xf0>
  406582:	89a3      	ldrh	r3, [r4, #12]
  406584:	0599      	lsls	r1, r3, #22
  406586:	d4c7      	bmi.n	406518 <setvbuf+0x34>
  406588:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40658a:	f001 ff41 	bl	408410 <__retarget_lock_acquire_recursive>
  40658e:	e7c3      	b.n	406518 <setvbuf+0x34>
  406590:	2500      	movs	r5, #0
  406592:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406594:	2600      	movs	r6, #0
  406596:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40659a:	f043 0302 	orr.w	r3, r3, #2
  40659e:	2001      	movs	r0, #1
  4065a0:	60a6      	str	r6, [r4, #8]
  4065a2:	07ce      	lsls	r6, r1, #31
  4065a4:	81a3      	strh	r3, [r4, #12]
  4065a6:	6022      	str	r2, [r4, #0]
  4065a8:	6122      	str	r2, [r4, #16]
  4065aa:	6160      	str	r0, [r4, #20]
  4065ac:	d401      	bmi.n	4065b2 <setvbuf+0xce>
  4065ae:	0598      	lsls	r0, r3, #22
  4065b0:	d53e      	bpl.n	406630 <setvbuf+0x14c>
  4065b2:	4628      	mov	r0, r5
  4065b4:	b003      	add	sp, #12
  4065b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4065ba:	6921      	ldr	r1, [r4, #16]
  4065bc:	4628      	mov	r0, r5
  4065be:	f001 fc8d 	bl	407edc <_free_r>
  4065c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4065c6:	e7bd      	b.n	406544 <setvbuf+0x60>
  4065c8:	4628      	mov	r0, r5
  4065ca:	f001 fb61 	bl	407c90 <__sinit>
  4065ce:	e796      	b.n	4064fe <setvbuf+0x1a>
  4065d0:	2f00      	cmp	r7, #0
  4065d2:	d0cb      	beq.n	40656c <setvbuf+0x88>
  4065d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4065d6:	2b00      	cmp	r3, #0
  4065d8:	d033      	beq.n	406642 <setvbuf+0x15e>
  4065da:	9b00      	ldr	r3, [sp, #0]
  4065dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4065e0:	6027      	str	r7, [r4, #0]
  4065e2:	429e      	cmp	r6, r3
  4065e4:	bf1c      	itt	ne
  4065e6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4065ea:	81a2      	strhne	r2, [r4, #12]
  4065ec:	f1b8 0f01 	cmp.w	r8, #1
  4065f0:	bf04      	itt	eq
  4065f2:	f042 0201 	orreq.w	r2, r2, #1
  4065f6:	81a2      	strheq	r2, [r4, #12]
  4065f8:	b292      	uxth	r2, r2
  4065fa:	f012 0308 	ands.w	r3, r2, #8
  4065fe:	6127      	str	r7, [r4, #16]
  406600:	6166      	str	r6, [r4, #20]
  406602:	d00e      	beq.n	406622 <setvbuf+0x13e>
  406604:	07d1      	lsls	r1, r2, #31
  406606:	d51a      	bpl.n	40663e <setvbuf+0x15a>
  406608:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40660a:	4276      	negs	r6, r6
  40660c:	2300      	movs	r3, #0
  40660e:	f015 0501 	ands.w	r5, r5, #1
  406612:	61a6      	str	r6, [r4, #24]
  406614:	60a3      	str	r3, [r4, #8]
  406616:	d009      	beq.n	40662c <setvbuf+0x148>
  406618:	2500      	movs	r5, #0
  40661a:	4628      	mov	r0, r5
  40661c:	b003      	add	sp, #12
  40661e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406622:	60a3      	str	r3, [r4, #8]
  406624:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406626:	f015 0501 	ands.w	r5, r5, #1
  40662a:	d1f5      	bne.n	406618 <setvbuf+0x134>
  40662c:	0593      	lsls	r3, r2, #22
  40662e:	d4c0      	bmi.n	4065b2 <setvbuf+0xce>
  406630:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406632:	f001 feef 	bl	408414 <__retarget_lock_release_recursive>
  406636:	4628      	mov	r0, r5
  406638:	b003      	add	sp, #12
  40663a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40663e:	60a6      	str	r6, [r4, #8]
  406640:	e7f0      	b.n	406624 <setvbuf+0x140>
  406642:	4628      	mov	r0, r5
  406644:	f001 fb24 	bl	407c90 <__sinit>
  406648:	e7c7      	b.n	4065da <setvbuf+0xf6>
  40664a:	f04f 35ff 	mov.w	r5, #4294967295
  40664e:	e7b0      	b.n	4065b2 <setvbuf+0xce>
  406650:	f8dd 9000 	ldr.w	r9, [sp]
  406654:	45b1      	cmp	r9, r6
  406656:	d004      	beq.n	406662 <setvbuf+0x17e>
  406658:	4648      	mov	r0, r9
  40665a:	f001 ff55 	bl	408508 <malloc>
  40665e:	4607      	mov	r7, r0
  406660:	b920      	cbnz	r0, 40666c <setvbuf+0x188>
  406662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406666:	f04f 35ff 	mov.w	r5, #4294967295
  40666a:	e792      	b.n	406592 <setvbuf+0xae>
  40666c:	464e      	mov	r6, r9
  40666e:	e783      	b.n	406578 <setvbuf+0x94>
  406670:	20400024 	.word	0x20400024
	...

00406680 <strlen>:
  406680:	f890 f000 	pld	[r0]
  406684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406688:	f020 0107 	bic.w	r1, r0, #7
  40668c:	f06f 0c00 	mvn.w	ip, #0
  406690:	f010 0407 	ands.w	r4, r0, #7
  406694:	f891 f020 	pld	[r1, #32]
  406698:	f040 8049 	bne.w	40672e <strlen+0xae>
  40669c:	f04f 0400 	mov.w	r4, #0
  4066a0:	f06f 0007 	mvn.w	r0, #7
  4066a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4066a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4066ac:	f100 0008 	add.w	r0, r0, #8
  4066b0:	fa82 f24c 	uadd8	r2, r2, ip
  4066b4:	faa4 f28c 	sel	r2, r4, ip
  4066b8:	fa83 f34c 	uadd8	r3, r3, ip
  4066bc:	faa2 f38c 	sel	r3, r2, ip
  4066c0:	bb4b      	cbnz	r3, 406716 <strlen+0x96>
  4066c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4066c6:	fa82 f24c 	uadd8	r2, r2, ip
  4066ca:	f100 0008 	add.w	r0, r0, #8
  4066ce:	faa4 f28c 	sel	r2, r4, ip
  4066d2:	fa83 f34c 	uadd8	r3, r3, ip
  4066d6:	faa2 f38c 	sel	r3, r2, ip
  4066da:	b9e3      	cbnz	r3, 406716 <strlen+0x96>
  4066dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4066e0:	fa82 f24c 	uadd8	r2, r2, ip
  4066e4:	f100 0008 	add.w	r0, r0, #8
  4066e8:	faa4 f28c 	sel	r2, r4, ip
  4066ec:	fa83 f34c 	uadd8	r3, r3, ip
  4066f0:	faa2 f38c 	sel	r3, r2, ip
  4066f4:	b97b      	cbnz	r3, 406716 <strlen+0x96>
  4066f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4066fa:	f101 0120 	add.w	r1, r1, #32
  4066fe:	fa82 f24c 	uadd8	r2, r2, ip
  406702:	f100 0008 	add.w	r0, r0, #8
  406706:	faa4 f28c 	sel	r2, r4, ip
  40670a:	fa83 f34c 	uadd8	r3, r3, ip
  40670e:	faa2 f38c 	sel	r3, r2, ip
  406712:	2b00      	cmp	r3, #0
  406714:	d0c6      	beq.n	4066a4 <strlen+0x24>
  406716:	2a00      	cmp	r2, #0
  406718:	bf04      	itt	eq
  40671a:	3004      	addeq	r0, #4
  40671c:	461a      	moveq	r2, r3
  40671e:	ba12      	rev	r2, r2
  406720:	fab2 f282 	clz	r2, r2
  406724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40672c:	4770      	bx	lr
  40672e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406732:	f004 0503 	and.w	r5, r4, #3
  406736:	f1c4 0000 	rsb	r0, r4, #0
  40673a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40673e:	f014 0f04 	tst.w	r4, #4
  406742:	f891 f040 	pld	[r1, #64]	; 0x40
  406746:	fa0c f505 	lsl.w	r5, ip, r5
  40674a:	ea62 0205 	orn	r2, r2, r5
  40674e:	bf1c      	itt	ne
  406750:	ea63 0305 	ornne	r3, r3, r5
  406754:	4662      	movne	r2, ip
  406756:	f04f 0400 	mov.w	r4, #0
  40675a:	e7a9      	b.n	4066b0 <strlen+0x30>

0040675c <critical_factorization>:
  40675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406760:	f04f 0e01 	mov.w	lr, #1
  406764:	4674      	mov	r4, lr
  406766:	2500      	movs	r5, #0
  406768:	f04f 36ff 	mov.w	r6, #4294967295
  40676c:	192b      	adds	r3, r5, r4
  40676e:	428b      	cmp	r3, r1
  406770:	eb00 0706 	add.w	r7, r0, r6
  406774:	d20d      	bcs.n	406792 <critical_factorization+0x36>
  406776:	5d3f      	ldrb	r7, [r7, r4]
  406778:	f810 c003 	ldrb.w	ip, [r0, r3]
  40677c:	45bc      	cmp	ip, r7
  40677e:	d22d      	bcs.n	4067dc <critical_factorization+0x80>
  406780:	461d      	mov	r5, r3
  406782:	2401      	movs	r4, #1
  406784:	eba3 0e06 	sub.w	lr, r3, r6
  406788:	192b      	adds	r3, r5, r4
  40678a:	428b      	cmp	r3, r1
  40678c:	eb00 0706 	add.w	r7, r0, r6
  406790:	d3f1      	bcc.n	406776 <critical_factorization+0x1a>
  406792:	f04f 0801 	mov.w	r8, #1
  406796:	f8c2 e000 	str.w	lr, [r2]
  40679a:	4644      	mov	r4, r8
  40679c:	2500      	movs	r5, #0
  40679e:	f04f 37ff 	mov.w	r7, #4294967295
  4067a2:	192b      	adds	r3, r5, r4
  4067a4:	4299      	cmp	r1, r3
  4067a6:	eb00 0e07 	add.w	lr, r0, r7
  4067aa:	d90e      	bls.n	4067ca <critical_factorization+0x6e>
  4067ac:	f81e e004 	ldrb.w	lr, [lr, r4]
  4067b0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4067b4:	45f4      	cmp	ip, lr
  4067b6:	d918      	bls.n	4067ea <critical_factorization+0x8e>
  4067b8:	461d      	mov	r5, r3
  4067ba:	2401      	movs	r4, #1
  4067bc:	eba3 0807 	sub.w	r8, r3, r7
  4067c0:	192b      	adds	r3, r5, r4
  4067c2:	4299      	cmp	r1, r3
  4067c4:	eb00 0e07 	add.w	lr, r0, r7
  4067c8:	d8f0      	bhi.n	4067ac <critical_factorization+0x50>
  4067ca:	3701      	adds	r7, #1
  4067cc:	1c70      	adds	r0, r6, #1
  4067ce:	4287      	cmp	r7, r0
  4067d0:	bf24      	itt	cs
  4067d2:	f8c2 8000 	strcs.w	r8, [r2]
  4067d6:	4638      	movcs	r0, r7
  4067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067dc:	d00c      	beq.n	4067f8 <critical_factorization+0x9c>
  4067de:	f04f 0e01 	mov.w	lr, #1
  4067e2:	462e      	mov	r6, r5
  4067e4:	4674      	mov	r4, lr
  4067e6:	4475      	add	r5, lr
  4067e8:	e7c0      	b.n	40676c <critical_factorization+0x10>
  4067ea:	d00b      	beq.n	406804 <critical_factorization+0xa8>
  4067ec:	f04f 0801 	mov.w	r8, #1
  4067f0:	462f      	mov	r7, r5
  4067f2:	4644      	mov	r4, r8
  4067f4:	4445      	add	r5, r8
  4067f6:	e7d4      	b.n	4067a2 <critical_factorization+0x46>
  4067f8:	4574      	cmp	r4, lr
  4067fa:	bf12      	itee	ne
  4067fc:	3401      	addne	r4, #1
  4067fe:	461d      	moveq	r5, r3
  406800:	2401      	moveq	r4, #1
  406802:	e7b3      	b.n	40676c <critical_factorization+0x10>
  406804:	4544      	cmp	r4, r8
  406806:	bf12      	itee	ne
  406808:	3401      	addne	r4, #1
  40680a:	461d      	moveq	r5, r3
  40680c:	2401      	moveq	r4, #1
  40680e:	e7c8      	b.n	4067a2 <critical_factorization+0x46>

00406810 <two_way_long_needle>:
  406810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406814:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  406818:	4616      	mov	r6, r2
  40681a:	4605      	mov	r5, r0
  40681c:	468b      	mov	fp, r1
  40681e:	4610      	mov	r0, r2
  406820:	4619      	mov	r1, r3
  406822:	aa03      	add	r2, sp, #12
  406824:	461c      	mov	r4, r3
  406826:	f7ff ff99 	bl	40675c <critical_factorization>
  40682a:	ab03      	add	r3, sp, #12
  40682c:	4681      	mov	r9, r0
  40682e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  406832:	f843 4f04 	str.w	r4, [r3, #4]!
  406836:	4293      	cmp	r3, r2
  406838:	d1fb      	bne.n	406832 <two_way_long_needle+0x22>
  40683a:	b14c      	cbz	r4, 406850 <two_way_long_needle+0x40>
  40683c:	1e63      	subs	r3, r4, #1
  40683e:	1e72      	subs	r2, r6, #1
  406840:	a804      	add	r0, sp, #16
  406842:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406846:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40684a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40684e:	d2f8      	bcs.n	406842 <two_way_long_needle+0x32>
  406850:	9903      	ldr	r1, [sp, #12]
  406852:	464a      	mov	r2, r9
  406854:	4431      	add	r1, r6
  406856:	4630      	mov	r0, r6
  406858:	f002 f97a 	bl	408b50 <memcmp>
  40685c:	2800      	cmp	r0, #0
  40685e:	d16f      	bne.n	406940 <two_way_long_needle+0x130>
  406860:	f109 33ff 	add.w	r3, r9, #4294967295
  406864:	9300      	str	r3, [sp, #0]
  406866:	18f3      	adds	r3, r6, r3
  406868:	4682      	mov	sl, r0
  40686a:	9301      	str	r3, [sp, #4]
  40686c:	4623      	mov	r3, r4
  40686e:	4680      	mov	r8, r0
  406870:	4654      	mov	r4, sl
  406872:	4658      	mov	r0, fp
  406874:	469a      	mov	sl, r3
  406876:	eb08 070a 	add.w	r7, r8, sl
  40687a:	1a3a      	subs	r2, r7, r0
  40687c:	2100      	movs	r1, #0
  40687e:	4428      	add	r0, r5
  406880:	f002 f916 	bl	408ab0 <memchr>
  406884:	2800      	cmp	r0, #0
  406886:	d156      	bne.n	406936 <two_way_long_needle+0x126>
  406888:	2f00      	cmp	r7, #0
  40688a:	d054      	beq.n	406936 <two_way_long_needle+0x126>
  40688c:	19eb      	adds	r3, r5, r7
  40688e:	aa04      	add	r2, sp, #16
  406890:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  406894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406898:	b14b      	cbz	r3, 4068ae <two_way_long_needle+0x9e>
  40689a:	b124      	cbz	r4, 4068a6 <two_way_long_needle+0x96>
  40689c:	9a03      	ldr	r2, [sp, #12]
  40689e:	4293      	cmp	r3, r2
  4068a0:	d201      	bcs.n	4068a6 <two_way_long_needle+0x96>
  4068a2:	ebaa 0302 	sub.w	r3, sl, r2
  4068a6:	4498      	add	r8, r3
  4068a8:	2400      	movs	r4, #0
  4068aa:	4638      	mov	r0, r7
  4068ac:	e7e3      	b.n	406876 <two_way_long_needle+0x66>
  4068ae:	454c      	cmp	r4, r9
  4068b0:	4623      	mov	r3, r4
  4068b2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4068b6:	bf38      	it	cc
  4068b8:	464b      	movcc	r3, r9
  4068ba:	4573      	cmp	r3, lr
  4068bc:	d213      	bcs.n	4068e6 <two_way_long_needle+0xd6>
  4068be:	eb08 0203 	add.w	r2, r8, r3
  4068c2:	f816 c003 	ldrb.w	ip, [r6, r3]
  4068c6:	5ca8      	ldrb	r0, [r5, r2]
  4068c8:	4584      	cmp	ip, r0
  4068ca:	442a      	add	r2, r5
  4068cc:	eb06 0103 	add.w	r1, r6, r3
  4068d0:	d006      	beq.n	4068e0 <two_way_long_needle+0xd0>
  4068d2:	e02c      	b.n	40692e <two_way_long_needle+0x11e>
  4068d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4068d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4068dc:	4584      	cmp	ip, r0
  4068de:	d126      	bne.n	40692e <two_way_long_needle+0x11e>
  4068e0:	3301      	adds	r3, #1
  4068e2:	4573      	cmp	r3, lr
  4068e4:	d3f6      	bcc.n	4068d4 <two_way_long_needle+0xc4>
  4068e6:	454c      	cmp	r4, r9
  4068e8:	9900      	ldr	r1, [sp, #0]
  4068ea:	f080 8089 	bcs.w	406a00 <two_way_long_needle+0x1f0>
  4068ee:	9b00      	ldr	r3, [sp, #0]
  4068f0:	eb08 0203 	add.w	r2, r8, r3
  4068f4:	9b01      	ldr	r3, [sp, #4]
  4068f6:	5ca8      	ldrb	r0, [r5, r2]
  4068f8:	781b      	ldrb	r3, [r3, #0]
  4068fa:	4298      	cmp	r0, r3
  4068fc:	442a      	add	r2, r5
  4068fe:	d17f      	bne.n	406a00 <two_way_long_needle+0x1f0>
  406900:	9801      	ldr	r0, [sp, #4]
  406902:	f104 3bff 	add.w	fp, r4, #4294967295
  406906:	e006      	b.n	406916 <two_way_long_needle+0x106>
  406908:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40690c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406910:	45f4      	cmp	ip, lr
  406912:	d103      	bne.n	40691c <two_way_long_needle+0x10c>
  406914:	4619      	mov	r1, r3
  406916:	1e4b      	subs	r3, r1, #1
  406918:	459b      	cmp	fp, r3
  40691a:	d1f5      	bne.n	406908 <two_way_long_needle+0xf8>
  40691c:	3401      	adds	r4, #1
  40691e:	428c      	cmp	r4, r1
  406920:	d870      	bhi.n	406a04 <two_way_long_needle+0x1f4>
  406922:	9c03      	ldr	r4, [sp, #12]
  406924:	4638      	mov	r0, r7
  406926:	44a0      	add	r8, r4
  406928:	ebaa 0404 	sub.w	r4, sl, r4
  40692c:	e7a3      	b.n	406876 <two_way_long_needle+0x66>
  40692e:	f1c9 0201 	rsb	r2, r9, #1
  406932:	4490      	add	r8, r2
  406934:	e7b7      	b.n	4068a6 <two_way_long_needle+0x96>
  406936:	2000      	movs	r0, #0
  406938:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406940:	eba4 0309 	sub.w	r3, r4, r9
  406944:	454b      	cmp	r3, r9
  406946:	bf38      	it	cc
  406948:	464b      	movcc	r3, r9
  40694a:	3301      	adds	r3, #1
  40694c:	f109 38ff 	add.w	r8, r9, #4294967295
  406950:	9303      	str	r3, [sp, #12]
  406952:	eb06 0308 	add.w	r3, r6, r8
  406956:	4658      	mov	r0, fp
  406958:	f04f 0a00 	mov.w	sl, #0
  40695c:	46cb      	mov	fp, r9
  40695e:	4699      	mov	r9, r3
  406960:	eb0a 0704 	add.w	r7, sl, r4
  406964:	1a3a      	subs	r2, r7, r0
  406966:	2100      	movs	r1, #0
  406968:	4428      	add	r0, r5
  40696a:	f002 f8a1 	bl	408ab0 <memchr>
  40696e:	2800      	cmp	r0, #0
  406970:	d1e1      	bne.n	406936 <two_way_long_needle+0x126>
  406972:	2f00      	cmp	r7, #0
  406974:	d0df      	beq.n	406936 <two_way_long_needle+0x126>
  406976:	19eb      	adds	r3, r5, r7
  406978:	aa04      	add	r2, sp, #16
  40697a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406982:	bba3      	cbnz	r3, 4069ee <two_way_long_needle+0x1de>
  406984:	1e61      	subs	r1, r4, #1
  406986:	458b      	cmp	fp, r1
  406988:	d215      	bcs.n	4069b6 <two_way_long_needle+0x1a6>
  40698a:	eb0a 020b 	add.w	r2, sl, fp
  40698e:	f816 300b 	ldrb.w	r3, [r6, fp]
  406992:	f815 e002 	ldrb.w	lr, [r5, r2]
  406996:	459e      	cmp	lr, r3
  406998:	442a      	add	r2, r5
  40699a:	eb06 000b 	add.w	r0, r6, fp
  40699e:	465b      	mov	r3, fp
  4069a0:	d006      	beq.n	4069b0 <two_way_long_needle+0x1a0>
  4069a2:	e027      	b.n	4069f4 <two_way_long_needle+0x1e4>
  4069a4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4069a8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4069ac:	45f4      	cmp	ip, lr
  4069ae:	d121      	bne.n	4069f4 <two_way_long_needle+0x1e4>
  4069b0:	3301      	adds	r3, #1
  4069b2:	428b      	cmp	r3, r1
  4069b4:	d3f6      	bcc.n	4069a4 <two_way_long_needle+0x194>
  4069b6:	f1b8 3fff 	cmp.w	r8, #4294967295
  4069ba:	d011      	beq.n	4069e0 <two_way_long_needle+0x1d0>
  4069bc:	eb0a 0208 	add.w	r2, sl, r8
  4069c0:	f899 1000 	ldrb.w	r1, [r9]
  4069c4:	5cab      	ldrb	r3, [r5, r2]
  4069c6:	4299      	cmp	r1, r3
  4069c8:	442a      	add	r2, r5
  4069ca:	d10f      	bne.n	4069ec <two_way_long_needle+0x1dc>
  4069cc:	464b      	mov	r3, r9
  4069ce:	e005      	b.n	4069dc <two_way_long_needle+0x1cc>
  4069d0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4069d4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4069d8:	4288      	cmp	r0, r1
  4069da:	d107      	bne.n	4069ec <two_way_long_needle+0x1dc>
  4069dc:	42b3      	cmp	r3, r6
  4069de:	d1f7      	bne.n	4069d0 <two_way_long_needle+0x1c0>
  4069e0:	eb05 000a 	add.w	r0, r5, sl
  4069e4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4069e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069ec:	9b03      	ldr	r3, [sp, #12]
  4069ee:	449a      	add	sl, r3
  4069f0:	4638      	mov	r0, r7
  4069f2:	e7b5      	b.n	406960 <two_way_long_needle+0x150>
  4069f4:	f1cb 0201 	rsb	r2, fp, #1
  4069f8:	4492      	add	sl, r2
  4069fa:	449a      	add	sl, r3
  4069fc:	4638      	mov	r0, r7
  4069fe:	e7af      	b.n	406960 <two_way_long_needle+0x150>
  406a00:	4649      	mov	r1, r9
  406a02:	e78b      	b.n	40691c <two_way_long_needle+0x10c>
  406a04:	eb05 0008 	add.w	r0, r5, r8
  406a08:	e796      	b.n	406938 <two_way_long_needle+0x128>
  406a0a:	bf00      	nop

00406a0c <strstr>:
  406a0c:	7802      	ldrb	r2, [r0, #0]
  406a0e:	2a00      	cmp	r2, #0
  406a10:	f000 8101 	beq.w	406c16 <strstr+0x20a>
  406a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a18:	f891 8000 	ldrb.w	r8, [r1]
  406a1c:	b085      	sub	sp, #20
  406a1e:	4644      	mov	r4, r8
  406a20:	f1b8 0f00 	cmp.w	r8, #0
  406a24:	d016      	beq.n	406a54 <strstr+0x48>
  406a26:	4686      	mov	lr, r0
  406a28:	f101 0c01 	add.w	ip, r1, #1
  406a2c:	2701      	movs	r7, #1
  406a2e:	e003      	b.n	406a38 <strstr+0x2c>
  406a30:	f813 4b01 	ldrb.w	r4, [r3], #1
  406a34:	b16c      	cbz	r4, 406a52 <strstr+0x46>
  406a36:	469c      	mov	ip, r3
  406a38:	42a2      	cmp	r2, r4
  406a3a:	bf14      	ite	ne
  406a3c:	2700      	movne	r7, #0
  406a3e:	f007 0701 	andeq.w	r7, r7, #1
  406a42:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  406a46:	4663      	mov	r3, ip
  406a48:	2a00      	cmp	r2, #0
  406a4a:	d1f1      	bne.n	406a30 <strstr+0x24>
  406a4c:	f89c 3000 	ldrb.w	r3, [ip]
  406a50:	b9fb      	cbnz	r3, 406a92 <strstr+0x86>
  406a52:	b117      	cbz	r7, 406a5a <strstr+0x4e>
  406a54:	b005      	add	sp, #20
  406a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a5a:	460e      	mov	r6, r1
  406a5c:	4605      	mov	r5, r0
  406a5e:	4641      	mov	r1, r8
  406a60:	3001      	adds	r0, #1
  406a62:	ebac 0406 	sub.w	r4, ip, r6
  406a66:	f002 fb0f 	bl	409088 <strchr>
  406a6a:	4607      	mov	r7, r0
  406a6c:	b188      	cbz	r0, 406a92 <strstr+0x86>
  406a6e:	2c01      	cmp	r4, #1
  406a70:	d0f0      	beq.n	406a54 <strstr+0x48>
  406a72:	1928      	adds	r0, r5, r4
  406a74:	4287      	cmp	r7, r0
  406a76:	bf94      	ite	ls
  406a78:	1bc1      	subls	r1, r0, r7
  406a7a:	2101      	movhi	r1, #1
  406a7c:	2c1f      	cmp	r4, #31
  406a7e:	468b      	mov	fp, r1
  406a80:	d90b      	bls.n	406a9a <strstr+0x8e>
  406a82:	4623      	mov	r3, r4
  406a84:	4632      	mov	r2, r6
  406a86:	4638      	mov	r0, r7
  406a88:	f7ff fec2 	bl	406810 <two_way_long_needle>
  406a8c:	b005      	add	sp, #20
  406a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a92:	2000      	movs	r0, #0
  406a94:	b005      	add	sp, #20
  406a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a9a:	aa03      	add	r2, sp, #12
  406a9c:	4621      	mov	r1, r4
  406a9e:	4630      	mov	r0, r6
  406aa0:	f7ff fe5c 	bl	40675c <critical_factorization>
  406aa4:	9903      	ldr	r1, [sp, #12]
  406aa6:	4680      	mov	r8, r0
  406aa8:	4602      	mov	r2, r0
  406aaa:	4431      	add	r1, r6
  406aac:	4630      	mov	r0, r6
  406aae:	f002 f84f 	bl	408b50 <memcmp>
  406ab2:	2800      	cmp	r0, #0
  406ab4:	d157      	bne.n	406b66 <strstr+0x15a>
  406ab6:	f108 33ff 	add.w	r3, r8, #4294967295
  406aba:	9300      	str	r3, [sp, #0]
  406abc:	18f3      	adds	r3, r6, r3
  406abe:	4681      	mov	r9, r0
  406ac0:	4605      	mov	r5, r0
  406ac2:	9301      	str	r3, [sp, #4]
  406ac4:	4658      	mov	r0, fp
  406ac6:	46b2      	mov	sl, r6
  406ac8:	1966      	adds	r6, r4, r5
  406aca:	1a32      	subs	r2, r6, r0
  406acc:	2100      	movs	r1, #0
  406ace:	4438      	add	r0, r7
  406ad0:	f001 ffee 	bl	408ab0 <memchr>
  406ad4:	2800      	cmp	r0, #0
  406ad6:	d1dc      	bne.n	406a92 <strstr+0x86>
  406ad8:	2e00      	cmp	r6, #0
  406ada:	d0da      	beq.n	406a92 <strstr+0x86>
  406adc:	45c8      	cmp	r8, r9
  406ade:	4643      	mov	r3, r8
  406ae0:	bf38      	it	cc
  406ae2:	464b      	movcc	r3, r9
  406ae4:	429c      	cmp	r4, r3
  406ae6:	d912      	bls.n	406b0e <strstr+0x102>
  406ae8:	195a      	adds	r2, r3, r5
  406aea:	f81a 1003 	ldrb.w	r1, [sl, r3]
  406aee:	5cb8      	ldrb	r0, [r7, r2]
  406af0:	4281      	cmp	r1, r0
  406af2:	443a      	add	r2, r7
  406af4:	eb0a 0e03 	add.w	lr, sl, r3
  406af8:	d006      	beq.n	406b08 <strstr+0xfc>
  406afa:	e02c      	b.n	406b56 <strstr+0x14a>
  406afc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  406b00:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406b04:	4288      	cmp	r0, r1
  406b06:	d126      	bne.n	406b56 <strstr+0x14a>
  406b08:	3301      	adds	r3, #1
  406b0a:	429c      	cmp	r4, r3
  406b0c:	d1f6      	bne.n	406afc <strstr+0xf0>
  406b0e:	45c8      	cmp	r8, r9
  406b10:	9900      	ldr	r1, [sp, #0]
  406b12:	f240 8083 	bls.w	406c1c <strstr+0x210>
  406b16:	9b00      	ldr	r3, [sp, #0]
  406b18:	18ea      	adds	r2, r5, r3
  406b1a:	9b01      	ldr	r3, [sp, #4]
  406b1c:	5cb8      	ldrb	r0, [r7, r2]
  406b1e:	781b      	ldrb	r3, [r3, #0]
  406b20:	4298      	cmp	r0, r3
  406b22:	443a      	add	r2, r7
  406b24:	d17a      	bne.n	406c1c <strstr+0x210>
  406b26:	9801      	ldr	r0, [sp, #4]
  406b28:	f109 3bff 	add.w	fp, r9, #4294967295
  406b2c:	e006      	b.n	406b3c <strstr+0x130>
  406b2e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  406b32:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406b36:	45f4      	cmp	ip, lr
  406b38:	d103      	bne.n	406b42 <strstr+0x136>
  406b3a:	4619      	mov	r1, r3
  406b3c:	1e4b      	subs	r3, r1, #1
  406b3e:	455b      	cmp	r3, fp
  406b40:	d1f5      	bne.n	406b2e <strstr+0x122>
  406b42:	f109 0901 	add.w	r9, r9, #1
  406b46:	4589      	cmp	r9, r1
  406b48:	d857      	bhi.n	406bfa <strstr+0x1ee>
  406b4a:	9b03      	ldr	r3, [sp, #12]
  406b4c:	4630      	mov	r0, r6
  406b4e:	441d      	add	r5, r3
  406b50:	eba4 0903 	sub.w	r9, r4, r3
  406b54:	e7b8      	b.n	406ac8 <strstr+0xbc>
  406b56:	f1c8 0201 	rsb	r2, r8, #1
  406b5a:	4415      	add	r5, r2
  406b5c:	441d      	add	r5, r3
  406b5e:	f04f 0900 	mov.w	r9, #0
  406b62:	4630      	mov	r0, r6
  406b64:	e7b0      	b.n	406ac8 <strstr+0xbc>
  406b66:	eba4 0308 	sub.w	r3, r4, r8
  406b6a:	4543      	cmp	r3, r8
  406b6c:	bf38      	it	cc
  406b6e:	4643      	movcc	r3, r8
  406b70:	3301      	adds	r3, #1
  406b72:	f108 39ff 	add.w	r9, r8, #4294967295
  406b76:	9303      	str	r3, [sp, #12]
  406b78:	eb06 0309 	add.w	r3, r6, r9
  406b7c:	4658      	mov	r0, fp
  406b7e:	2500      	movs	r5, #0
  406b80:	46bb      	mov	fp, r7
  406b82:	469a      	mov	sl, r3
  406b84:	1967      	adds	r7, r4, r5
  406b86:	1a3a      	subs	r2, r7, r0
  406b88:	2100      	movs	r1, #0
  406b8a:	4458      	add	r0, fp
  406b8c:	f001 ff90 	bl	408ab0 <memchr>
  406b90:	2800      	cmp	r0, #0
  406b92:	f47f af7e 	bne.w	406a92 <strstr+0x86>
  406b96:	2f00      	cmp	r7, #0
  406b98:	f43f af7b 	beq.w	406a92 <strstr+0x86>
  406b9c:	4544      	cmp	r4, r8
  406b9e:	d915      	bls.n	406bcc <strstr+0x1c0>
  406ba0:	eb08 0205 	add.w	r2, r8, r5
  406ba4:	f816 3008 	ldrb.w	r3, [r6, r8]
  406ba8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  406bac:	4298      	cmp	r0, r3
  406bae:	445a      	add	r2, fp
  406bb0:	eb06 0108 	add.w	r1, r6, r8
  406bb4:	4643      	mov	r3, r8
  406bb6:	d006      	beq.n	406bc6 <strstr+0x1ba>
  406bb8:	e023      	b.n	406c02 <strstr+0x1f6>
  406bba:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  406bbe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406bc2:	4586      	cmp	lr, r0
  406bc4:	d11d      	bne.n	406c02 <strstr+0x1f6>
  406bc6:	3301      	adds	r3, #1
  406bc8:	429c      	cmp	r4, r3
  406bca:	d1f6      	bne.n	406bba <strstr+0x1ae>
  406bcc:	f1b9 3fff 	cmp.w	r9, #4294967295
  406bd0:	d012      	beq.n	406bf8 <strstr+0x1ec>
  406bd2:	eb05 0209 	add.w	r2, r5, r9
  406bd6:	f89a 3000 	ldrb.w	r3, [sl]
  406bda:	f81b 1002 	ldrb.w	r1, [fp, r2]
  406bde:	4299      	cmp	r1, r3
  406be0:	445a      	add	r2, fp
  406be2:	d114      	bne.n	406c0e <strstr+0x202>
  406be4:	4653      	mov	r3, sl
  406be6:	e005      	b.n	406bf4 <strstr+0x1e8>
  406be8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406bec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406bf0:	4288      	cmp	r0, r1
  406bf2:	d10c      	bne.n	406c0e <strstr+0x202>
  406bf4:	42b3      	cmp	r3, r6
  406bf6:	d1f7      	bne.n	406be8 <strstr+0x1dc>
  406bf8:	465f      	mov	r7, fp
  406bfa:	1978      	adds	r0, r7, r5
  406bfc:	b005      	add	sp, #20
  406bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c02:	f1c8 0201 	rsb	r2, r8, #1
  406c06:	4415      	add	r5, r2
  406c08:	441d      	add	r5, r3
  406c0a:	4638      	mov	r0, r7
  406c0c:	e7ba      	b.n	406b84 <strstr+0x178>
  406c0e:	9b03      	ldr	r3, [sp, #12]
  406c10:	4638      	mov	r0, r7
  406c12:	441d      	add	r5, r3
  406c14:	e7b6      	b.n	406b84 <strstr+0x178>
  406c16:	780b      	ldrb	r3, [r1, #0]
  406c18:	b913      	cbnz	r3, 406c20 <strstr+0x214>
  406c1a:	4770      	bx	lr
  406c1c:	4641      	mov	r1, r8
  406c1e:	e790      	b.n	406b42 <strstr+0x136>
  406c20:	2000      	movs	r0, #0
  406c22:	4770      	bx	lr

00406c24 <__sprint_r.part.0>:
  406c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c28:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406c2a:	049c      	lsls	r4, r3, #18
  406c2c:	4693      	mov	fp, r2
  406c2e:	d52f      	bpl.n	406c90 <__sprint_r.part.0+0x6c>
  406c30:	6893      	ldr	r3, [r2, #8]
  406c32:	6812      	ldr	r2, [r2, #0]
  406c34:	b353      	cbz	r3, 406c8c <__sprint_r.part.0+0x68>
  406c36:	460e      	mov	r6, r1
  406c38:	4607      	mov	r7, r0
  406c3a:	f102 0908 	add.w	r9, r2, #8
  406c3e:	e919 0420 	ldmdb	r9, {r5, sl}
  406c42:	ea5f 089a 	movs.w	r8, sl, lsr #2
  406c46:	d017      	beq.n	406c78 <__sprint_r.part.0+0x54>
  406c48:	3d04      	subs	r5, #4
  406c4a:	2400      	movs	r4, #0
  406c4c:	e001      	b.n	406c52 <__sprint_r.part.0+0x2e>
  406c4e:	45a0      	cmp	r8, r4
  406c50:	d010      	beq.n	406c74 <__sprint_r.part.0+0x50>
  406c52:	4632      	mov	r2, r6
  406c54:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406c58:	4638      	mov	r0, r7
  406c5a:	f001 f8bb 	bl	407dd4 <_fputwc_r>
  406c5e:	1c43      	adds	r3, r0, #1
  406c60:	f104 0401 	add.w	r4, r4, #1
  406c64:	d1f3      	bne.n	406c4e <__sprint_r.part.0+0x2a>
  406c66:	2300      	movs	r3, #0
  406c68:	f8cb 3008 	str.w	r3, [fp, #8]
  406c6c:	f8cb 3004 	str.w	r3, [fp, #4]
  406c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c74:	f8db 3008 	ldr.w	r3, [fp, #8]
  406c78:	f02a 0a03 	bic.w	sl, sl, #3
  406c7c:	eba3 030a 	sub.w	r3, r3, sl
  406c80:	f8cb 3008 	str.w	r3, [fp, #8]
  406c84:	f109 0908 	add.w	r9, r9, #8
  406c88:	2b00      	cmp	r3, #0
  406c8a:	d1d8      	bne.n	406c3e <__sprint_r.part.0+0x1a>
  406c8c:	2000      	movs	r0, #0
  406c8e:	e7ea      	b.n	406c66 <__sprint_r.part.0+0x42>
  406c90:	f001 fa0a 	bl	4080a8 <__sfvwrite_r>
  406c94:	2300      	movs	r3, #0
  406c96:	f8cb 3008 	str.w	r3, [fp, #8]
  406c9a:	f8cb 3004 	str.w	r3, [fp, #4]
  406c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ca2:	bf00      	nop

00406ca4 <_vfiprintf_r>:
  406ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ca8:	b0ad      	sub	sp, #180	; 0xb4
  406caa:	461d      	mov	r5, r3
  406cac:	468b      	mov	fp, r1
  406cae:	4690      	mov	r8, r2
  406cb0:	9307      	str	r3, [sp, #28]
  406cb2:	9006      	str	r0, [sp, #24]
  406cb4:	b118      	cbz	r0, 406cbe <_vfiprintf_r+0x1a>
  406cb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406cb8:	2b00      	cmp	r3, #0
  406cba:	f000 80f3 	beq.w	406ea4 <_vfiprintf_r+0x200>
  406cbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406cc2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406cc6:	07df      	lsls	r7, r3, #31
  406cc8:	b281      	uxth	r1, r0
  406cca:	d402      	bmi.n	406cd2 <_vfiprintf_r+0x2e>
  406ccc:	058e      	lsls	r6, r1, #22
  406cce:	f140 80fc 	bpl.w	406eca <_vfiprintf_r+0x226>
  406cd2:	048c      	lsls	r4, r1, #18
  406cd4:	d40a      	bmi.n	406cec <_vfiprintf_r+0x48>
  406cd6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406cda:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406ce2:	f8ab 100c 	strh.w	r1, [fp, #12]
  406ce6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406cea:	b289      	uxth	r1, r1
  406cec:	0708      	lsls	r0, r1, #28
  406cee:	f140 80b3 	bpl.w	406e58 <_vfiprintf_r+0x1b4>
  406cf2:	f8db 3010 	ldr.w	r3, [fp, #16]
  406cf6:	2b00      	cmp	r3, #0
  406cf8:	f000 80ae 	beq.w	406e58 <_vfiprintf_r+0x1b4>
  406cfc:	f001 031a 	and.w	r3, r1, #26
  406d00:	2b0a      	cmp	r3, #10
  406d02:	f000 80b5 	beq.w	406e70 <_vfiprintf_r+0x1cc>
  406d06:	2300      	movs	r3, #0
  406d08:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406d0c:	930b      	str	r3, [sp, #44]	; 0x2c
  406d0e:	9311      	str	r3, [sp, #68]	; 0x44
  406d10:	9310      	str	r3, [sp, #64]	; 0x40
  406d12:	9303      	str	r3, [sp, #12]
  406d14:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406d18:	46ca      	mov	sl, r9
  406d1a:	f8cd b010 	str.w	fp, [sp, #16]
  406d1e:	f898 3000 	ldrb.w	r3, [r8]
  406d22:	4644      	mov	r4, r8
  406d24:	b1fb      	cbz	r3, 406d66 <_vfiprintf_r+0xc2>
  406d26:	2b25      	cmp	r3, #37	; 0x25
  406d28:	d102      	bne.n	406d30 <_vfiprintf_r+0x8c>
  406d2a:	e01c      	b.n	406d66 <_vfiprintf_r+0xc2>
  406d2c:	2b25      	cmp	r3, #37	; 0x25
  406d2e:	d003      	beq.n	406d38 <_vfiprintf_r+0x94>
  406d30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406d34:	2b00      	cmp	r3, #0
  406d36:	d1f9      	bne.n	406d2c <_vfiprintf_r+0x88>
  406d38:	eba4 0508 	sub.w	r5, r4, r8
  406d3c:	b19d      	cbz	r5, 406d66 <_vfiprintf_r+0xc2>
  406d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406d40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d42:	f8ca 8000 	str.w	r8, [sl]
  406d46:	3301      	adds	r3, #1
  406d48:	442a      	add	r2, r5
  406d4a:	2b07      	cmp	r3, #7
  406d4c:	f8ca 5004 	str.w	r5, [sl, #4]
  406d50:	9211      	str	r2, [sp, #68]	; 0x44
  406d52:	9310      	str	r3, [sp, #64]	; 0x40
  406d54:	dd7a      	ble.n	406e4c <_vfiprintf_r+0x1a8>
  406d56:	2a00      	cmp	r2, #0
  406d58:	f040 84b0 	bne.w	4076bc <_vfiprintf_r+0xa18>
  406d5c:	9b03      	ldr	r3, [sp, #12]
  406d5e:	9210      	str	r2, [sp, #64]	; 0x40
  406d60:	442b      	add	r3, r5
  406d62:	46ca      	mov	sl, r9
  406d64:	9303      	str	r3, [sp, #12]
  406d66:	7823      	ldrb	r3, [r4, #0]
  406d68:	2b00      	cmp	r3, #0
  406d6a:	f000 83e0 	beq.w	40752e <_vfiprintf_r+0x88a>
  406d6e:	2000      	movs	r0, #0
  406d70:	f04f 0300 	mov.w	r3, #0
  406d74:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406d78:	f104 0801 	add.w	r8, r4, #1
  406d7c:	7862      	ldrb	r2, [r4, #1]
  406d7e:	4605      	mov	r5, r0
  406d80:	4606      	mov	r6, r0
  406d82:	4603      	mov	r3, r0
  406d84:	f04f 34ff 	mov.w	r4, #4294967295
  406d88:	f108 0801 	add.w	r8, r8, #1
  406d8c:	f1a2 0120 	sub.w	r1, r2, #32
  406d90:	2958      	cmp	r1, #88	; 0x58
  406d92:	f200 82de 	bhi.w	407352 <_vfiprintf_r+0x6ae>
  406d96:	e8df f011 	tbh	[pc, r1, lsl #1]
  406d9a:	0221      	.short	0x0221
  406d9c:	02dc02dc 	.word	0x02dc02dc
  406da0:	02dc0229 	.word	0x02dc0229
  406da4:	02dc02dc 	.word	0x02dc02dc
  406da8:	02dc02dc 	.word	0x02dc02dc
  406dac:	028902dc 	.word	0x028902dc
  406db0:	02dc0295 	.word	0x02dc0295
  406db4:	02bd00a2 	.word	0x02bd00a2
  406db8:	019f02dc 	.word	0x019f02dc
  406dbc:	01a401a4 	.word	0x01a401a4
  406dc0:	01a401a4 	.word	0x01a401a4
  406dc4:	01a401a4 	.word	0x01a401a4
  406dc8:	01a401a4 	.word	0x01a401a4
  406dcc:	02dc01a4 	.word	0x02dc01a4
  406dd0:	02dc02dc 	.word	0x02dc02dc
  406dd4:	02dc02dc 	.word	0x02dc02dc
  406dd8:	02dc02dc 	.word	0x02dc02dc
  406ddc:	02dc02dc 	.word	0x02dc02dc
  406de0:	01b202dc 	.word	0x01b202dc
  406de4:	02dc02dc 	.word	0x02dc02dc
  406de8:	02dc02dc 	.word	0x02dc02dc
  406dec:	02dc02dc 	.word	0x02dc02dc
  406df0:	02dc02dc 	.word	0x02dc02dc
  406df4:	02dc02dc 	.word	0x02dc02dc
  406df8:	02dc0197 	.word	0x02dc0197
  406dfc:	02dc02dc 	.word	0x02dc02dc
  406e00:	02dc02dc 	.word	0x02dc02dc
  406e04:	02dc019b 	.word	0x02dc019b
  406e08:	025302dc 	.word	0x025302dc
  406e0c:	02dc02dc 	.word	0x02dc02dc
  406e10:	02dc02dc 	.word	0x02dc02dc
  406e14:	02dc02dc 	.word	0x02dc02dc
  406e18:	02dc02dc 	.word	0x02dc02dc
  406e1c:	02dc02dc 	.word	0x02dc02dc
  406e20:	021b025a 	.word	0x021b025a
  406e24:	02dc02dc 	.word	0x02dc02dc
  406e28:	026e02dc 	.word	0x026e02dc
  406e2c:	02dc021b 	.word	0x02dc021b
  406e30:	027302dc 	.word	0x027302dc
  406e34:	01f502dc 	.word	0x01f502dc
  406e38:	02090182 	.word	0x02090182
  406e3c:	02dc02d7 	.word	0x02dc02d7
  406e40:	02dc029a 	.word	0x02dc029a
  406e44:	02dc00a7 	.word	0x02dc00a7
  406e48:	022e02dc 	.word	0x022e02dc
  406e4c:	f10a 0a08 	add.w	sl, sl, #8
  406e50:	9b03      	ldr	r3, [sp, #12]
  406e52:	442b      	add	r3, r5
  406e54:	9303      	str	r3, [sp, #12]
  406e56:	e786      	b.n	406d66 <_vfiprintf_r+0xc2>
  406e58:	4659      	mov	r1, fp
  406e5a:	9806      	ldr	r0, [sp, #24]
  406e5c:	f000 fdac 	bl	4079b8 <__swsetup_r>
  406e60:	bb18      	cbnz	r0, 406eaa <_vfiprintf_r+0x206>
  406e62:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  406e66:	f001 031a 	and.w	r3, r1, #26
  406e6a:	2b0a      	cmp	r3, #10
  406e6c:	f47f af4b 	bne.w	406d06 <_vfiprintf_r+0x62>
  406e70:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406e74:	2b00      	cmp	r3, #0
  406e76:	f6ff af46 	blt.w	406d06 <_vfiprintf_r+0x62>
  406e7a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406e7e:	07db      	lsls	r3, r3, #31
  406e80:	d405      	bmi.n	406e8e <_vfiprintf_r+0x1ea>
  406e82:	058f      	lsls	r7, r1, #22
  406e84:	d403      	bmi.n	406e8e <_vfiprintf_r+0x1ea>
  406e86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406e8a:	f001 fac3 	bl	408414 <__retarget_lock_release_recursive>
  406e8e:	462b      	mov	r3, r5
  406e90:	4642      	mov	r2, r8
  406e92:	4659      	mov	r1, fp
  406e94:	9806      	ldr	r0, [sp, #24]
  406e96:	f000 fd4d 	bl	407934 <__sbprintf>
  406e9a:	9003      	str	r0, [sp, #12]
  406e9c:	9803      	ldr	r0, [sp, #12]
  406e9e:	b02d      	add	sp, #180	; 0xb4
  406ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ea4:	f000 fef4 	bl	407c90 <__sinit>
  406ea8:	e709      	b.n	406cbe <_vfiprintf_r+0x1a>
  406eaa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406eae:	07d9      	lsls	r1, r3, #31
  406eb0:	d404      	bmi.n	406ebc <_vfiprintf_r+0x218>
  406eb2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406eb6:	059a      	lsls	r2, r3, #22
  406eb8:	f140 84aa 	bpl.w	407810 <_vfiprintf_r+0xb6c>
  406ebc:	f04f 33ff 	mov.w	r3, #4294967295
  406ec0:	9303      	str	r3, [sp, #12]
  406ec2:	9803      	ldr	r0, [sp, #12]
  406ec4:	b02d      	add	sp, #180	; 0xb4
  406ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406ece:	f001 fa9f 	bl	408410 <__retarget_lock_acquire_recursive>
  406ed2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406ed6:	b281      	uxth	r1, r0
  406ed8:	e6fb      	b.n	406cd2 <_vfiprintf_r+0x2e>
  406eda:	4276      	negs	r6, r6
  406edc:	9207      	str	r2, [sp, #28]
  406ede:	f043 0304 	orr.w	r3, r3, #4
  406ee2:	f898 2000 	ldrb.w	r2, [r8]
  406ee6:	e74f      	b.n	406d88 <_vfiprintf_r+0xe4>
  406ee8:	9608      	str	r6, [sp, #32]
  406eea:	069e      	lsls	r6, r3, #26
  406eec:	f100 8450 	bmi.w	407790 <_vfiprintf_r+0xaec>
  406ef0:	9907      	ldr	r1, [sp, #28]
  406ef2:	06dd      	lsls	r5, r3, #27
  406ef4:	460a      	mov	r2, r1
  406ef6:	f100 83ef 	bmi.w	4076d8 <_vfiprintf_r+0xa34>
  406efa:	0658      	lsls	r0, r3, #25
  406efc:	f140 83ec 	bpl.w	4076d8 <_vfiprintf_r+0xa34>
  406f00:	880e      	ldrh	r6, [r1, #0]
  406f02:	3104      	adds	r1, #4
  406f04:	2700      	movs	r7, #0
  406f06:	2201      	movs	r2, #1
  406f08:	9107      	str	r1, [sp, #28]
  406f0a:	f04f 0100 	mov.w	r1, #0
  406f0e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  406f12:	2500      	movs	r5, #0
  406f14:	1c61      	adds	r1, r4, #1
  406f16:	f000 8116 	beq.w	407146 <_vfiprintf_r+0x4a2>
  406f1a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406f1e:	9102      	str	r1, [sp, #8]
  406f20:	ea56 0107 	orrs.w	r1, r6, r7
  406f24:	f040 8114 	bne.w	407150 <_vfiprintf_r+0x4ac>
  406f28:	2c00      	cmp	r4, #0
  406f2a:	f040 835c 	bne.w	4075e6 <_vfiprintf_r+0x942>
  406f2e:	2a00      	cmp	r2, #0
  406f30:	f040 83b7 	bne.w	4076a2 <_vfiprintf_r+0x9fe>
  406f34:	f013 0301 	ands.w	r3, r3, #1
  406f38:	9305      	str	r3, [sp, #20]
  406f3a:	f000 8457 	beq.w	4077ec <_vfiprintf_r+0xb48>
  406f3e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406f42:	2330      	movs	r3, #48	; 0x30
  406f44:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406f48:	9b05      	ldr	r3, [sp, #20]
  406f4a:	42a3      	cmp	r3, r4
  406f4c:	bfb8      	it	lt
  406f4e:	4623      	movlt	r3, r4
  406f50:	9301      	str	r3, [sp, #4]
  406f52:	b10d      	cbz	r5, 406f58 <_vfiprintf_r+0x2b4>
  406f54:	3301      	adds	r3, #1
  406f56:	9301      	str	r3, [sp, #4]
  406f58:	9b02      	ldr	r3, [sp, #8]
  406f5a:	f013 0302 	ands.w	r3, r3, #2
  406f5e:	9309      	str	r3, [sp, #36]	; 0x24
  406f60:	d002      	beq.n	406f68 <_vfiprintf_r+0x2c4>
  406f62:	9b01      	ldr	r3, [sp, #4]
  406f64:	3302      	adds	r3, #2
  406f66:	9301      	str	r3, [sp, #4]
  406f68:	9b02      	ldr	r3, [sp, #8]
  406f6a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406f6e:	930a      	str	r3, [sp, #40]	; 0x28
  406f70:	f040 8217 	bne.w	4073a2 <_vfiprintf_r+0x6fe>
  406f74:	9b08      	ldr	r3, [sp, #32]
  406f76:	9a01      	ldr	r2, [sp, #4]
  406f78:	1a9d      	subs	r5, r3, r2
  406f7a:	2d00      	cmp	r5, #0
  406f7c:	f340 8211 	ble.w	4073a2 <_vfiprintf_r+0x6fe>
  406f80:	2d10      	cmp	r5, #16
  406f82:	f340 8490 	ble.w	4078a6 <_vfiprintf_r+0xc02>
  406f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f8a:	4ec4      	ldr	r6, [pc, #784]	; (40729c <_vfiprintf_r+0x5f8>)
  406f8c:	46d6      	mov	lr, sl
  406f8e:	2710      	movs	r7, #16
  406f90:	46a2      	mov	sl, r4
  406f92:	4619      	mov	r1, r3
  406f94:	9c06      	ldr	r4, [sp, #24]
  406f96:	e007      	b.n	406fa8 <_vfiprintf_r+0x304>
  406f98:	f101 0c02 	add.w	ip, r1, #2
  406f9c:	f10e 0e08 	add.w	lr, lr, #8
  406fa0:	4601      	mov	r1, r0
  406fa2:	3d10      	subs	r5, #16
  406fa4:	2d10      	cmp	r5, #16
  406fa6:	dd11      	ble.n	406fcc <_vfiprintf_r+0x328>
  406fa8:	1c48      	adds	r0, r1, #1
  406faa:	3210      	adds	r2, #16
  406fac:	2807      	cmp	r0, #7
  406fae:	9211      	str	r2, [sp, #68]	; 0x44
  406fb0:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406fb4:	9010      	str	r0, [sp, #64]	; 0x40
  406fb6:	ddef      	ble.n	406f98 <_vfiprintf_r+0x2f4>
  406fb8:	2a00      	cmp	r2, #0
  406fba:	f040 81e4 	bne.w	407386 <_vfiprintf_r+0x6e2>
  406fbe:	3d10      	subs	r5, #16
  406fc0:	2d10      	cmp	r5, #16
  406fc2:	4611      	mov	r1, r2
  406fc4:	f04f 0c01 	mov.w	ip, #1
  406fc8:	46ce      	mov	lr, r9
  406fca:	dced      	bgt.n	406fa8 <_vfiprintf_r+0x304>
  406fcc:	4654      	mov	r4, sl
  406fce:	4661      	mov	r1, ip
  406fd0:	46f2      	mov	sl, lr
  406fd2:	442a      	add	r2, r5
  406fd4:	2907      	cmp	r1, #7
  406fd6:	9211      	str	r2, [sp, #68]	; 0x44
  406fd8:	f8ca 6000 	str.w	r6, [sl]
  406fdc:	f8ca 5004 	str.w	r5, [sl, #4]
  406fe0:	9110      	str	r1, [sp, #64]	; 0x40
  406fe2:	f300 82ec 	bgt.w	4075be <_vfiprintf_r+0x91a>
  406fe6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406fea:	f10a 0a08 	add.w	sl, sl, #8
  406fee:	1c48      	adds	r0, r1, #1
  406ff0:	2d00      	cmp	r5, #0
  406ff2:	f040 81de 	bne.w	4073b2 <_vfiprintf_r+0x70e>
  406ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ff8:	2b00      	cmp	r3, #0
  406ffa:	f000 81f8 	beq.w	4073ee <_vfiprintf_r+0x74a>
  406ffe:	3202      	adds	r2, #2
  407000:	a90e      	add	r1, sp, #56	; 0x38
  407002:	2302      	movs	r3, #2
  407004:	2807      	cmp	r0, #7
  407006:	9211      	str	r2, [sp, #68]	; 0x44
  407008:	9010      	str	r0, [sp, #64]	; 0x40
  40700a:	e88a 000a 	stmia.w	sl, {r1, r3}
  40700e:	f340 81ea 	ble.w	4073e6 <_vfiprintf_r+0x742>
  407012:	2a00      	cmp	r2, #0
  407014:	f040 838c 	bne.w	407730 <_vfiprintf_r+0xa8c>
  407018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40701a:	2b80      	cmp	r3, #128	; 0x80
  40701c:	f04f 0001 	mov.w	r0, #1
  407020:	4611      	mov	r1, r2
  407022:	46ca      	mov	sl, r9
  407024:	f040 81e7 	bne.w	4073f6 <_vfiprintf_r+0x752>
  407028:	9b08      	ldr	r3, [sp, #32]
  40702a:	9d01      	ldr	r5, [sp, #4]
  40702c:	1b5e      	subs	r6, r3, r5
  40702e:	2e00      	cmp	r6, #0
  407030:	f340 81e1 	ble.w	4073f6 <_vfiprintf_r+0x752>
  407034:	2e10      	cmp	r6, #16
  407036:	4d9a      	ldr	r5, [pc, #616]	; (4072a0 <_vfiprintf_r+0x5fc>)
  407038:	f340 8450 	ble.w	4078dc <_vfiprintf_r+0xc38>
  40703c:	46d4      	mov	ip, sl
  40703e:	2710      	movs	r7, #16
  407040:	46a2      	mov	sl, r4
  407042:	9c06      	ldr	r4, [sp, #24]
  407044:	e007      	b.n	407056 <_vfiprintf_r+0x3b2>
  407046:	f101 0e02 	add.w	lr, r1, #2
  40704a:	f10c 0c08 	add.w	ip, ip, #8
  40704e:	4601      	mov	r1, r0
  407050:	3e10      	subs	r6, #16
  407052:	2e10      	cmp	r6, #16
  407054:	dd11      	ble.n	40707a <_vfiprintf_r+0x3d6>
  407056:	1c48      	adds	r0, r1, #1
  407058:	3210      	adds	r2, #16
  40705a:	2807      	cmp	r0, #7
  40705c:	9211      	str	r2, [sp, #68]	; 0x44
  40705e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  407062:	9010      	str	r0, [sp, #64]	; 0x40
  407064:	ddef      	ble.n	407046 <_vfiprintf_r+0x3a2>
  407066:	2a00      	cmp	r2, #0
  407068:	f040 829d 	bne.w	4075a6 <_vfiprintf_r+0x902>
  40706c:	3e10      	subs	r6, #16
  40706e:	2e10      	cmp	r6, #16
  407070:	f04f 0e01 	mov.w	lr, #1
  407074:	4611      	mov	r1, r2
  407076:	46cc      	mov	ip, r9
  407078:	dced      	bgt.n	407056 <_vfiprintf_r+0x3b2>
  40707a:	4654      	mov	r4, sl
  40707c:	46e2      	mov	sl, ip
  40707e:	4432      	add	r2, r6
  407080:	f1be 0f07 	cmp.w	lr, #7
  407084:	9211      	str	r2, [sp, #68]	; 0x44
  407086:	e88a 0060 	stmia.w	sl, {r5, r6}
  40708a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40708e:	f300 8369 	bgt.w	407764 <_vfiprintf_r+0xac0>
  407092:	f10a 0a08 	add.w	sl, sl, #8
  407096:	f10e 0001 	add.w	r0, lr, #1
  40709a:	4671      	mov	r1, lr
  40709c:	e1ab      	b.n	4073f6 <_vfiprintf_r+0x752>
  40709e:	9608      	str	r6, [sp, #32]
  4070a0:	f013 0220 	ands.w	r2, r3, #32
  4070a4:	f040 838c 	bne.w	4077c0 <_vfiprintf_r+0xb1c>
  4070a8:	f013 0110 	ands.w	r1, r3, #16
  4070ac:	f040 831a 	bne.w	4076e4 <_vfiprintf_r+0xa40>
  4070b0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4070b4:	f000 8316 	beq.w	4076e4 <_vfiprintf_r+0xa40>
  4070b8:	9807      	ldr	r0, [sp, #28]
  4070ba:	460a      	mov	r2, r1
  4070bc:	4601      	mov	r1, r0
  4070be:	3104      	adds	r1, #4
  4070c0:	8806      	ldrh	r6, [r0, #0]
  4070c2:	9107      	str	r1, [sp, #28]
  4070c4:	2700      	movs	r7, #0
  4070c6:	e720      	b.n	406f0a <_vfiprintf_r+0x266>
  4070c8:	9608      	str	r6, [sp, #32]
  4070ca:	f043 0310 	orr.w	r3, r3, #16
  4070ce:	e7e7      	b.n	4070a0 <_vfiprintf_r+0x3fc>
  4070d0:	9608      	str	r6, [sp, #32]
  4070d2:	f043 0310 	orr.w	r3, r3, #16
  4070d6:	e708      	b.n	406eea <_vfiprintf_r+0x246>
  4070d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4070dc:	f898 2000 	ldrb.w	r2, [r8]
  4070e0:	e652      	b.n	406d88 <_vfiprintf_r+0xe4>
  4070e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4070e6:	2600      	movs	r6, #0
  4070e8:	f818 2b01 	ldrb.w	r2, [r8], #1
  4070ec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4070f0:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4070f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4070f8:	2909      	cmp	r1, #9
  4070fa:	d9f5      	bls.n	4070e8 <_vfiprintf_r+0x444>
  4070fc:	e646      	b.n	406d8c <_vfiprintf_r+0xe8>
  4070fe:	9608      	str	r6, [sp, #32]
  407100:	2800      	cmp	r0, #0
  407102:	f040 8408 	bne.w	407916 <_vfiprintf_r+0xc72>
  407106:	f043 0310 	orr.w	r3, r3, #16
  40710a:	069e      	lsls	r6, r3, #26
  40710c:	f100 834c 	bmi.w	4077a8 <_vfiprintf_r+0xb04>
  407110:	06dd      	lsls	r5, r3, #27
  407112:	f100 82f3 	bmi.w	4076fc <_vfiprintf_r+0xa58>
  407116:	0658      	lsls	r0, r3, #25
  407118:	f140 82f0 	bpl.w	4076fc <_vfiprintf_r+0xa58>
  40711c:	9d07      	ldr	r5, [sp, #28]
  40711e:	f9b5 6000 	ldrsh.w	r6, [r5]
  407122:	462a      	mov	r2, r5
  407124:	17f7      	asrs	r7, r6, #31
  407126:	3204      	adds	r2, #4
  407128:	4630      	mov	r0, r6
  40712a:	4639      	mov	r1, r7
  40712c:	9207      	str	r2, [sp, #28]
  40712e:	2800      	cmp	r0, #0
  407130:	f171 0200 	sbcs.w	r2, r1, #0
  407134:	f2c0 835d 	blt.w	4077f2 <_vfiprintf_r+0xb4e>
  407138:	1c61      	adds	r1, r4, #1
  40713a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40713e:	f04f 0201 	mov.w	r2, #1
  407142:	f47f aeea 	bne.w	406f1a <_vfiprintf_r+0x276>
  407146:	ea56 0107 	orrs.w	r1, r6, r7
  40714a:	f000 824d 	beq.w	4075e8 <_vfiprintf_r+0x944>
  40714e:	9302      	str	r3, [sp, #8]
  407150:	2a01      	cmp	r2, #1
  407152:	f000 828c 	beq.w	40766e <_vfiprintf_r+0x9ca>
  407156:	2a02      	cmp	r2, #2
  407158:	f040 825c 	bne.w	407614 <_vfiprintf_r+0x970>
  40715c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40715e:	46cb      	mov	fp, r9
  407160:	0933      	lsrs	r3, r6, #4
  407162:	f006 010f 	and.w	r1, r6, #15
  407166:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40716a:	093a      	lsrs	r2, r7, #4
  40716c:	461e      	mov	r6, r3
  40716e:	4617      	mov	r7, r2
  407170:	5c43      	ldrb	r3, [r0, r1]
  407172:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  407176:	ea56 0307 	orrs.w	r3, r6, r7
  40717a:	d1f1      	bne.n	407160 <_vfiprintf_r+0x4bc>
  40717c:	eba9 030b 	sub.w	r3, r9, fp
  407180:	9305      	str	r3, [sp, #20]
  407182:	e6e1      	b.n	406f48 <_vfiprintf_r+0x2a4>
  407184:	2800      	cmp	r0, #0
  407186:	f040 83c0 	bne.w	40790a <_vfiprintf_r+0xc66>
  40718a:	0699      	lsls	r1, r3, #26
  40718c:	f100 8367 	bmi.w	40785e <_vfiprintf_r+0xbba>
  407190:	06da      	lsls	r2, r3, #27
  407192:	f100 80f1 	bmi.w	407378 <_vfiprintf_r+0x6d4>
  407196:	065b      	lsls	r3, r3, #25
  407198:	f140 80ee 	bpl.w	407378 <_vfiprintf_r+0x6d4>
  40719c:	9a07      	ldr	r2, [sp, #28]
  40719e:	6813      	ldr	r3, [r2, #0]
  4071a0:	3204      	adds	r2, #4
  4071a2:	9207      	str	r2, [sp, #28]
  4071a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4071a8:	801a      	strh	r2, [r3, #0]
  4071aa:	e5b8      	b.n	406d1e <_vfiprintf_r+0x7a>
  4071ac:	9807      	ldr	r0, [sp, #28]
  4071ae:	4a3d      	ldr	r2, [pc, #244]	; (4072a4 <_vfiprintf_r+0x600>)
  4071b0:	9608      	str	r6, [sp, #32]
  4071b2:	920b      	str	r2, [sp, #44]	; 0x2c
  4071b4:	6806      	ldr	r6, [r0, #0]
  4071b6:	2278      	movs	r2, #120	; 0x78
  4071b8:	2130      	movs	r1, #48	; 0x30
  4071ba:	3004      	adds	r0, #4
  4071bc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4071c0:	f043 0302 	orr.w	r3, r3, #2
  4071c4:	9007      	str	r0, [sp, #28]
  4071c6:	2700      	movs	r7, #0
  4071c8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4071cc:	2202      	movs	r2, #2
  4071ce:	e69c      	b.n	406f0a <_vfiprintf_r+0x266>
  4071d0:	9608      	str	r6, [sp, #32]
  4071d2:	2800      	cmp	r0, #0
  4071d4:	d099      	beq.n	40710a <_vfiprintf_r+0x466>
  4071d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4071da:	e796      	b.n	40710a <_vfiprintf_r+0x466>
  4071dc:	f898 2000 	ldrb.w	r2, [r8]
  4071e0:	2d00      	cmp	r5, #0
  4071e2:	f47f add1 	bne.w	406d88 <_vfiprintf_r+0xe4>
  4071e6:	2001      	movs	r0, #1
  4071e8:	2520      	movs	r5, #32
  4071ea:	e5cd      	b.n	406d88 <_vfiprintf_r+0xe4>
  4071ec:	f043 0301 	orr.w	r3, r3, #1
  4071f0:	f898 2000 	ldrb.w	r2, [r8]
  4071f4:	e5c8      	b.n	406d88 <_vfiprintf_r+0xe4>
  4071f6:	9608      	str	r6, [sp, #32]
  4071f8:	2800      	cmp	r0, #0
  4071fa:	f040 8393 	bne.w	407924 <_vfiprintf_r+0xc80>
  4071fe:	4929      	ldr	r1, [pc, #164]	; (4072a4 <_vfiprintf_r+0x600>)
  407200:	910b      	str	r1, [sp, #44]	; 0x2c
  407202:	069f      	lsls	r7, r3, #26
  407204:	f100 82e8 	bmi.w	4077d8 <_vfiprintf_r+0xb34>
  407208:	9807      	ldr	r0, [sp, #28]
  40720a:	06de      	lsls	r6, r3, #27
  40720c:	4601      	mov	r1, r0
  40720e:	f100 8270 	bmi.w	4076f2 <_vfiprintf_r+0xa4e>
  407212:	065d      	lsls	r5, r3, #25
  407214:	f140 826d 	bpl.w	4076f2 <_vfiprintf_r+0xa4e>
  407218:	3104      	adds	r1, #4
  40721a:	8806      	ldrh	r6, [r0, #0]
  40721c:	9107      	str	r1, [sp, #28]
  40721e:	2700      	movs	r7, #0
  407220:	07d8      	lsls	r0, r3, #31
  407222:	f140 8222 	bpl.w	40766a <_vfiprintf_r+0x9c6>
  407226:	ea56 0107 	orrs.w	r1, r6, r7
  40722a:	f000 821e 	beq.w	40766a <_vfiprintf_r+0x9c6>
  40722e:	2130      	movs	r1, #48	; 0x30
  407230:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407234:	f043 0302 	orr.w	r3, r3, #2
  407238:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40723c:	2202      	movs	r2, #2
  40723e:	e664      	b.n	406f0a <_vfiprintf_r+0x266>
  407240:	9608      	str	r6, [sp, #32]
  407242:	2800      	cmp	r0, #0
  407244:	f040 836b 	bne.w	40791e <_vfiprintf_r+0xc7a>
  407248:	4917      	ldr	r1, [pc, #92]	; (4072a8 <_vfiprintf_r+0x604>)
  40724a:	910b      	str	r1, [sp, #44]	; 0x2c
  40724c:	e7d9      	b.n	407202 <_vfiprintf_r+0x55e>
  40724e:	9907      	ldr	r1, [sp, #28]
  407250:	9608      	str	r6, [sp, #32]
  407252:	680a      	ldr	r2, [r1, #0]
  407254:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407258:	f04f 0000 	mov.w	r0, #0
  40725c:	460a      	mov	r2, r1
  40725e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  407262:	3204      	adds	r2, #4
  407264:	2001      	movs	r0, #1
  407266:	9001      	str	r0, [sp, #4]
  407268:	9207      	str	r2, [sp, #28]
  40726a:	9005      	str	r0, [sp, #20]
  40726c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407270:	9302      	str	r3, [sp, #8]
  407272:	2400      	movs	r4, #0
  407274:	e670      	b.n	406f58 <_vfiprintf_r+0x2b4>
  407276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40727a:	f898 2000 	ldrb.w	r2, [r8]
  40727e:	e583      	b.n	406d88 <_vfiprintf_r+0xe4>
  407280:	f898 2000 	ldrb.w	r2, [r8]
  407284:	2a6c      	cmp	r2, #108	; 0x6c
  407286:	bf03      	ittte	eq
  407288:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40728c:	f043 0320 	orreq.w	r3, r3, #32
  407290:	f108 0801 	addeq.w	r8, r8, #1
  407294:	f043 0310 	orrne.w	r3, r3, #16
  407298:	e576      	b.n	406d88 <_vfiprintf_r+0xe4>
  40729a:	bf00      	nop
  40729c:	0040a820 	.word	0x0040a820
  4072a0:	0040a830 	.word	0x0040a830
  4072a4:	0040a804 	.word	0x0040a804
  4072a8:	0040a7f0 	.word	0x0040a7f0
  4072ac:	9907      	ldr	r1, [sp, #28]
  4072ae:	680e      	ldr	r6, [r1, #0]
  4072b0:	460a      	mov	r2, r1
  4072b2:	2e00      	cmp	r6, #0
  4072b4:	f102 0204 	add.w	r2, r2, #4
  4072b8:	f6ff ae0f 	blt.w	406eda <_vfiprintf_r+0x236>
  4072bc:	9207      	str	r2, [sp, #28]
  4072be:	f898 2000 	ldrb.w	r2, [r8]
  4072c2:	e561      	b.n	406d88 <_vfiprintf_r+0xe4>
  4072c4:	f898 2000 	ldrb.w	r2, [r8]
  4072c8:	2001      	movs	r0, #1
  4072ca:	252b      	movs	r5, #43	; 0x2b
  4072cc:	e55c      	b.n	406d88 <_vfiprintf_r+0xe4>
  4072ce:	9907      	ldr	r1, [sp, #28]
  4072d0:	9608      	str	r6, [sp, #32]
  4072d2:	f8d1 b000 	ldr.w	fp, [r1]
  4072d6:	f04f 0200 	mov.w	r2, #0
  4072da:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4072de:	1d0e      	adds	r6, r1, #4
  4072e0:	f1bb 0f00 	cmp.w	fp, #0
  4072e4:	f000 82e5 	beq.w	4078b2 <_vfiprintf_r+0xc0e>
  4072e8:	1c67      	adds	r7, r4, #1
  4072ea:	f000 82c4 	beq.w	407876 <_vfiprintf_r+0xbd2>
  4072ee:	4622      	mov	r2, r4
  4072f0:	2100      	movs	r1, #0
  4072f2:	4658      	mov	r0, fp
  4072f4:	9301      	str	r3, [sp, #4]
  4072f6:	f001 fbdb 	bl	408ab0 <memchr>
  4072fa:	9b01      	ldr	r3, [sp, #4]
  4072fc:	2800      	cmp	r0, #0
  4072fe:	f000 82e5 	beq.w	4078cc <_vfiprintf_r+0xc28>
  407302:	eba0 020b 	sub.w	r2, r0, fp
  407306:	9205      	str	r2, [sp, #20]
  407308:	9607      	str	r6, [sp, #28]
  40730a:	9302      	str	r3, [sp, #8]
  40730c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407310:	2400      	movs	r4, #0
  407312:	e619      	b.n	406f48 <_vfiprintf_r+0x2a4>
  407314:	f898 2000 	ldrb.w	r2, [r8]
  407318:	2a2a      	cmp	r2, #42	; 0x2a
  40731a:	f108 0701 	add.w	r7, r8, #1
  40731e:	f000 82e9 	beq.w	4078f4 <_vfiprintf_r+0xc50>
  407322:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407326:	2909      	cmp	r1, #9
  407328:	46b8      	mov	r8, r7
  40732a:	f04f 0400 	mov.w	r4, #0
  40732e:	f63f ad2d 	bhi.w	406d8c <_vfiprintf_r+0xe8>
  407332:	f818 2b01 	ldrb.w	r2, [r8], #1
  407336:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40733a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40733e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407342:	2909      	cmp	r1, #9
  407344:	d9f5      	bls.n	407332 <_vfiprintf_r+0x68e>
  407346:	e521      	b.n	406d8c <_vfiprintf_r+0xe8>
  407348:	f043 0320 	orr.w	r3, r3, #32
  40734c:	f898 2000 	ldrb.w	r2, [r8]
  407350:	e51a      	b.n	406d88 <_vfiprintf_r+0xe4>
  407352:	9608      	str	r6, [sp, #32]
  407354:	2800      	cmp	r0, #0
  407356:	f040 82db 	bne.w	407910 <_vfiprintf_r+0xc6c>
  40735a:	2a00      	cmp	r2, #0
  40735c:	f000 80e7 	beq.w	40752e <_vfiprintf_r+0x88a>
  407360:	2101      	movs	r1, #1
  407362:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407366:	f04f 0200 	mov.w	r2, #0
  40736a:	9101      	str	r1, [sp, #4]
  40736c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407370:	9105      	str	r1, [sp, #20]
  407372:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407376:	e77b      	b.n	407270 <_vfiprintf_r+0x5cc>
  407378:	9a07      	ldr	r2, [sp, #28]
  40737a:	6813      	ldr	r3, [r2, #0]
  40737c:	3204      	adds	r2, #4
  40737e:	9207      	str	r2, [sp, #28]
  407380:	9a03      	ldr	r2, [sp, #12]
  407382:	601a      	str	r2, [r3, #0]
  407384:	e4cb      	b.n	406d1e <_vfiprintf_r+0x7a>
  407386:	aa0f      	add	r2, sp, #60	; 0x3c
  407388:	9904      	ldr	r1, [sp, #16]
  40738a:	4620      	mov	r0, r4
  40738c:	f7ff fc4a 	bl	406c24 <__sprint_r.part.0>
  407390:	2800      	cmp	r0, #0
  407392:	f040 8139 	bne.w	407608 <_vfiprintf_r+0x964>
  407396:	9910      	ldr	r1, [sp, #64]	; 0x40
  407398:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40739a:	f101 0c01 	add.w	ip, r1, #1
  40739e:	46ce      	mov	lr, r9
  4073a0:	e5ff      	b.n	406fa2 <_vfiprintf_r+0x2fe>
  4073a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4073a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073a6:	1c48      	adds	r0, r1, #1
  4073a8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4073ac:	2d00      	cmp	r5, #0
  4073ae:	f43f ae22 	beq.w	406ff6 <_vfiprintf_r+0x352>
  4073b2:	3201      	adds	r2, #1
  4073b4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4073b8:	2101      	movs	r1, #1
  4073ba:	2807      	cmp	r0, #7
  4073bc:	9211      	str	r2, [sp, #68]	; 0x44
  4073be:	9010      	str	r0, [sp, #64]	; 0x40
  4073c0:	f8ca 5000 	str.w	r5, [sl]
  4073c4:	f8ca 1004 	str.w	r1, [sl, #4]
  4073c8:	f340 8108 	ble.w	4075dc <_vfiprintf_r+0x938>
  4073cc:	2a00      	cmp	r2, #0
  4073ce:	f040 81bc 	bne.w	40774a <_vfiprintf_r+0xaa6>
  4073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4073d4:	2b00      	cmp	r3, #0
  4073d6:	f43f ae1f 	beq.w	407018 <_vfiprintf_r+0x374>
  4073da:	ab0e      	add	r3, sp, #56	; 0x38
  4073dc:	2202      	movs	r2, #2
  4073de:	4608      	mov	r0, r1
  4073e0:	931c      	str	r3, [sp, #112]	; 0x70
  4073e2:	921d      	str	r2, [sp, #116]	; 0x74
  4073e4:	46ca      	mov	sl, r9
  4073e6:	4601      	mov	r1, r0
  4073e8:	f10a 0a08 	add.w	sl, sl, #8
  4073ec:	3001      	adds	r0, #1
  4073ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4073f0:	2b80      	cmp	r3, #128	; 0x80
  4073f2:	f43f ae19 	beq.w	407028 <_vfiprintf_r+0x384>
  4073f6:	9b05      	ldr	r3, [sp, #20]
  4073f8:	1ae4      	subs	r4, r4, r3
  4073fa:	2c00      	cmp	r4, #0
  4073fc:	dd2e      	ble.n	40745c <_vfiprintf_r+0x7b8>
  4073fe:	2c10      	cmp	r4, #16
  407400:	4db3      	ldr	r5, [pc, #716]	; (4076d0 <_vfiprintf_r+0xa2c>)
  407402:	dd1e      	ble.n	407442 <_vfiprintf_r+0x79e>
  407404:	46d6      	mov	lr, sl
  407406:	2610      	movs	r6, #16
  407408:	9f06      	ldr	r7, [sp, #24]
  40740a:	f8dd a010 	ldr.w	sl, [sp, #16]
  40740e:	e006      	b.n	40741e <_vfiprintf_r+0x77a>
  407410:	1c88      	adds	r0, r1, #2
  407412:	f10e 0e08 	add.w	lr, lr, #8
  407416:	4619      	mov	r1, r3
  407418:	3c10      	subs	r4, #16
  40741a:	2c10      	cmp	r4, #16
  40741c:	dd10      	ble.n	407440 <_vfiprintf_r+0x79c>
  40741e:	1c4b      	adds	r3, r1, #1
  407420:	3210      	adds	r2, #16
  407422:	2b07      	cmp	r3, #7
  407424:	9211      	str	r2, [sp, #68]	; 0x44
  407426:	e88e 0060 	stmia.w	lr, {r5, r6}
  40742a:	9310      	str	r3, [sp, #64]	; 0x40
  40742c:	ddf0      	ble.n	407410 <_vfiprintf_r+0x76c>
  40742e:	2a00      	cmp	r2, #0
  407430:	d165      	bne.n	4074fe <_vfiprintf_r+0x85a>
  407432:	3c10      	subs	r4, #16
  407434:	2c10      	cmp	r4, #16
  407436:	f04f 0001 	mov.w	r0, #1
  40743a:	4611      	mov	r1, r2
  40743c:	46ce      	mov	lr, r9
  40743e:	dcee      	bgt.n	40741e <_vfiprintf_r+0x77a>
  407440:	46f2      	mov	sl, lr
  407442:	4422      	add	r2, r4
  407444:	2807      	cmp	r0, #7
  407446:	9211      	str	r2, [sp, #68]	; 0x44
  407448:	f8ca 5000 	str.w	r5, [sl]
  40744c:	f8ca 4004 	str.w	r4, [sl, #4]
  407450:	9010      	str	r0, [sp, #64]	; 0x40
  407452:	f300 8085 	bgt.w	407560 <_vfiprintf_r+0x8bc>
  407456:	f10a 0a08 	add.w	sl, sl, #8
  40745a:	3001      	adds	r0, #1
  40745c:	9905      	ldr	r1, [sp, #20]
  40745e:	f8ca b000 	str.w	fp, [sl]
  407462:	440a      	add	r2, r1
  407464:	2807      	cmp	r0, #7
  407466:	9211      	str	r2, [sp, #68]	; 0x44
  407468:	f8ca 1004 	str.w	r1, [sl, #4]
  40746c:	9010      	str	r0, [sp, #64]	; 0x40
  40746e:	f340 8082 	ble.w	407576 <_vfiprintf_r+0x8d2>
  407472:	2a00      	cmp	r2, #0
  407474:	f040 8118 	bne.w	4076a8 <_vfiprintf_r+0xa04>
  407478:	9b02      	ldr	r3, [sp, #8]
  40747a:	9210      	str	r2, [sp, #64]	; 0x40
  40747c:	0758      	lsls	r0, r3, #29
  40747e:	d535      	bpl.n	4074ec <_vfiprintf_r+0x848>
  407480:	9b08      	ldr	r3, [sp, #32]
  407482:	9901      	ldr	r1, [sp, #4]
  407484:	1a5c      	subs	r4, r3, r1
  407486:	2c00      	cmp	r4, #0
  407488:	f340 80e7 	ble.w	40765a <_vfiprintf_r+0x9b6>
  40748c:	46ca      	mov	sl, r9
  40748e:	2c10      	cmp	r4, #16
  407490:	f340 8218 	ble.w	4078c4 <_vfiprintf_r+0xc20>
  407494:	9910      	ldr	r1, [sp, #64]	; 0x40
  407496:	4e8f      	ldr	r6, [pc, #572]	; (4076d4 <_vfiprintf_r+0xa30>)
  407498:	9f06      	ldr	r7, [sp, #24]
  40749a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40749e:	2510      	movs	r5, #16
  4074a0:	e006      	b.n	4074b0 <_vfiprintf_r+0x80c>
  4074a2:	1c88      	adds	r0, r1, #2
  4074a4:	f10a 0a08 	add.w	sl, sl, #8
  4074a8:	4619      	mov	r1, r3
  4074aa:	3c10      	subs	r4, #16
  4074ac:	2c10      	cmp	r4, #16
  4074ae:	dd11      	ble.n	4074d4 <_vfiprintf_r+0x830>
  4074b0:	1c4b      	adds	r3, r1, #1
  4074b2:	3210      	adds	r2, #16
  4074b4:	2b07      	cmp	r3, #7
  4074b6:	9211      	str	r2, [sp, #68]	; 0x44
  4074b8:	f8ca 6000 	str.w	r6, [sl]
  4074bc:	f8ca 5004 	str.w	r5, [sl, #4]
  4074c0:	9310      	str	r3, [sp, #64]	; 0x40
  4074c2:	ddee      	ble.n	4074a2 <_vfiprintf_r+0x7fe>
  4074c4:	bb42      	cbnz	r2, 407518 <_vfiprintf_r+0x874>
  4074c6:	3c10      	subs	r4, #16
  4074c8:	2c10      	cmp	r4, #16
  4074ca:	f04f 0001 	mov.w	r0, #1
  4074ce:	4611      	mov	r1, r2
  4074d0:	46ca      	mov	sl, r9
  4074d2:	dced      	bgt.n	4074b0 <_vfiprintf_r+0x80c>
  4074d4:	4422      	add	r2, r4
  4074d6:	2807      	cmp	r0, #7
  4074d8:	9211      	str	r2, [sp, #68]	; 0x44
  4074da:	f8ca 6000 	str.w	r6, [sl]
  4074de:	f8ca 4004 	str.w	r4, [sl, #4]
  4074e2:	9010      	str	r0, [sp, #64]	; 0x40
  4074e4:	dd51      	ble.n	40758a <_vfiprintf_r+0x8e6>
  4074e6:	2a00      	cmp	r2, #0
  4074e8:	f040 819b 	bne.w	407822 <_vfiprintf_r+0xb7e>
  4074ec:	9b03      	ldr	r3, [sp, #12]
  4074ee:	9a08      	ldr	r2, [sp, #32]
  4074f0:	9901      	ldr	r1, [sp, #4]
  4074f2:	428a      	cmp	r2, r1
  4074f4:	bfac      	ite	ge
  4074f6:	189b      	addge	r3, r3, r2
  4074f8:	185b      	addlt	r3, r3, r1
  4074fa:	9303      	str	r3, [sp, #12]
  4074fc:	e04e      	b.n	40759c <_vfiprintf_r+0x8f8>
  4074fe:	aa0f      	add	r2, sp, #60	; 0x3c
  407500:	4651      	mov	r1, sl
  407502:	4638      	mov	r0, r7
  407504:	f7ff fb8e 	bl	406c24 <__sprint_r.part.0>
  407508:	2800      	cmp	r0, #0
  40750a:	f040 813f 	bne.w	40778c <_vfiprintf_r+0xae8>
  40750e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407510:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407512:	1c48      	adds	r0, r1, #1
  407514:	46ce      	mov	lr, r9
  407516:	e77f      	b.n	407418 <_vfiprintf_r+0x774>
  407518:	aa0f      	add	r2, sp, #60	; 0x3c
  40751a:	4659      	mov	r1, fp
  40751c:	4638      	mov	r0, r7
  40751e:	f7ff fb81 	bl	406c24 <__sprint_r.part.0>
  407522:	b960      	cbnz	r0, 40753e <_vfiprintf_r+0x89a>
  407524:	9910      	ldr	r1, [sp, #64]	; 0x40
  407526:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407528:	1c48      	adds	r0, r1, #1
  40752a:	46ca      	mov	sl, r9
  40752c:	e7bd      	b.n	4074aa <_vfiprintf_r+0x806>
  40752e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407530:	f8dd b010 	ldr.w	fp, [sp, #16]
  407534:	2b00      	cmp	r3, #0
  407536:	f040 81d4 	bne.w	4078e2 <_vfiprintf_r+0xc3e>
  40753a:	2300      	movs	r3, #0
  40753c:	9310      	str	r3, [sp, #64]	; 0x40
  40753e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407542:	f013 0f01 	tst.w	r3, #1
  407546:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40754a:	d102      	bne.n	407552 <_vfiprintf_r+0x8ae>
  40754c:	059a      	lsls	r2, r3, #22
  40754e:	f140 80de 	bpl.w	40770e <_vfiprintf_r+0xa6a>
  407552:	065b      	lsls	r3, r3, #25
  407554:	f53f acb2 	bmi.w	406ebc <_vfiprintf_r+0x218>
  407558:	9803      	ldr	r0, [sp, #12]
  40755a:	b02d      	add	sp, #180	; 0xb4
  40755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407560:	2a00      	cmp	r2, #0
  407562:	f040 8106 	bne.w	407772 <_vfiprintf_r+0xace>
  407566:	9a05      	ldr	r2, [sp, #20]
  407568:	921d      	str	r2, [sp, #116]	; 0x74
  40756a:	2301      	movs	r3, #1
  40756c:	9211      	str	r2, [sp, #68]	; 0x44
  40756e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  407572:	9310      	str	r3, [sp, #64]	; 0x40
  407574:	46ca      	mov	sl, r9
  407576:	f10a 0a08 	add.w	sl, sl, #8
  40757a:	9b02      	ldr	r3, [sp, #8]
  40757c:	0759      	lsls	r1, r3, #29
  40757e:	d504      	bpl.n	40758a <_vfiprintf_r+0x8e6>
  407580:	9b08      	ldr	r3, [sp, #32]
  407582:	9901      	ldr	r1, [sp, #4]
  407584:	1a5c      	subs	r4, r3, r1
  407586:	2c00      	cmp	r4, #0
  407588:	dc81      	bgt.n	40748e <_vfiprintf_r+0x7ea>
  40758a:	9b03      	ldr	r3, [sp, #12]
  40758c:	9908      	ldr	r1, [sp, #32]
  40758e:	9801      	ldr	r0, [sp, #4]
  407590:	4281      	cmp	r1, r0
  407592:	bfac      	ite	ge
  407594:	185b      	addge	r3, r3, r1
  407596:	181b      	addlt	r3, r3, r0
  407598:	9303      	str	r3, [sp, #12]
  40759a:	bb72      	cbnz	r2, 4075fa <_vfiprintf_r+0x956>
  40759c:	2300      	movs	r3, #0
  40759e:	9310      	str	r3, [sp, #64]	; 0x40
  4075a0:	46ca      	mov	sl, r9
  4075a2:	f7ff bbbc 	b.w	406d1e <_vfiprintf_r+0x7a>
  4075a6:	aa0f      	add	r2, sp, #60	; 0x3c
  4075a8:	9904      	ldr	r1, [sp, #16]
  4075aa:	4620      	mov	r0, r4
  4075ac:	f7ff fb3a 	bl	406c24 <__sprint_r.part.0>
  4075b0:	bb50      	cbnz	r0, 407608 <_vfiprintf_r+0x964>
  4075b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4075b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4075b6:	f101 0e01 	add.w	lr, r1, #1
  4075ba:	46cc      	mov	ip, r9
  4075bc:	e548      	b.n	407050 <_vfiprintf_r+0x3ac>
  4075be:	2a00      	cmp	r2, #0
  4075c0:	f040 8140 	bne.w	407844 <_vfiprintf_r+0xba0>
  4075c4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4075c8:	2900      	cmp	r1, #0
  4075ca:	f000 811b 	beq.w	407804 <_vfiprintf_r+0xb60>
  4075ce:	2201      	movs	r2, #1
  4075d0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4075d4:	4610      	mov	r0, r2
  4075d6:	921d      	str	r2, [sp, #116]	; 0x74
  4075d8:	911c      	str	r1, [sp, #112]	; 0x70
  4075da:	46ca      	mov	sl, r9
  4075dc:	4601      	mov	r1, r0
  4075de:	f10a 0a08 	add.w	sl, sl, #8
  4075e2:	3001      	adds	r0, #1
  4075e4:	e507      	b.n	406ff6 <_vfiprintf_r+0x352>
  4075e6:	9b02      	ldr	r3, [sp, #8]
  4075e8:	2a01      	cmp	r2, #1
  4075ea:	f000 8098 	beq.w	40771e <_vfiprintf_r+0xa7a>
  4075ee:	2a02      	cmp	r2, #2
  4075f0:	d10d      	bne.n	40760e <_vfiprintf_r+0x96a>
  4075f2:	9302      	str	r3, [sp, #8]
  4075f4:	2600      	movs	r6, #0
  4075f6:	2700      	movs	r7, #0
  4075f8:	e5b0      	b.n	40715c <_vfiprintf_r+0x4b8>
  4075fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4075fc:	9904      	ldr	r1, [sp, #16]
  4075fe:	9806      	ldr	r0, [sp, #24]
  407600:	f7ff fb10 	bl	406c24 <__sprint_r.part.0>
  407604:	2800      	cmp	r0, #0
  407606:	d0c9      	beq.n	40759c <_vfiprintf_r+0x8f8>
  407608:	f8dd b010 	ldr.w	fp, [sp, #16]
  40760c:	e797      	b.n	40753e <_vfiprintf_r+0x89a>
  40760e:	9302      	str	r3, [sp, #8]
  407610:	2600      	movs	r6, #0
  407612:	2700      	movs	r7, #0
  407614:	4649      	mov	r1, r9
  407616:	e000      	b.n	40761a <_vfiprintf_r+0x976>
  407618:	4659      	mov	r1, fp
  40761a:	08f2      	lsrs	r2, r6, #3
  40761c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  407620:	08f8      	lsrs	r0, r7, #3
  407622:	f006 0307 	and.w	r3, r6, #7
  407626:	4607      	mov	r7, r0
  407628:	4616      	mov	r6, r2
  40762a:	3330      	adds	r3, #48	; 0x30
  40762c:	ea56 0207 	orrs.w	r2, r6, r7
  407630:	f801 3c01 	strb.w	r3, [r1, #-1]
  407634:	f101 3bff 	add.w	fp, r1, #4294967295
  407638:	d1ee      	bne.n	407618 <_vfiprintf_r+0x974>
  40763a:	9a02      	ldr	r2, [sp, #8]
  40763c:	07d6      	lsls	r6, r2, #31
  40763e:	f57f ad9d 	bpl.w	40717c <_vfiprintf_r+0x4d8>
  407642:	2b30      	cmp	r3, #48	; 0x30
  407644:	f43f ad9a 	beq.w	40717c <_vfiprintf_r+0x4d8>
  407648:	3902      	subs	r1, #2
  40764a:	2330      	movs	r3, #48	; 0x30
  40764c:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407650:	eba9 0301 	sub.w	r3, r9, r1
  407654:	9305      	str	r3, [sp, #20]
  407656:	468b      	mov	fp, r1
  407658:	e476      	b.n	406f48 <_vfiprintf_r+0x2a4>
  40765a:	9b03      	ldr	r3, [sp, #12]
  40765c:	9a08      	ldr	r2, [sp, #32]
  40765e:	428a      	cmp	r2, r1
  407660:	bfac      	ite	ge
  407662:	189b      	addge	r3, r3, r2
  407664:	185b      	addlt	r3, r3, r1
  407666:	9303      	str	r3, [sp, #12]
  407668:	e798      	b.n	40759c <_vfiprintf_r+0x8f8>
  40766a:	2202      	movs	r2, #2
  40766c:	e44d      	b.n	406f0a <_vfiprintf_r+0x266>
  40766e:	2f00      	cmp	r7, #0
  407670:	bf08      	it	eq
  407672:	2e0a      	cmpeq	r6, #10
  407674:	d352      	bcc.n	40771c <_vfiprintf_r+0xa78>
  407676:	46cb      	mov	fp, r9
  407678:	4630      	mov	r0, r6
  40767a:	4639      	mov	r1, r7
  40767c:	220a      	movs	r2, #10
  40767e:	2300      	movs	r3, #0
  407680:	f001 ff44 	bl	40950c <__aeabi_uldivmod>
  407684:	3230      	adds	r2, #48	; 0x30
  407686:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40768a:	4630      	mov	r0, r6
  40768c:	4639      	mov	r1, r7
  40768e:	2300      	movs	r3, #0
  407690:	220a      	movs	r2, #10
  407692:	f001 ff3b 	bl	40950c <__aeabi_uldivmod>
  407696:	4606      	mov	r6, r0
  407698:	460f      	mov	r7, r1
  40769a:	ea56 0307 	orrs.w	r3, r6, r7
  40769e:	d1eb      	bne.n	407678 <_vfiprintf_r+0x9d4>
  4076a0:	e56c      	b.n	40717c <_vfiprintf_r+0x4d8>
  4076a2:	9405      	str	r4, [sp, #20]
  4076a4:	46cb      	mov	fp, r9
  4076a6:	e44f      	b.n	406f48 <_vfiprintf_r+0x2a4>
  4076a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4076aa:	9904      	ldr	r1, [sp, #16]
  4076ac:	9806      	ldr	r0, [sp, #24]
  4076ae:	f7ff fab9 	bl	406c24 <__sprint_r.part.0>
  4076b2:	2800      	cmp	r0, #0
  4076b4:	d1a8      	bne.n	407608 <_vfiprintf_r+0x964>
  4076b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4076b8:	46ca      	mov	sl, r9
  4076ba:	e75e      	b.n	40757a <_vfiprintf_r+0x8d6>
  4076bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4076be:	9904      	ldr	r1, [sp, #16]
  4076c0:	9806      	ldr	r0, [sp, #24]
  4076c2:	f7ff faaf 	bl	406c24 <__sprint_r.part.0>
  4076c6:	2800      	cmp	r0, #0
  4076c8:	d19e      	bne.n	407608 <_vfiprintf_r+0x964>
  4076ca:	46ca      	mov	sl, r9
  4076cc:	f7ff bbc0 	b.w	406e50 <_vfiprintf_r+0x1ac>
  4076d0:	0040a830 	.word	0x0040a830
  4076d4:	0040a820 	.word	0x0040a820
  4076d8:	3104      	adds	r1, #4
  4076da:	6816      	ldr	r6, [r2, #0]
  4076dc:	9107      	str	r1, [sp, #28]
  4076de:	2201      	movs	r2, #1
  4076e0:	2700      	movs	r7, #0
  4076e2:	e412      	b.n	406f0a <_vfiprintf_r+0x266>
  4076e4:	9807      	ldr	r0, [sp, #28]
  4076e6:	4601      	mov	r1, r0
  4076e8:	3104      	adds	r1, #4
  4076ea:	6806      	ldr	r6, [r0, #0]
  4076ec:	9107      	str	r1, [sp, #28]
  4076ee:	2700      	movs	r7, #0
  4076f0:	e40b      	b.n	406f0a <_vfiprintf_r+0x266>
  4076f2:	680e      	ldr	r6, [r1, #0]
  4076f4:	3104      	adds	r1, #4
  4076f6:	9107      	str	r1, [sp, #28]
  4076f8:	2700      	movs	r7, #0
  4076fa:	e591      	b.n	407220 <_vfiprintf_r+0x57c>
  4076fc:	9907      	ldr	r1, [sp, #28]
  4076fe:	680e      	ldr	r6, [r1, #0]
  407700:	460a      	mov	r2, r1
  407702:	17f7      	asrs	r7, r6, #31
  407704:	3204      	adds	r2, #4
  407706:	9207      	str	r2, [sp, #28]
  407708:	4630      	mov	r0, r6
  40770a:	4639      	mov	r1, r7
  40770c:	e50f      	b.n	40712e <_vfiprintf_r+0x48a>
  40770e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407712:	f000 fe7f 	bl	408414 <__retarget_lock_release_recursive>
  407716:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40771a:	e71a      	b.n	407552 <_vfiprintf_r+0x8ae>
  40771c:	9b02      	ldr	r3, [sp, #8]
  40771e:	9302      	str	r3, [sp, #8]
  407720:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407724:	3630      	adds	r6, #48	; 0x30
  407726:	2301      	movs	r3, #1
  407728:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40772c:	9305      	str	r3, [sp, #20]
  40772e:	e40b      	b.n	406f48 <_vfiprintf_r+0x2a4>
  407730:	aa0f      	add	r2, sp, #60	; 0x3c
  407732:	9904      	ldr	r1, [sp, #16]
  407734:	9806      	ldr	r0, [sp, #24]
  407736:	f7ff fa75 	bl	406c24 <__sprint_r.part.0>
  40773a:	2800      	cmp	r0, #0
  40773c:	f47f af64 	bne.w	407608 <_vfiprintf_r+0x964>
  407740:	9910      	ldr	r1, [sp, #64]	; 0x40
  407742:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407744:	1c48      	adds	r0, r1, #1
  407746:	46ca      	mov	sl, r9
  407748:	e651      	b.n	4073ee <_vfiprintf_r+0x74a>
  40774a:	aa0f      	add	r2, sp, #60	; 0x3c
  40774c:	9904      	ldr	r1, [sp, #16]
  40774e:	9806      	ldr	r0, [sp, #24]
  407750:	f7ff fa68 	bl	406c24 <__sprint_r.part.0>
  407754:	2800      	cmp	r0, #0
  407756:	f47f af57 	bne.w	407608 <_vfiprintf_r+0x964>
  40775a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40775c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40775e:	1c48      	adds	r0, r1, #1
  407760:	46ca      	mov	sl, r9
  407762:	e448      	b.n	406ff6 <_vfiprintf_r+0x352>
  407764:	2a00      	cmp	r2, #0
  407766:	f040 8091 	bne.w	40788c <_vfiprintf_r+0xbe8>
  40776a:	2001      	movs	r0, #1
  40776c:	4611      	mov	r1, r2
  40776e:	46ca      	mov	sl, r9
  407770:	e641      	b.n	4073f6 <_vfiprintf_r+0x752>
  407772:	aa0f      	add	r2, sp, #60	; 0x3c
  407774:	9904      	ldr	r1, [sp, #16]
  407776:	9806      	ldr	r0, [sp, #24]
  407778:	f7ff fa54 	bl	406c24 <__sprint_r.part.0>
  40777c:	2800      	cmp	r0, #0
  40777e:	f47f af43 	bne.w	407608 <_vfiprintf_r+0x964>
  407782:	9810      	ldr	r0, [sp, #64]	; 0x40
  407784:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407786:	3001      	adds	r0, #1
  407788:	46ca      	mov	sl, r9
  40778a:	e667      	b.n	40745c <_vfiprintf_r+0x7b8>
  40778c:	46d3      	mov	fp, sl
  40778e:	e6d6      	b.n	40753e <_vfiprintf_r+0x89a>
  407790:	9e07      	ldr	r6, [sp, #28]
  407792:	3607      	adds	r6, #7
  407794:	f026 0207 	bic.w	r2, r6, #7
  407798:	f102 0108 	add.w	r1, r2, #8
  40779c:	e9d2 6700 	ldrd	r6, r7, [r2]
  4077a0:	9107      	str	r1, [sp, #28]
  4077a2:	2201      	movs	r2, #1
  4077a4:	f7ff bbb1 	b.w	406f0a <_vfiprintf_r+0x266>
  4077a8:	9e07      	ldr	r6, [sp, #28]
  4077aa:	3607      	adds	r6, #7
  4077ac:	f026 0607 	bic.w	r6, r6, #7
  4077b0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4077b4:	f106 0208 	add.w	r2, r6, #8
  4077b8:	9207      	str	r2, [sp, #28]
  4077ba:	4606      	mov	r6, r0
  4077bc:	460f      	mov	r7, r1
  4077be:	e4b6      	b.n	40712e <_vfiprintf_r+0x48a>
  4077c0:	9e07      	ldr	r6, [sp, #28]
  4077c2:	3607      	adds	r6, #7
  4077c4:	f026 0207 	bic.w	r2, r6, #7
  4077c8:	f102 0108 	add.w	r1, r2, #8
  4077cc:	e9d2 6700 	ldrd	r6, r7, [r2]
  4077d0:	9107      	str	r1, [sp, #28]
  4077d2:	2200      	movs	r2, #0
  4077d4:	f7ff bb99 	b.w	406f0a <_vfiprintf_r+0x266>
  4077d8:	9e07      	ldr	r6, [sp, #28]
  4077da:	3607      	adds	r6, #7
  4077dc:	f026 0107 	bic.w	r1, r6, #7
  4077e0:	f101 0008 	add.w	r0, r1, #8
  4077e4:	9007      	str	r0, [sp, #28]
  4077e6:	e9d1 6700 	ldrd	r6, r7, [r1]
  4077ea:	e519      	b.n	407220 <_vfiprintf_r+0x57c>
  4077ec:	46cb      	mov	fp, r9
  4077ee:	f7ff bbab 	b.w	406f48 <_vfiprintf_r+0x2a4>
  4077f2:	252d      	movs	r5, #45	; 0x2d
  4077f4:	4276      	negs	r6, r6
  4077f6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4077fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4077fe:	2201      	movs	r2, #1
  407800:	f7ff bb88 	b.w	406f14 <_vfiprintf_r+0x270>
  407804:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407806:	b9b3      	cbnz	r3, 407836 <_vfiprintf_r+0xb92>
  407808:	4611      	mov	r1, r2
  40780a:	2001      	movs	r0, #1
  40780c:	46ca      	mov	sl, r9
  40780e:	e5f2      	b.n	4073f6 <_vfiprintf_r+0x752>
  407810:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407814:	f000 fdfe 	bl	408414 <__retarget_lock_release_recursive>
  407818:	f04f 33ff 	mov.w	r3, #4294967295
  40781c:	9303      	str	r3, [sp, #12]
  40781e:	f7ff bb50 	b.w	406ec2 <_vfiprintf_r+0x21e>
  407822:	aa0f      	add	r2, sp, #60	; 0x3c
  407824:	9904      	ldr	r1, [sp, #16]
  407826:	9806      	ldr	r0, [sp, #24]
  407828:	f7ff f9fc 	bl	406c24 <__sprint_r.part.0>
  40782c:	2800      	cmp	r0, #0
  40782e:	f47f aeeb 	bne.w	407608 <_vfiprintf_r+0x964>
  407832:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407834:	e6a9      	b.n	40758a <_vfiprintf_r+0x8e6>
  407836:	ab0e      	add	r3, sp, #56	; 0x38
  407838:	2202      	movs	r2, #2
  40783a:	931c      	str	r3, [sp, #112]	; 0x70
  40783c:	921d      	str	r2, [sp, #116]	; 0x74
  40783e:	2001      	movs	r0, #1
  407840:	46ca      	mov	sl, r9
  407842:	e5d0      	b.n	4073e6 <_vfiprintf_r+0x742>
  407844:	aa0f      	add	r2, sp, #60	; 0x3c
  407846:	9904      	ldr	r1, [sp, #16]
  407848:	9806      	ldr	r0, [sp, #24]
  40784a:	f7ff f9eb 	bl	406c24 <__sprint_r.part.0>
  40784e:	2800      	cmp	r0, #0
  407850:	f47f aeda 	bne.w	407608 <_vfiprintf_r+0x964>
  407854:	9910      	ldr	r1, [sp, #64]	; 0x40
  407856:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407858:	1c48      	adds	r0, r1, #1
  40785a:	46ca      	mov	sl, r9
  40785c:	e5a4      	b.n	4073a8 <_vfiprintf_r+0x704>
  40785e:	9a07      	ldr	r2, [sp, #28]
  407860:	9903      	ldr	r1, [sp, #12]
  407862:	6813      	ldr	r3, [r2, #0]
  407864:	17cd      	asrs	r5, r1, #31
  407866:	4608      	mov	r0, r1
  407868:	3204      	adds	r2, #4
  40786a:	4629      	mov	r1, r5
  40786c:	9207      	str	r2, [sp, #28]
  40786e:	e9c3 0100 	strd	r0, r1, [r3]
  407872:	f7ff ba54 	b.w	406d1e <_vfiprintf_r+0x7a>
  407876:	4658      	mov	r0, fp
  407878:	9607      	str	r6, [sp, #28]
  40787a:	9302      	str	r3, [sp, #8]
  40787c:	f7fe ff00 	bl	406680 <strlen>
  407880:	2400      	movs	r4, #0
  407882:	9005      	str	r0, [sp, #20]
  407884:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407888:	f7ff bb5e 	b.w	406f48 <_vfiprintf_r+0x2a4>
  40788c:	aa0f      	add	r2, sp, #60	; 0x3c
  40788e:	9904      	ldr	r1, [sp, #16]
  407890:	9806      	ldr	r0, [sp, #24]
  407892:	f7ff f9c7 	bl	406c24 <__sprint_r.part.0>
  407896:	2800      	cmp	r0, #0
  407898:	f47f aeb6 	bne.w	407608 <_vfiprintf_r+0x964>
  40789c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40789e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4078a0:	1c48      	adds	r0, r1, #1
  4078a2:	46ca      	mov	sl, r9
  4078a4:	e5a7      	b.n	4073f6 <_vfiprintf_r+0x752>
  4078a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4078a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4078aa:	4e20      	ldr	r6, [pc, #128]	; (40792c <_vfiprintf_r+0xc88>)
  4078ac:	3101      	adds	r1, #1
  4078ae:	f7ff bb90 	b.w	406fd2 <_vfiprintf_r+0x32e>
  4078b2:	2c06      	cmp	r4, #6
  4078b4:	bf28      	it	cs
  4078b6:	2406      	movcs	r4, #6
  4078b8:	9405      	str	r4, [sp, #20]
  4078ba:	9607      	str	r6, [sp, #28]
  4078bc:	9401      	str	r4, [sp, #4]
  4078be:	f8df b070 	ldr.w	fp, [pc, #112]	; 407930 <_vfiprintf_r+0xc8c>
  4078c2:	e4d5      	b.n	407270 <_vfiprintf_r+0x5cc>
  4078c4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4078c6:	4e19      	ldr	r6, [pc, #100]	; (40792c <_vfiprintf_r+0xc88>)
  4078c8:	3001      	adds	r0, #1
  4078ca:	e603      	b.n	4074d4 <_vfiprintf_r+0x830>
  4078cc:	9405      	str	r4, [sp, #20]
  4078ce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4078d2:	9607      	str	r6, [sp, #28]
  4078d4:	9302      	str	r3, [sp, #8]
  4078d6:	4604      	mov	r4, r0
  4078d8:	f7ff bb36 	b.w	406f48 <_vfiprintf_r+0x2a4>
  4078dc:	4686      	mov	lr, r0
  4078de:	f7ff bbce 	b.w	40707e <_vfiprintf_r+0x3da>
  4078e2:	9806      	ldr	r0, [sp, #24]
  4078e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4078e6:	4659      	mov	r1, fp
  4078e8:	f7ff f99c 	bl	406c24 <__sprint_r.part.0>
  4078ec:	2800      	cmp	r0, #0
  4078ee:	f43f ae24 	beq.w	40753a <_vfiprintf_r+0x896>
  4078f2:	e624      	b.n	40753e <_vfiprintf_r+0x89a>
  4078f4:	9907      	ldr	r1, [sp, #28]
  4078f6:	f898 2001 	ldrb.w	r2, [r8, #1]
  4078fa:	680c      	ldr	r4, [r1, #0]
  4078fc:	3104      	adds	r1, #4
  4078fe:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  407902:	46b8      	mov	r8, r7
  407904:	9107      	str	r1, [sp, #28]
  407906:	f7ff ba3f 	b.w	406d88 <_vfiprintf_r+0xe4>
  40790a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40790e:	e43c      	b.n	40718a <_vfiprintf_r+0x4e6>
  407910:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407914:	e521      	b.n	40735a <_vfiprintf_r+0x6b6>
  407916:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40791a:	f7ff bbf4 	b.w	407106 <_vfiprintf_r+0x462>
  40791e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407922:	e491      	b.n	407248 <_vfiprintf_r+0x5a4>
  407924:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407928:	e469      	b.n	4071fe <_vfiprintf_r+0x55a>
  40792a:	bf00      	nop
  40792c:	0040a820 	.word	0x0040a820
  407930:	0040a818 	.word	0x0040a818

00407934 <__sbprintf>:
  407934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407938:	460c      	mov	r4, r1
  40793a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40793e:	8989      	ldrh	r1, [r1, #12]
  407940:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407942:	89e5      	ldrh	r5, [r4, #14]
  407944:	9619      	str	r6, [sp, #100]	; 0x64
  407946:	f021 0102 	bic.w	r1, r1, #2
  40794a:	4606      	mov	r6, r0
  40794c:	69e0      	ldr	r0, [r4, #28]
  40794e:	f8ad 100c 	strh.w	r1, [sp, #12]
  407952:	4617      	mov	r7, r2
  407954:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407958:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40795a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40795e:	4698      	mov	r8, r3
  407960:	ad1a      	add	r5, sp, #104	; 0x68
  407962:	2300      	movs	r3, #0
  407964:	9007      	str	r0, [sp, #28]
  407966:	a816      	add	r0, sp, #88	; 0x58
  407968:	9209      	str	r2, [sp, #36]	; 0x24
  40796a:	9306      	str	r3, [sp, #24]
  40796c:	9500      	str	r5, [sp, #0]
  40796e:	9504      	str	r5, [sp, #16]
  407970:	9102      	str	r1, [sp, #8]
  407972:	9105      	str	r1, [sp, #20]
  407974:	f000 fd48 	bl	408408 <__retarget_lock_init_recursive>
  407978:	4643      	mov	r3, r8
  40797a:	463a      	mov	r2, r7
  40797c:	4669      	mov	r1, sp
  40797e:	4630      	mov	r0, r6
  407980:	f7ff f990 	bl	406ca4 <_vfiprintf_r>
  407984:	1e05      	subs	r5, r0, #0
  407986:	db07      	blt.n	407998 <__sbprintf+0x64>
  407988:	4630      	mov	r0, r6
  40798a:	4669      	mov	r1, sp
  40798c:	f000 f928 	bl	407be0 <_fflush_r>
  407990:	2800      	cmp	r0, #0
  407992:	bf18      	it	ne
  407994:	f04f 35ff 	movne.w	r5, #4294967295
  407998:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40799c:	065b      	lsls	r3, r3, #25
  40799e:	d503      	bpl.n	4079a8 <__sbprintf+0x74>
  4079a0:	89a3      	ldrh	r3, [r4, #12]
  4079a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4079a6:	81a3      	strh	r3, [r4, #12]
  4079a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4079aa:	f000 fd2f 	bl	40840c <__retarget_lock_close_recursive>
  4079ae:	4628      	mov	r0, r5
  4079b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4079b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004079b8 <__swsetup_r>:
  4079b8:	b538      	push	{r3, r4, r5, lr}
  4079ba:	4b30      	ldr	r3, [pc, #192]	; (407a7c <__swsetup_r+0xc4>)
  4079bc:	681b      	ldr	r3, [r3, #0]
  4079be:	4605      	mov	r5, r0
  4079c0:	460c      	mov	r4, r1
  4079c2:	b113      	cbz	r3, 4079ca <__swsetup_r+0x12>
  4079c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4079c6:	2a00      	cmp	r2, #0
  4079c8:	d038      	beq.n	407a3c <__swsetup_r+0x84>
  4079ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4079ce:	b293      	uxth	r3, r2
  4079d0:	0718      	lsls	r0, r3, #28
  4079d2:	d50c      	bpl.n	4079ee <__swsetup_r+0x36>
  4079d4:	6920      	ldr	r0, [r4, #16]
  4079d6:	b1a8      	cbz	r0, 407a04 <__swsetup_r+0x4c>
  4079d8:	f013 0201 	ands.w	r2, r3, #1
  4079dc:	d01e      	beq.n	407a1c <__swsetup_r+0x64>
  4079de:	6963      	ldr	r3, [r4, #20]
  4079e0:	2200      	movs	r2, #0
  4079e2:	425b      	negs	r3, r3
  4079e4:	61a3      	str	r3, [r4, #24]
  4079e6:	60a2      	str	r2, [r4, #8]
  4079e8:	b1f0      	cbz	r0, 407a28 <__swsetup_r+0x70>
  4079ea:	2000      	movs	r0, #0
  4079ec:	bd38      	pop	{r3, r4, r5, pc}
  4079ee:	06d9      	lsls	r1, r3, #27
  4079f0:	d53c      	bpl.n	407a6c <__swsetup_r+0xb4>
  4079f2:	0758      	lsls	r0, r3, #29
  4079f4:	d426      	bmi.n	407a44 <__swsetup_r+0x8c>
  4079f6:	6920      	ldr	r0, [r4, #16]
  4079f8:	f042 0308 	orr.w	r3, r2, #8
  4079fc:	81a3      	strh	r3, [r4, #12]
  4079fe:	b29b      	uxth	r3, r3
  407a00:	2800      	cmp	r0, #0
  407a02:	d1e9      	bne.n	4079d8 <__swsetup_r+0x20>
  407a04:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407a08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407a0c:	d0e4      	beq.n	4079d8 <__swsetup_r+0x20>
  407a0e:	4628      	mov	r0, r5
  407a10:	4621      	mov	r1, r4
  407a12:	f000 fd2f 	bl	408474 <__smakebuf_r>
  407a16:	89a3      	ldrh	r3, [r4, #12]
  407a18:	6920      	ldr	r0, [r4, #16]
  407a1a:	e7dd      	b.n	4079d8 <__swsetup_r+0x20>
  407a1c:	0799      	lsls	r1, r3, #30
  407a1e:	bf58      	it	pl
  407a20:	6962      	ldrpl	r2, [r4, #20]
  407a22:	60a2      	str	r2, [r4, #8]
  407a24:	2800      	cmp	r0, #0
  407a26:	d1e0      	bne.n	4079ea <__swsetup_r+0x32>
  407a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a2c:	061a      	lsls	r2, r3, #24
  407a2e:	d5dd      	bpl.n	4079ec <__swsetup_r+0x34>
  407a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a34:	81a3      	strh	r3, [r4, #12]
  407a36:	f04f 30ff 	mov.w	r0, #4294967295
  407a3a:	bd38      	pop	{r3, r4, r5, pc}
  407a3c:	4618      	mov	r0, r3
  407a3e:	f000 f927 	bl	407c90 <__sinit>
  407a42:	e7c2      	b.n	4079ca <__swsetup_r+0x12>
  407a44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407a46:	b151      	cbz	r1, 407a5e <__swsetup_r+0xa6>
  407a48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407a4c:	4299      	cmp	r1, r3
  407a4e:	d004      	beq.n	407a5a <__swsetup_r+0xa2>
  407a50:	4628      	mov	r0, r5
  407a52:	f000 fa43 	bl	407edc <_free_r>
  407a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407a5a:	2300      	movs	r3, #0
  407a5c:	6323      	str	r3, [r4, #48]	; 0x30
  407a5e:	2300      	movs	r3, #0
  407a60:	6920      	ldr	r0, [r4, #16]
  407a62:	6063      	str	r3, [r4, #4]
  407a64:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407a68:	6020      	str	r0, [r4, #0]
  407a6a:	e7c5      	b.n	4079f8 <__swsetup_r+0x40>
  407a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407a70:	2309      	movs	r3, #9
  407a72:	602b      	str	r3, [r5, #0]
  407a74:	f04f 30ff 	mov.w	r0, #4294967295
  407a78:	81a2      	strh	r2, [r4, #12]
  407a7a:	bd38      	pop	{r3, r4, r5, pc}
  407a7c:	20400024 	.word	0x20400024

00407a80 <register_fini>:
  407a80:	4b02      	ldr	r3, [pc, #8]	; (407a8c <register_fini+0xc>)
  407a82:	b113      	cbz	r3, 407a8a <register_fini+0xa>
  407a84:	4802      	ldr	r0, [pc, #8]	; (407a90 <register_fini+0x10>)
  407a86:	f000 b805 	b.w	407a94 <atexit>
  407a8a:	4770      	bx	lr
  407a8c:	00000000 	.word	0x00000000
  407a90:	00407d01 	.word	0x00407d01

00407a94 <atexit>:
  407a94:	2300      	movs	r3, #0
  407a96:	4601      	mov	r1, r0
  407a98:	461a      	mov	r2, r3
  407a9a:	4618      	mov	r0, r3
  407a9c:	f001 bc0e 	b.w	4092bc <__register_exitproc>

00407aa0 <__sflush_r>:
  407aa0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407aa4:	b29a      	uxth	r2, r3
  407aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407aaa:	460d      	mov	r5, r1
  407aac:	0711      	lsls	r1, r2, #28
  407aae:	4680      	mov	r8, r0
  407ab0:	d43a      	bmi.n	407b28 <__sflush_r+0x88>
  407ab2:	686a      	ldr	r2, [r5, #4]
  407ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407ab8:	2a00      	cmp	r2, #0
  407aba:	81ab      	strh	r3, [r5, #12]
  407abc:	dd6f      	ble.n	407b9e <__sflush_r+0xfe>
  407abe:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407ac0:	2c00      	cmp	r4, #0
  407ac2:	d049      	beq.n	407b58 <__sflush_r+0xb8>
  407ac4:	2200      	movs	r2, #0
  407ac6:	b29b      	uxth	r3, r3
  407ac8:	f8d8 6000 	ldr.w	r6, [r8]
  407acc:	f8c8 2000 	str.w	r2, [r8]
  407ad0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407ad4:	d067      	beq.n	407ba6 <__sflush_r+0x106>
  407ad6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407ad8:	075f      	lsls	r7, r3, #29
  407ada:	d505      	bpl.n	407ae8 <__sflush_r+0x48>
  407adc:	6869      	ldr	r1, [r5, #4]
  407ade:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407ae0:	1a52      	subs	r2, r2, r1
  407ae2:	b10b      	cbz	r3, 407ae8 <__sflush_r+0x48>
  407ae4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407ae6:	1ad2      	subs	r2, r2, r3
  407ae8:	2300      	movs	r3, #0
  407aea:	69e9      	ldr	r1, [r5, #28]
  407aec:	4640      	mov	r0, r8
  407aee:	47a0      	blx	r4
  407af0:	1c44      	adds	r4, r0, #1
  407af2:	d03c      	beq.n	407b6e <__sflush_r+0xce>
  407af4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407af8:	692a      	ldr	r2, [r5, #16]
  407afa:	602a      	str	r2, [r5, #0]
  407afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407b00:	2200      	movs	r2, #0
  407b02:	81ab      	strh	r3, [r5, #12]
  407b04:	04db      	lsls	r3, r3, #19
  407b06:	606a      	str	r2, [r5, #4]
  407b08:	d447      	bmi.n	407b9a <__sflush_r+0xfa>
  407b0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407b0c:	f8c8 6000 	str.w	r6, [r8]
  407b10:	b311      	cbz	r1, 407b58 <__sflush_r+0xb8>
  407b12:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407b16:	4299      	cmp	r1, r3
  407b18:	d002      	beq.n	407b20 <__sflush_r+0x80>
  407b1a:	4640      	mov	r0, r8
  407b1c:	f000 f9de 	bl	407edc <_free_r>
  407b20:	2000      	movs	r0, #0
  407b22:	6328      	str	r0, [r5, #48]	; 0x30
  407b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b28:	692e      	ldr	r6, [r5, #16]
  407b2a:	b1ae      	cbz	r6, 407b58 <__sflush_r+0xb8>
  407b2c:	682c      	ldr	r4, [r5, #0]
  407b2e:	602e      	str	r6, [r5, #0]
  407b30:	0791      	lsls	r1, r2, #30
  407b32:	bf0c      	ite	eq
  407b34:	696b      	ldreq	r3, [r5, #20]
  407b36:	2300      	movne	r3, #0
  407b38:	1ba4      	subs	r4, r4, r6
  407b3a:	60ab      	str	r3, [r5, #8]
  407b3c:	e00a      	b.n	407b54 <__sflush_r+0xb4>
  407b3e:	4623      	mov	r3, r4
  407b40:	4632      	mov	r2, r6
  407b42:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407b44:	69e9      	ldr	r1, [r5, #28]
  407b46:	4640      	mov	r0, r8
  407b48:	47b8      	blx	r7
  407b4a:	2800      	cmp	r0, #0
  407b4c:	eba4 0400 	sub.w	r4, r4, r0
  407b50:	4406      	add	r6, r0
  407b52:	dd04      	ble.n	407b5e <__sflush_r+0xbe>
  407b54:	2c00      	cmp	r4, #0
  407b56:	dcf2      	bgt.n	407b3e <__sflush_r+0x9e>
  407b58:	2000      	movs	r0, #0
  407b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b5e:	89ab      	ldrh	r3, [r5, #12]
  407b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407b64:	81ab      	strh	r3, [r5, #12]
  407b66:	f04f 30ff 	mov.w	r0, #4294967295
  407b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b6e:	f8d8 4000 	ldr.w	r4, [r8]
  407b72:	2c1d      	cmp	r4, #29
  407b74:	d8f3      	bhi.n	407b5e <__sflush_r+0xbe>
  407b76:	4b19      	ldr	r3, [pc, #100]	; (407bdc <__sflush_r+0x13c>)
  407b78:	40e3      	lsrs	r3, r4
  407b7a:	43db      	mvns	r3, r3
  407b7c:	f013 0301 	ands.w	r3, r3, #1
  407b80:	d1ed      	bne.n	407b5e <__sflush_r+0xbe>
  407b82:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407b86:	606b      	str	r3, [r5, #4]
  407b88:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407b8c:	6929      	ldr	r1, [r5, #16]
  407b8e:	81ab      	strh	r3, [r5, #12]
  407b90:	04da      	lsls	r2, r3, #19
  407b92:	6029      	str	r1, [r5, #0]
  407b94:	d5b9      	bpl.n	407b0a <__sflush_r+0x6a>
  407b96:	2c00      	cmp	r4, #0
  407b98:	d1b7      	bne.n	407b0a <__sflush_r+0x6a>
  407b9a:	6528      	str	r0, [r5, #80]	; 0x50
  407b9c:	e7b5      	b.n	407b0a <__sflush_r+0x6a>
  407b9e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407ba0:	2a00      	cmp	r2, #0
  407ba2:	dc8c      	bgt.n	407abe <__sflush_r+0x1e>
  407ba4:	e7d8      	b.n	407b58 <__sflush_r+0xb8>
  407ba6:	2301      	movs	r3, #1
  407ba8:	69e9      	ldr	r1, [r5, #28]
  407baa:	4640      	mov	r0, r8
  407bac:	47a0      	blx	r4
  407bae:	1c43      	adds	r3, r0, #1
  407bb0:	4602      	mov	r2, r0
  407bb2:	d002      	beq.n	407bba <__sflush_r+0x11a>
  407bb4:	89ab      	ldrh	r3, [r5, #12]
  407bb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407bb8:	e78e      	b.n	407ad8 <__sflush_r+0x38>
  407bba:	f8d8 3000 	ldr.w	r3, [r8]
  407bbe:	2b00      	cmp	r3, #0
  407bc0:	d0f8      	beq.n	407bb4 <__sflush_r+0x114>
  407bc2:	2b1d      	cmp	r3, #29
  407bc4:	d001      	beq.n	407bca <__sflush_r+0x12a>
  407bc6:	2b16      	cmp	r3, #22
  407bc8:	d102      	bne.n	407bd0 <__sflush_r+0x130>
  407bca:	f8c8 6000 	str.w	r6, [r8]
  407bce:	e7c3      	b.n	407b58 <__sflush_r+0xb8>
  407bd0:	89ab      	ldrh	r3, [r5, #12]
  407bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407bd6:	81ab      	strh	r3, [r5, #12]
  407bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bdc:	20400001 	.word	0x20400001

00407be0 <_fflush_r>:
  407be0:	b538      	push	{r3, r4, r5, lr}
  407be2:	460d      	mov	r5, r1
  407be4:	4604      	mov	r4, r0
  407be6:	b108      	cbz	r0, 407bec <_fflush_r+0xc>
  407be8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407bea:	b1bb      	cbz	r3, 407c1c <_fflush_r+0x3c>
  407bec:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407bf0:	b188      	cbz	r0, 407c16 <_fflush_r+0x36>
  407bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407bf4:	07db      	lsls	r3, r3, #31
  407bf6:	d401      	bmi.n	407bfc <_fflush_r+0x1c>
  407bf8:	0581      	lsls	r1, r0, #22
  407bfa:	d517      	bpl.n	407c2c <_fflush_r+0x4c>
  407bfc:	4620      	mov	r0, r4
  407bfe:	4629      	mov	r1, r5
  407c00:	f7ff ff4e 	bl	407aa0 <__sflush_r>
  407c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407c06:	07da      	lsls	r2, r3, #31
  407c08:	4604      	mov	r4, r0
  407c0a:	d402      	bmi.n	407c12 <_fflush_r+0x32>
  407c0c:	89ab      	ldrh	r3, [r5, #12]
  407c0e:	059b      	lsls	r3, r3, #22
  407c10:	d507      	bpl.n	407c22 <_fflush_r+0x42>
  407c12:	4620      	mov	r0, r4
  407c14:	bd38      	pop	{r3, r4, r5, pc}
  407c16:	4604      	mov	r4, r0
  407c18:	4620      	mov	r0, r4
  407c1a:	bd38      	pop	{r3, r4, r5, pc}
  407c1c:	f000 f838 	bl	407c90 <__sinit>
  407c20:	e7e4      	b.n	407bec <_fflush_r+0xc>
  407c22:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407c24:	f000 fbf6 	bl	408414 <__retarget_lock_release_recursive>
  407c28:	4620      	mov	r0, r4
  407c2a:	bd38      	pop	{r3, r4, r5, pc}
  407c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407c2e:	f000 fbef 	bl	408410 <__retarget_lock_acquire_recursive>
  407c32:	e7e3      	b.n	407bfc <_fflush_r+0x1c>

00407c34 <_cleanup_r>:
  407c34:	4901      	ldr	r1, [pc, #4]	; (407c3c <_cleanup_r+0x8>)
  407c36:	f000 bbaf 	b.w	408398 <_fwalk_reent>
  407c3a:	bf00      	nop
  407c3c:	004093a5 	.word	0x004093a5

00407c40 <std.isra.0>:
  407c40:	b510      	push	{r4, lr}
  407c42:	2300      	movs	r3, #0
  407c44:	4604      	mov	r4, r0
  407c46:	8181      	strh	r1, [r0, #12]
  407c48:	81c2      	strh	r2, [r0, #14]
  407c4a:	6003      	str	r3, [r0, #0]
  407c4c:	6043      	str	r3, [r0, #4]
  407c4e:	6083      	str	r3, [r0, #8]
  407c50:	6643      	str	r3, [r0, #100]	; 0x64
  407c52:	6103      	str	r3, [r0, #16]
  407c54:	6143      	str	r3, [r0, #20]
  407c56:	6183      	str	r3, [r0, #24]
  407c58:	4619      	mov	r1, r3
  407c5a:	2208      	movs	r2, #8
  407c5c:	305c      	adds	r0, #92	; 0x5c
  407c5e:	f7fe fb95 	bl	40638c <memset>
  407c62:	4807      	ldr	r0, [pc, #28]	; (407c80 <std.isra.0+0x40>)
  407c64:	4907      	ldr	r1, [pc, #28]	; (407c84 <std.isra.0+0x44>)
  407c66:	4a08      	ldr	r2, [pc, #32]	; (407c88 <std.isra.0+0x48>)
  407c68:	4b08      	ldr	r3, [pc, #32]	; (407c8c <std.isra.0+0x4c>)
  407c6a:	6220      	str	r0, [r4, #32]
  407c6c:	61e4      	str	r4, [r4, #28]
  407c6e:	6261      	str	r1, [r4, #36]	; 0x24
  407c70:	62a2      	str	r2, [r4, #40]	; 0x28
  407c72:	62e3      	str	r3, [r4, #44]	; 0x2c
  407c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407c7c:	f000 bbc4 	b.w	408408 <__retarget_lock_init_recursive>
  407c80:	00409001 	.word	0x00409001
  407c84:	00409025 	.word	0x00409025
  407c88:	00409061 	.word	0x00409061
  407c8c:	00409081 	.word	0x00409081

00407c90 <__sinit>:
  407c90:	b510      	push	{r4, lr}
  407c92:	4604      	mov	r4, r0
  407c94:	4812      	ldr	r0, [pc, #72]	; (407ce0 <__sinit+0x50>)
  407c96:	f000 fbbb 	bl	408410 <__retarget_lock_acquire_recursive>
  407c9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407c9c:	b9d2      	cbnz	r2, 407cd4 <__sinit+0x44>
  407c9e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407ca2:	4810      	ldr	r0, [pc, #64]	; (407ce4 <__sinit+0x54>)
  407ca4:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407ca8:	2103      	movs	r1, #3
  407caa:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407cae:	63e0      	str	r0, [r4, #60]	; 0x3c
  407cb0:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407cb4:	6860      	ldr	r0, [r4, #4]
  407cb6:	2104      	movs	r1, #4
  407cb8:	f7ff ffc2 	bl	407c40 <std.isra.0>
  407cbc:	2201      	movs	r2, #1
  407cbe:	2109      	movs	r1, #9
  407cc0:	68a0      	ldr	r0, [r4, #8]
  407cc2:	f7ff ffbd 	bl	407c40 <std.isra.0>
  407cc6:	2202      	movs	r2, #2
  407cc8:	2112      	movs	r1, #18
  407cca:	68e0      	ldr	r0, [r4, #12]
  407ccc:	f7ff ffb8 	bl	407c40 <std.isra.0>
  407cd0:	2301      	movs	r3, #1
  407cd2:	63a3      	str	r3, [r4, #56]	; 0x38
  407cd4:	4802      	ldr	r0, [pc, #8]	; (407ce0 <__sinit+0x50>)
  407cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407cda:	f000 bb9b 	b.w	408414 <__retarget_lock_release_recursive>
  407cde:	bf00      	nop
  407ce0:	2040d038 	.word	0x2040d038
  407ce4:	00407c35 	.word	0x00407c35

00407ce8 <__sfp_lock_acquire>:
  407ce8:	4801      	ldr	r0, [pc, #4]	; (407cf0 <__sfp_lock_acquire+0x8>)
  407cea:	f000 bb91 	b.w	408410 <__retarget_lock_acquire_recursive>
  407cee:	bf00      	nop
  407cf0:	2040d04c 	.word	0x2040d04c

00407cf4 <__sfp_lock_release>:
  407cf4:	4801      	ldr	r0, [pc, #4]	; (407cfc <__sfp_lock_release+0x8>)
  407cf6:	f000 bb8d 	b.w	408414 <__retarget_lock_release_recursive>
  407cfa:	bf00      	nop
  407cfc:	2040d04c 	.word	0x2040d04c

00407d00 <__libc_fini_array>:
  407d00:	b538      	push	{r3, r4, r5, lr}
  407d02:	4c0a      	ldr	r4, [pc, #40]	; (407d2c <__libc_fini_array+0x2c>)
  407d04:	4d0a      	ldr	r5, [pc, #40]	; (407d30 <__libc_fini_array+0x30>)
  407d06:	1b64      	subs	r4, r4, r5
  407d08:	10a4      	asrs	r4, r4, #2
  407d0a:	d00a      	beq.n	407d22 <__libc_fini_array+0x22>
  407d0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407d10:	3b01      	subs	r3, #1
  407d12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407d16:	3c01      	subs	r4, #1
  407d18:	f855 3904 	ldr.w	r3, [r5], #-4
  407d1c:	4798      	blx	r3
  407d1e:	2c00      	cmp	r4, #0
  407d20:	d1f9      	bne.n	407d16 <__libc_fini_array+0x16>
  407d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407d26:	f002 be1f 	b.w	40a968 <_fini>
  407d2a:	bf00      	nop
  407d2c:	0040a978 	.word	0x0040a978
  407d30:	0040a974 	.word	0x0040a974

00407d34 <__fputwc>:
  407d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407d38:	b082      	sub	sp, #8
  407d3a:	4680      	mov	r8, r0
  407d3c:	4689      	mov	r9, r1
  407d3e:	4614      	mov	r4, r2
  407d40:	f000 fb54 	bl	4083ec <__locale_mb_cur_max>
  407d44:	2801      	cmp	r0, #1
  407d46:	d036      	beq.n	407db6 <__fputwc+0x82>
  407d48:	464a      	mov	r2, r9
  407d4a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407d4e:	a901      	add	r1, sp, #4
  407d50:	4640      	mov	r0, r8
  407d52:	f001 fa65 	bl	409220 <_wcrtomb_r>
  407d56:	1c42      	adds	r2, r0, #1
  407d58:	4606      	mov	r6, r0
  407d5a:	d025      	beq.n	407da8 <__fputwc+0x74>
  407d5c:	b3a8      	cbz	r0, 407dca <__fputwc+0x96>
  407d5e:	f89d e004 	ldrb.w	lr, [sp, #4]
  407d62:	2500      	movs	r5, #0
  407d64:	f10d 0a04 	add.w	sl, sp, #4
  407d68:	e009      	b.n	407d7e <__fputwc+0x4a>
  407d6a:	6823      	ldr	r3, [r4, #0]
  407d6c:	1c5a      	adds	r2, r3, #1
  407d6e:	6022      	str	r2, [r4, #0]
  407d70:	f883 e000 	strb.w	lr, [r3]
  407d74:	3501      	adds	r5, #1
  407d76:	42b5      	cmp	r5, r6
  407d78:	d227      	bcs.n	407dca <__fputwc+0x96>
  407d7a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407d7e:	68a3      	ldr	r3, [r4, #8]
  407d80:	3b01      	subs	r3, #1
  407d82:	2b00      	cmp	r3, #0
  407d84:	60a3      	str	r3, [r4, #8]
  407d86:	daf0      	bge.n	407d6a <__fputwc+0x36>
  407d88:	69a7      	ldr	r7, [r4, #24]
  407d8a:	42bb      	cmp	r3, r7
  407d8c:	4671      	mov	r1, lr
  407d8e:	4622      	mov	r2, r4
  407d90:	4640      	mov	r0, r8
  407d92:	db02      	blt.n	407d9a <__fputwc+0x66>
  407d94:	f1be 0f0a 	cmp.w	lr, #10
  407d98:	d1e7      	bne.n	407d6a <__fputwc+0x36>
  407d9a:	f001 f9e9 	bl	409170 <__swbuf_r>
  407d9e:	1c43      	adds	r3, r0, #1
  407da0:	d1e8      	bne.n	407d74 <__fputwc+0x40>
  407da2:	b002      	add	sp, #8
  407da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407da8:	89a3      	ldrh	r3, [r4, #12]
  407daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407dae:	81a3      	strh	r3, [r4, #12]
  407db0:	b002      	add	sp, #8
  407db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407db6:	f109 33ff 	add.w	r3, r9, #4294967295
  407dba:	2bfe      	cmp	r3, #254	; 0xfe
  407dbc:	d8c4      	bhi.n	407d48 <__fputwc+0x14>
  407dbe:	fa5f fe89 	uxtb.w	lr, r9
  407dc2:	4606      	mov	r6, r0
  407dc4:	f88d e004 	strb.w	lr, [sp, #4]
  407dc8:	e7cb      	b.n	407d62 <__fputwc+0x2e>
  407dca:	4648      	mov	r0, r9
  407dcc:	b002      	add	sp, #8
  407dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407dd2:	bf00      	nop

00407dd4 <_fputwc_r>:
  407dd4:	b530      	push	{r4, r5, lr}
  407dd6:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407dd8:	f013 0f01 	tst.w	r3, #1
  407ddc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407de0:	4614      	mov	r4, r2
  407de2:	b083      	sub	sp, #12
  407de4:	4605      	mov	r5, r0
  407de6:	b29a      	uxth	r2, r3
  407de8:	d101      	bne.n	407dee <_fputwc_r+0x1a>
  407dea:	0590      	lsls	r0, r2, #22
  407dec:	d51c      	bpl.n	407e28 <_fputwc_r+0x54>
  407dee:	0490      	lsls	r0, r2, #18
  407df0:	d406      	bmi.n	407e00 <_fputwc_r+0x2c>
  407df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407dfc:	81a3      	strh	r3, [r4, #12]
  407dfe:	6662      	str	r2, [r4, #100]	; 0x64
  407e00:	4628      	mov	r0, r5
  407e02:	4622      	mov	r2, r4
  407e04:	f7ff ff96 	bl	407d34 <__fputwc>
  407e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407e0a:	07da      	lsls	r2, r3, #31
  407e0c:	4605      	mov	r5, r0
  407e0e:	d402      	bmi.n	407e16 <_fputwc_r+0x42>
  407e10:	89a3      	ldrh	r3, [r4, #12]
  407e12:	059b      	lsls	r3, r3, #22
  407e14:	d502      	bpl.n	407e1c <_fputwc_r+0x48>
  407e16:	4628      	mov	r0, r5
  407e18:	b003      	add	sp, #12
  407e1a:	bd30      	pop	{r4, r5, pc}
  407e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e1e:	f000 faf9 	bl	408414 <__retarget_lock_release_recursive>
  407e22:	4628      	mov	r0, r5
  407e24:	b003      	add	sp, #12
  407e26:	bd30      	pop	{r4, r5, pc}
  407e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e2a:	9101      	str	r1, [sp, #4]
  407e2c:	f000 faf0 	bl	408410 <__retarget_lock_acquire_recursive>
  407e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e34:	9901      	ldr	r1, [sp, #4]
  407e36:	b29a      	uxth	r2, r3
  407e38:	e7d9      	b.n	407dee <_fputwc_r+0x1a>
  407e3a:	bf00      	nop

00407e3c <_malloc_trim_r>:
  407e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e3e:	4f24      	ldr	r7, [pc, #144]	; (407ed0 <_malloc_trim_r+0x94>)
  407e40:	460c      	mov	r4, r1
  407e42:	4606      	mov	r6, r0
  407e44:	f000 ff18 	bl	408c78 <__malloc_lock>
  407e48:	68bb      	ldr	r3, [r7, #8]
  407e4a:	685d      	ldr	r5, [r3, #4]
  407e4c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407e50:	310f      	adds	r1, #15
  407e52:	f025 0503 	bic.w	r5, r5, #3
  407e56:	4429      	add	r1, r5
  407e58:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407e5c:	f021 010f 	bic.w	r1, r1, #15
  407e60:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407e64:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407e68:	db07      	blt.n	407e7a <_malloc_trim_r+0x3e>
  407e6a:	2100      	movs	r1, #0
  407e6c:	4630      	mov	r0, r6
  407e6e:	f001 f8b5 	bl	408fdc <_sbrk_r>
  407e72:	68bb      	ldr	r3, [r7, #8]
  407e74:	442b      	add	r3, r5
  407e76:	4298      	cmp	r0, r3
  407e78:	d004      	beq.n	407e84 <_malloc_trim_r+0x48>
  407e7a:	4630      	mov	r0, r6
  407e7c:	f000 ff02 	bl	408c84 <__malloc_unlock>
  407e80:	2000      	movs	r0, #0
  407e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e84:	4261      	negs	r1, r4
  407e86:	4630      	mov	r0, r6
  407e88:	f001 f8a8 	bl	408fdc <_sbrk_r>
  407e8c:	3001      	adds	r0, #1
  407e8e:	d00d      	beq.n	407eac <_malloc_trim_r+0x70>
  407e90:	4b10      	ldr	r3, [pc, #64]	; (407ed4 <_malloc_trim_r+0x98>)
  407e92:	68ba      	ldr	r2, [r7, #8]
  407e94:	6819      	ldr	r1, [r3, #0]
  407e96:	1b2d      	subs	r5, r5, r4
  407e98:	f045 0501 	orr.w	r5, r5, #1
  407e9c:	4630      	mov	r0, r6
  407e9e:	1b09      	subs	r1, r1, r4
  407ea0:	6055      	str	r5, [r2, #4]
  407ea2:	6019      	str	r1, [r3, #0]
  407ea4:	f000 feee 	bl	408c84 <__malloc_unlock>
  407ea8:	2001      	movs	r0, #1
  407eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407eac:	2100      	movs	r1, #0
  407eae:	4630      	mov	r0, r6
  407eb0:	f001 f894 	bl	408fdc <_sbrk_r>
  407eb4:	68ba      	ldr	r2, [r7, #8]
  407eb6:	1a83      	subs	r3, r0, r2
  407eb8:	2b0f      	cmp	r3, #15
  407eba:	ddde      	ble.n	407e7a <_malloc_trim_r+0x3e>
  407ebc:	4c06      	ldr	r4, [pc, #24]	; (407ed8 <_malloc_trim_r+0x9c>)
  407ebe:	4905      	ldr	r1, [pc, #20]	; (407ed4 <_malloc_trim_r+0x98>)
  407ec0:	6824      	ldr	r4, [r4, #0]
  407ec2:	f043 0301 	orr.w	r3, r3, #1
  407ec6:	1b00      	subs	r0, r0, r4
  407ec8:	6053      	str	r3, [r2, #4]
  407eca:	6008      	str	r0, [r1, #0]
  407ecc:	e7d5      	b.n	407e7a <_malloc_trim_r+0x3e>
  407ece:	bf00      	nop
  407ed0:	204005c0 	.word	0x204005c0
  407ed4:	2040cee0 	.word	0x2040cee0
  407ed8:	204009c8 	.word	0x204009c8

00407edc <_free_r>:
  407edc:	2900      	cmp	r1, #0
  407ede:	d044      	beq.n	407f6a <_free_r+0x8e>
  407ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ee4:	460d      	mov	r5, r1
  407ee6:	4680      	mov	r8, r0
  407ee8:	f000 fec6 	bl	408c78 <__malloc_lock>
  407eec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407ef0:	4969      	ldr	r1, [pc, #420]	; (408098 <_free_r+0x1bc>)
  407ef2:	f027 0301 	bic.w	r3, r7, #1
  407ef6:	f1a5 0408 	sub.w	r4, r5, #8
  407efa:	18e2      	adds	r2, r4, r3
  407efc:	688e      	ldr	r6, [r1, #8]
  407efe:	6850      	ldr	r0, [r2, #4]
  407f00:	42b2      	cmp	r2, r6
  407f02:	f020 0003 	bic.w	r0, r0, #3
  407f06:	d05e      	beq.n	407fc6 <_free_r+0xea>
  407f08:	07fe      	lsls	r6, r7, #31
  407f0a:	6050      	str	r0, [r2, #4]
  407f0c:	d40b      	bmi.n	407f26 <_free_r+0x4a>
  407f0e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407f12:	1be4      	subs	r4, r4, r7
  407f14:	f101 0e08 	add.w	lr, r1, #8
  407f18:	68a5      	ldr	r5, [r4, #8]
  407f1a:	4575      	cmp	r5, lr
  407f1c:	443b      	add	r3, r7
  407f1e:	d06d      	beq.n	407ffc <_free_r+0x120>
  407f20:	68e7      	ldr	r7, [r4, #12]
  407f22:	60ef      	str	r7, [r5, #12]
  407f24:	60bd      	str	r5, [r7, #8]
  407f26:	1815      	adds	r5, r2, r0
  407f28:	686d      	ldr	r5, [r5, #4]
  407f2a:	07ed      	lsls	r5, r5, #31
  407f2c:	d53e      	bpl.n	407fac <_free_r+0xd0>
  407f2e:	f043 0201 	orr.w	r2, r3, #1
  407f32:	6062      	str	r2, [r4, #4]
  407f34:	50e3      	str	r3, [r4, r3]
  407f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407f3a:	d217      	bcs.n	407f6c <_free_r+0x90>
  407f3c:	08db      	lsrs	r3, r3, #3
  407f3e:	1c58      	adds	r0, r3, #1
  407f40:	109a      	asrs	r2, r3, #2
  407f42:	684d      	ldr	r5, [r1, #4]
  407f44:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407f48:	60a7      	str	r7, [r4, #8]
  407f4a:	2301      	movs	r3, #1
  407f4c:	4093      	lsls	r3, r2
  407f4e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407f52:	432b      	orrs	r3, r5
  407f54:	3a08      	subs	r2, #8
  407f56:	60e2      	str	r2, [r4, #12]
  407f58:	604b      	str	r3, [r1, #4]
  407f5a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407f5e:	60fc      	str	r4, [r7, #12]
  407f60:	4640      	mov	r0, r8
  407f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407f66:	f000 be8d 	b.w	408c84 <__malloc_unlock>
  407f6a:	4770      	bx	lr
  407f6c:	0a5a      	lsrs	r2, r3, #9
  407f6e:	2a04      	cmp	r2, #4
  407f70:	d852      	bhi.n	408018 <_free_r+0x13c>
  407f72:	099a      	lsrs	r2, r3, #6
  407f74:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407f78:	00ff      	lsls	r7, r7, #3
  407f7a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407f7e:	19c8      	adds	r0, r1, r7
  407f80:	59ca      	ldr	r2, [r1, r7]
  407f82:	3808      	subs	r0, #8
  407f84:	4290      	cmp	r0, r2
  407f86:	d04f      	beq.n	408028 <_free_r+0x14c>
  407f88:	6851      	ldr	r1, [r2, #4]
  407f8a:	f021 0103 	bic.w	r1, r1, #3
  407f8e:	428b      	cmp	r3, r1
  407f90:	d232      	bcs.n	407ff8 <_free_r+0x11c>
  407f92:	6892      	ldr	r2, [r2, #8]
  407f94:	4290      	cmp	r0, r2
  407f96:	d1f7      	bne.n	407f88 <_free_r+0xac>
  407f98:	68c3      	ldr	r3, [r0, #12]
  407f9a:	60a0      	str	r0, [r4, #8]
  407f9c:	60e3      	str	r3, [r4, #12]
  407f9e:	609c      	str	r4, [r3, #8]
  407fa0:	60c4      	str	r4, [r0, #12]
  407fa2:	4640      	mov	r0, r8
  407fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407fa8:	f000 be6c 	b.w	408c84 <__malloc_unlock>
  407fac:	6895      	ldr	r5, [r2, #8]
  407fae:	4f3b      	ldr	r7, [pc, #236]	; (40809c <_free_r+0x1c0>)
  407fb0:	42bd      	cmp	r5, r7
  407fb2:	4403      	add	r3, r0
  407fb4:	d040      	beq.n	408038 <_free_r+0x15c>
  407fb6:	68d0      	ldr	r0, [r2, #12]
  407fb8:	60e8      	str	r0, [r5, #12]
  407fba:	f043 0201 	orr.w	r2, r3, #1
  407fbe:	6085      	str	r5, [r0, #8]
  407fc0:	6062      	str	r2, [r4, #4]
  407fc2:	50e3      	str	r3, [r4, r3]
  407fc4:	e7b7      	b.n	407f36 <_free_r+0x5a>
  407fc6:	07ff      	lsls	r7, r7, #31
  407fc8:	4403      	add	r3, r0
  407fca:	d407      	bmi.n	407fdc <_free_r+0x100>
  407fcc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407fd0:	1aa4      	subs	r4, r4, r2
  407fd2:	4413      	add	r3, r2
  407fd4:	68a0      	ldr	r0, [r4, #8]
  407fd6:	68e2      	ldr	r2, [r4, #12]
  407fd8:	60c2      	str	r2, [r0, #12]
  407fda:	6090      	str	r0, [r2, #8]
  407fdc:	4a30      	ldr	r2, [pc, #192]	; (4080a0 <_free_r+0x1c4>)
  407fde:	6812      	ldr	r2, [r2, #0]
  407fe0:	f043 0001 	orr.w	r0, r3, #1
  407fe4:	4293      	cmp	r3, r2
  407fe6:	6060      	str	r0, [r4, #4]
  407fe8:	608c      	str	r4, [r1, #8]
  407fea:	d3b9      	bcc.n	407f60 <_free_r+0x84>
  407fec:	4b2d      	ldr	r3, [pc, #180]	; (4080a4 <_free_r+0x1c8>)
  407fee:	4640      	mov	r0, r8
  407ff0:	6819      	ldr	r1, [r3, #0]
  407ff2:	f7ff ff23 	bl	407e3c <_malloc_trim_r>
  407ff6:	e7b3      	b.n	407f60 <_free_r+0x84>
  407ff8:	4610      	mov	r0, r2
  407ffa:	e7cd      	b.n	407f98 <_free_r+0xbc>
  407ffc:	1811      	adds	r1, r2, r0
  407ffe:	6849      	ldr	r1, [r1, #4]
  408000:	07c9      	lsls	r1, r1, #31
  408002:	d444      	bmi.n	40808e <_free_r+0x1b2>
  408004:	6891      	ldr	r1, [r2, #8]
  408006:	68d2      	ldr	r2, [r2, #12]
  408008:	60ca      	str	r2, [r1, #12]
  40800a:	4403      	add	r3, r0
  40800c:	f043 0001 	orr.w	r0, r3, #1
  408010:	6091      	str	r1, [r2, #8]
  408012:	6060      	str	r0, [r4, #4]
  408014:	50e3      	str	r3, [r4, r3]
  408016:	e7a3      	b.n	407f60 <_free_r+0x84>
  408018:	2a14      	cmp	r2, #20
  40801a:	d816      	bhi.n	40804a <_free_r+0x16e>
  40801c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408020:	00ff      	lsls	r7, r7, #3
  408022:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408026:	e7aa      	b.n	407f7e <_free_r+0xa2>
  408028:	10aa      	asrs	r2, r5, #2
  40802a:	2301      	movs	r3, #1
  40802c:	684d      	ldr	r5, [r1, #4]
  40802e:	4093      	lsls	r3, r2
  408030:	432b      	orrs	r3, r5
  408032:	604b      	str	r3, [r1, #4]
  408034:	4603      	mov	r3, r0
  408036:	e7b0      	b.n	407f9a <_free_r+0xbe>
  408038:	f043 0201 	orr.w	r2, r3, #1
  40803c:	614c      	str	r4, [r1, #20]
  40803e:	610c      	str	r4, [r1, #16]
  408040:	60e5      	str	r5, [r4, #12]
  408042:	60a5      	str	r5, [r4, #8]
  408044:	6062      	str	r2, [r4, #4]
  408046:	50e3      	str	r3, [r4, r3]
  408048:	e78a      	b.n	407f60 <_free_r+0x84>
  40804a:	2a54      	cmp	r2, #84	; 0x54
  40804c:	d806      	bhi.n	40805c <_free_r+0x180>
  40804e:	0b1a      	lsrs	r2, r3, #12
  408050:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408054:	00ff      	lsls	r7, r7, #3
  408056:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40805a:	e790      	b.n	407f7e <_free_r+0xa2>
  40805c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408060:	d806      	bhi.n	408070 <_free_r+0x194>
  408062:	0bda      	lsrs	r2, r3, #15
  408064:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408068:	00ff      	lsls	r7, r7, #3
  40806a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40806e:	e786      	b.n	407f7e <_free_r+0xa2>
  408070:	f240 5054 	movw	r0, #1364	; 0x554
  408074:	4282      	cmp	r2, r0
  408076:	d806      	bhi.n	408086 <_free_r+0x1aa>
  408078:	0c9a      	lsrs	r2, r3, #18
  40807a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40807e:	00ff      	lsls	r7, r7, #3
  408080:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408084:	e77b      	b.n	407f7e <_free_r+0xa2>
  408086:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40808a:	257e      	movs	r5, #126	; 0x7e
  40808c:	e777      	b.n	407f7e <_free_r+0xa2>
  40808e:	f043 0101 	orr.w	r1, r3, #1
  408092:	6061      	str	r1, [r4, #4]
  408094:	6013      	str	r3, [r2, #0]
  408096:	e763      	b.n	407f60 <_free_r+0x84>
  408098:	204005c0 	.word	0x204005c0
  40809c:	204005c8 	.word	0x204005c8
  4080a0:	204009cc 	.word	0x204009cc
  4080a4:	2040cf10 	.word	0x2040cf10

004080a8 <__sfvwrite_r>:
  4080a8:	6893      	ldr	r3, [r2, #8]
  4080aa:	2b00      	cmp	r3, #0
  4080ac:	d073      	beq.n	408196 <__sfvwrite_r+0xee>
  4080ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4080b2:	898b      	ldrh	r3, [r1, #12]
  4080b4:	b083      	sub	sp, #12
  4080b6:	460c      	mov	r4, r1
  4080b8:	0719      	lsls	r1, r3, #28
  4080ba:	9000      	str	r0, [sp, #0]
  4080bc:	4616      	mov	r6, r2
  4080be:	d526      	bpl.n	40810e <__sfvwrite_r+0x66>
  4080c0:	6922      	ldr	r2, [r4, #16]
  4080c2:	b322      	cbz	r2, 40810e <__sfvwrite_r+0x66>
  4080c4:	f013 0002 	ands.w	r0, r3, #2
  4080c8:	6835      	ldr	r5, [r6, #0]
  4080ca:	d02c      	beq.n	408126 <__sfvwrite_r+0x7e>
  4080cc:	f04f 0900 	mov.w	r9, #0
  4080d0:	4fb0      	ldr	r7, [pc, #704]	; (408394 <__sfvwrite_r+0x2ec>)
  4080d2:	46c8      	mov	r8, r9
  4080d4:	46b2      	mov	sl, r6
  4080d6:	45b8      	cmp	r8, r7
  4080d8:	4643      	mov	r3, r8
  4080da:	464a      	mov	r2, r9
  4080dc:	bf28      	it	cs
  4080de:	463b      	movcs	r3, r7
  4080e0:	9800      	ldr	r0, [sp, #0]
  4080e2:	f1b8 0f00 	cmp.w	r8, #0
  4080e6:	d050      	beq.n	40818a <__sfvwrite_r+0xe2>
  4080e8:	69e1      	ldr	r1, [r4, #28]
  4080ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4080ec:	47b0      	blx	r6
  4080ee:	2800      	cmp	r0, #0
  4080f0:	dd58      	ble.n	4081a4 <__sfvwrite_r+0xfc>
  4080f2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4080f6:	1a1b      	subs	r3, r3, r0
  4080f8:	4481      	add	r9, r0
  4080fa:	eba8 0800 	sub.w	r8, r8, r0
  4080fe:	f8ca 3008 	str.w	r3, [sl, #8]
  408102:	2b00      	cmp	r3, #0
  408104:	d1e7      	bne.n	4080d6 <__sfvwrite_r+0x2e>
  408106:	2000      	movs	r0, #0
  408108:	b003      	add	sp, #12
  40810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40810e:	4621      	mov	r1, r4
  408110:	9800      	ldr	r0, [sp, #0]
  408112:	f7ff fc51 	bl	4079b8 <__swsetup_r>
  408116:	2800      	cmp	r0, #0
  408118:	f040 8133 	bne.w	408382 <__sfvwrite_r+0x2da>
  40811c:	89a3      	ldrh	r3, [r4, #12]
  40811e:	6835      	ldr	r5, [r6, #0]
  408120:	f013 0002 	ands.w	r0, r3, #2
  408124:	d1d2      	bne.n	4080cc <__sfvwrite_r+0x24>
  408126:	f013 0901 	ands.w	r9, r3, #1
  40812a:	d145      	bne.n	4081b8 <__sfvwrite_r+0x110>
  40812c:	464f      	mov	r7, r9
  40812e:	9601      	str	r6, [sp, #4]
  408130:	b337      	cbz	r7, 408180 <__sfvwrite_r+0xd8>
  408132:	059a      	lsls	r2, r3, #22
  408134:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408138:	f140 8083 	bpl.w	408242 <__sfvwrite_r+0x19a>
  40813c:	4547      	cmp	r7, r8
  40813e:	46c3      	mov	fp, r8
  408140:	f0c0 80ab 	bcc.w	40829a <__sfvwrite_r+0x1f2>
  408144:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408148:	f040 80ac 	bne.w	4082a4 <__sfvwrite_r+0x1fc>
  40814c:	6820      	ldr	r0, [r4, #0]
  40814e:	46ba      	mov	sl, r7
  408150:	465a      	mov	r2, fp
  408152:	4649      	mov	r1, r9
  408154:	f000 fd2c 	bl	408bb0 <memmove>
  408158:	68a2      	ldr	r2, [r4, #8]
  40815a:	6823      	ldr	r3, [r4, #0]
  40815c:	eba2 0208 	sub.w	r2, r2, r8
  408160:	445b      	add	r3, fp
  408162:	60a2      	str	r2, [r4, #8]
  408164:	6023      	str	r3, [r4, #0]
  408166:	9a01      	ldr	r2, [sp, #4]
  408168:	6893      	ldr	r3, [r2, #8]
  40816a:	eba3 030a 	sub.w	r3, r3, sl
  40816e:	44d1      	add	r9, sl
  408170:	eba7 070a 	sub.w	r7, r7, sl
  408174:	6093      	str	r3, [r2, #8]
  408176:	2b00      	cmp	r3, #0
  408178:	d0c5      	beq.n	408106 <__sfvwrite_r+0x5e>
  40817a:	89a3      	ldrh	r3, [r4, #12]
  40817c:	2f00      	cmp	r7, #0
  40817e:	d1d8      	bne.n	408132 <__sfvwrite_r+0x8a>
  408180:	f8d5 9000 	ldr.w	r9, [r5]
  408184:	686f      	ldr	r7, [r5, #4]
  408186:	3508      	adds	r5, #8
  408188:	e7d2      	b.n	408130 <__sfvwrite_r+0x88>
  40818a:	f8d5 9000 	ldr.w	r9, [r5]
  40818e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408192:	3508      	adds	r5, #8
  408194:	e79f      	b.n	4080d6 <__sfvwrite_r+0x2e>
  408196:	2000      	movs	r0, #0
  408198:	4770      	bx	lr
  40819a:	4621      	mov	r1, r4
  40819c:	9800      	ldr	r0, [sp, #0]
  40819e:	f7ff fd1f 	bl	407be0 <_fflush_r>
  4081a2:	b370      	cbz	r0, 408202 <__sfvwrite_r+0x15a>
  4081a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4081ac:	f04f 30ff 	mov.w	r0, #4294967295
  4081b0:	81a3      	strh	r3, [r4, #12]
  4081b2:	b003      	add	sp, #12
  4081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081b8:	4681      	mov	r9, r0
  4081ba:	4633      	mov	r3, r6
  4081bc:	464e      	mov	r6, r9
  4081be:	46a8      	mov	r8, r5
  4081c0:	469a      	mov	sl, r3
  4081c2:	464d      	mov	r5, r9
  4081c4:	b34e      	cbz	r6, 40821a <__sfvwrite_r+0x172>
  4081c6:	b380      	cbz	r0, 40822a <__sfvwrite_r+0x182>
  4081c8:	6820      	ldr	r0, [r4, #0]
  4081ca:	6923      	ldr	r3, [r4, #16]
  4081cc:	6962      	ldr	r2, [r4, #20]
  4081ce:	45b1      	cmp	r9, r6
  4081d0:	46cb      	mov	fp, r9
  4081d2:	bf28      	it	cs
  4081d4:	46b3      	movcs	fp, r6
  4081d6:	4298      	cmp	r0, r3
  4081d8:	465f      	mov	r7, fp
  4081da:	d904      	bls.n	4081e6 <__sfvwrite_r+0x13e>
  4081dc:	68a3      	ldr	r3, [r4, #8]
  4081de:	4413      	add	r3, r2
  4081e0:	459b      	cmp	fp, r3
  4081e2:	f300 80a6 	bgt.w	408332 <__sfvwrite_r+0x28a>
  4081e6:	4593      	cmp	fp, r2
  4081e8:	db4b      	blt.n	408282 <__sfvwrite_r+0x1da>
  4081ea:	4613      	mov	r3, r2
  4081ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4081ee:	69e1      	ldr	r1, [r4, #28]
  4081f0:	9800      	ldr	r0, [sp, #0]
  4081f2:	462a      	mov	r2, r5
  4081f4:	47b8      	blx	r7
  4081f6:	1e07      	subs	r7, r0, #0
  4081f8:	ddd4      	ble.n	4081a4 <__sfvwrite_r+0xfc>
  4081fa:	ebb9 0907 	subs.w	r9, r9, r7
  4081fe:	d0cc      	beq.n	40819a <__sfvwrite_r+0xf2>
  408200:	2001      	movs	r0, #1
  408202:	f8da 3008 	ldr.w	r3, [sl, #8]
  408206:	1bdb      	subs	r3, r3, r7
  408208:	443d      	add	r5, r7
  40820a:	1bf6      	subs	r6, r6, r7
  40820c:	f8ca 3008 	str.w	r3, [sl, #8]
  408210:	2b00      	cmp	r3, #0
  408212:	f43f af78 	beq.w	408106 <__sfvwrite_r+0x5e>
  408216:	2e00      	cmp	r6, #0
  408218:	d1d5      	bne.n	4081c6 <__sfvwrite_r+0x11e>
  40821a:	f108 0308 	add.w	r3, r8, #8
  40821e:	e913 0060 	ldmdb	r3, {r5, r6}
  408222:	4698      	mov	r8, r3
  408224:	3308      	adds	r3, #8
  408226:	2e00      	cmp	r6, #0
  408228:	d0f9      	beq.n	40821e <__sfvwrite_r+0x176>
  40822a:	4632      	mov	r2, r6
  40822c:	210a      	movs	r1, #10
  40822e:	4628      	mov	r0, r5
  408230:	f000 fc3e 	bl	408ab0 <memchr>
  408234:	2800      	cmp	r0, #0
  408236:	f000 80a1 	beq.w	40837c <__sfvwrite_r+0x2d4>
  40823a:	3001      	adds	r0, #1
  40823c:	eba0 0905 	sub.w	r9, r0, r5
  408240:	e7c2      	b.n	4081c8 <__sfvwrite_r+0x120>
  408242:	6820      	ldr	r0, [r4, #0]
  408244:	6923      	ldr	r3, [r4, #16]
  408246:	4298      	cmp	r0, r3
  408248:	d802      	bhi.n	408250 <__sfvwrite_r+0x1a8>
  40824a:	6963      	ldr	r3, [r4, #20]
  40824c:	429f      	cmp	r7, r3
  40824e:	d25d      	bcs.n	40830c <__sfvwrite_r+0x264>
  408250:	45b8      	cmp	r8, r7
  408252:	bf28      	it	cs
  408254:	46b8      	movcs	r8, r7
  408256:	4642      	mov	r2, r8
  408258:	4649      	mov	r1, r9
  40825a:	f000 fca9 	bl	408bb0 <memmove>
  40825e:	68a3      	ldr	r3, [r4, #8]
  408260:	6822      	ldr	r2, [r4, #0]
  408262:	eba3 0308 	sub.w	r3, r3, r8
  408266:	4442      	add	r2, r8
  408268:	60a3      	str	r3, [r4, #8]
  40826a:	6022      	str	r2, [r4, #0]
  40826c:	b10b      	cbz	r3, 408272 <__sfvwrite_r+0x1ca>
  40826e:	46c2      	mov	sl, r8
  408270:	e779      	b.n	408166 <__sfvwrite_r+0xbe>
  408272:	4621      	mov	r1, r4
  408274:	9800      	ldr	r0, [sp, #0]
  408276:	f7ff fcb3 	bl	407be0 <_fflush_r>
  40827a:	2800      	cmp	r0, #0
  40827c:	d192      	bne.n	4081a4 <__sfvwrite_r+0xfc>
  40827e:	46c2      	mov	sl, r8
  408280:	e771      	b.n	408166 <__sfvwrite_r+0xbe>
  408282:	465a      	mov	r2, fp
  408284:	4629      	mov	r1, r5
  408286:	f000 fc93 	bl	408bb0 <memmove>
  40828a:	68a2      	ldr	r2, [r4, #8]
  40828c:	6823      	ldr	r3, [r4, #0]
  40828e:	eba2 020b 	sub.w	r2, r2, fp
  408292:	445b      	add	r3, fp
  408294:	60a2      	str	r2, [r4, #8]
  408296:	6023      	str	r3, [r4, #0]
  408298:	e7af      	b.n	4081fa <__sfvwrite_r+0x152>
  40829a:	6820      	ldr	r0, [r4, #0]
  40829c:	46b8      	mov	r8, r7
  40829e:	46ba      	mov	sl, r7
  4082a0:	46bb      	mov	fp, r7
  4082a2:	e755      	b.n	408150 <__sfvwrite_r+0xa8>
  4082a4:	6962      	ldr	r2, [r4, #20]
  4082a6:	6820      	ldr	r0, [r4, #0]
  4082a8:	6921      	ldr	r1, [r4, #16]
  4082aa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4082ae:	eba0 0a01 	sub.w	sl, r0, r1
  4082b2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4082b6:	f10a 0001 	add.w	r0, sl, #1
  4082ba:	ea4f 0868 	mov.w	r8, r8, asr #1
  4082be:	4438      	add	r0, r7
  4082c0:	4540      	cmp	r0, r8
  4082c2:	4642      	mov	r2, r8
  4082c4:	bf84      	itt	hi
  4082c6:	4680      	movhi	r8, r0
  4082c8:	4642      	movhi	r2, r8
  4082ca:	055b      	lsls	r3, r3, #21
  4082cc:	d544      	bpl.n	408358 <__sfvwrite_r+0x2b0>
  4082ce:	4611      	mov	r1, r2
  4082d0:	9800      	ldr	r0, [sp, #0]
  4082d2:	f000 f921 	bl	408518 <_malloc_r>
  4082d6:	4683      	mov	fp, r0
  4082d8:	2800      	cmp	r0, #0
  4082da:	d055      	beq.n	408388 <__sfvwrite_r+0x2e0>
  4082dc:	4652      	mov	r2, sl
  4082de:	6921      	ldr	r1, [r4, #16]
  4082e0:	f7fd ffba 	bl	406258 <memcpy>
  4082e4:	89a3      	ldrh	r3, [r4, #12]
  4082e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4082ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4082ee:	81a3      	strh	r3, [r4, #12]
  4082f0:	eb0b 000a 	add.w	r0, fp, sl
  4082f4:	eba8 030a 	sub.w	r3, r8, sl
  4082f8:	f8c4 b010 	str.w	fp, [r4, #16]
  4082fc:	f8c4 8014 	str.w	r8, [r4, #20]
  408300:	6020      	str	r0, [r4, #0]
  408302:	60a3      	str	r3, [r4, #8]
  408304:	46b8      	mov	r8, r7
  408306:	46ba      	mov	sl, r7
  408308:	46bb      	mov	fp, r7
  40830a:	e721      	b.n	408150 <__sfvwrite_r+0xa8>
  40830c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408310:	42b9      	cmp	r1, r7
  408312:	bf28      	it	cs
  408314:	4639      	movcs	r1, r7
  408316:	464a      	mov	r2, r9
  408318:	fb91 f1f3 	sdiv	r1, r1, r3
  40831c:	9800      	ldr	r0, [sp, #0]
  40831e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408320:	fb03 f301 	mul.w	r3, r3, r1
  408324:	69e1      	ldr	r1, [r4, #28]
  408326:	47b0      	blx	r6
  408328:	f1b0 0a00 	subs.w	sl, r0, #0
  40832c:	f73f af1b 	bgt.w	408166 <__sfvwrite_r+0xbe>
  408330:	e738      	b.n	4081a4 <__sfvwrite_r+0xfc>
  408332:	461a      	mov	r2, r3
  408334:	4629      	mov	r1, r5
  408336:	9301      	str	r3, [sp, #4]
  408338:	f000 fc3a 	bl	408bb0 <memmove>
  40833c:	6822      	ldr	r2, [r4, #0]
  40833e:	9b01      	ldr	r3, [sp, #4]
  408340:	9800      	ldr	r0, [sp, #0]
  408342:	441a      	add	r2, r3
  408344:	6022      	str	r2, [r4, #0]
  408346:	4621      	mov	r1, r4
  408348:	f7ff fc4a 	bl	407be0 <_fflush_r>
  40834c:	9b01      	ldr	r3, [sp, #4]
  40834e:	2800      	cmp	r0, #0
  408350:	f47f af28 	bne.w	4081a4 <__sfvwrite_r+0xfc>
  408354:	461f      	mov	r7, r3
  408356:	e750      	b.n	4081fa <__sfvwrite_r+0x152>
  408358:	9800      	ldr	r0, [sp, #0]
  40835a:	f000 fc99 	bl	408c90 <_realloc_r>
  40835e:	4683      	mov	fp, r0
  408360:	2800      	cmp	r0, #0
  408362:	d1c5      	bne.n	4082f0 <__sfvwrite_r+0x248>
  408364:	9d00      	ldr	r5, [sp, #0]
  408366:	6921      	ldr	r1, [r4, #16]
  408368:	4628      	mov	r0, r5
  40836a:	f7ff fdb7 	bl	407edc <_free_r>
  40836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408372:	220c      	movs	r2, #12
  408374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408378:	602a      	str	r2, [r5, #0]
  40837a:	e715      	b.n	4081a8 <__sfvwrite_r+0x100>
  40837c:	f106 0901 	add.w	r9, r6, #1
  408380:	e722      	b.n	4081c8 <__sfvwrite_r+0x120>
  408382:	f04f 30ff 	mov.w	r0, #4294967295
  408386:	e6bf      	b.n	408108 <__sfvwrite_r+0x60>
  408388:	9a00      	ldr	r2, [sp, #0]
  40838a:	230c      	movs	r3, #12
  40838c:	6013      	str	r3, [r2, #0]
  40838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408392:	e709      	b.n	4081a8 <__sfvwrite_r+0x100>
  408394:	7ffffc00 	.word	0x7ffffc00

00408398 <_fwalk_reent>:
  408398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40839c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4083a0:	d01f      	beq.n	4083e2 <_fwalk_reent+0x4a>
  4083a2:	4688      	mov	r8, r1
  4083a4:	4606      	mov	r6, r0
  4083a6:	f04f 0900 	mov.w	r9, #0
  4083aa:	687d      	ldr	r5, [r7, #4]
  4083ac:	68bc      	ldr	r4, [r7, #8]
  4083ae:	3d01      	subs	r5, #1
  4083b0:	d411      	bmi.n	4083d6 <_fwalk_reent+0x3e>
  4083b2:	89a3      	ldrh	r3, [r4, #12]
  4083b4:	2b01      	cmp	r3, #1
  4083b6:	f105 35ff 	add.w	r5, r5, #4294967295
  4083ba:	d908      	bls.n	4083ce <_fwalk_reent+0x36>
  4083bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4083c0:	3301      	adds	r3, #1
  4083c2:	4621      	mov	r1, r4
  4083c4:	4630      	mov	r0, r6
  4083c6:	d002      	beq.n	4083ce <_fwalk_reent+0x36>
  4083c8:	47c0      	blx	r8
  4083ca:	ea49 0900 	orr.w	r9, r9, r0
  4083ce:	1c6b      	adds	r3, r5, #1
  4083d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4083d4:	d1ed      	bne.n	4083b2 <_fwalk_reent+0x1a>
  4083d6:	683f      	ldr	r7, [r7, #0]
  4083d8:	2f00      	cmp	r7, #0
  4083da:	d1e6      	bne.n	4083aa <_fwalk_reent+0x12>
  4083dc:	4648      	mov	r0, r9
  4083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4083e2:	46b9      	mov	r9, r7
  4083e4:	4648      	mov	r0, r9
  4083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4083ea:	bf00      	nop

004083ec <__locale_mb_cur_max>:
  4083ec:	4b04      	ldr	r3, [pc, #16]	; (408400 <__locale_mb_cur_max+0x14>)
  4083ee:	4a05      	ldr	r2, [pc, #20]	; (408404 <__locale_mb_cur_max+0x18>)
  4083f0:	681b      	ldr	r3, [r3, #0]
  4083f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4083f4:	2b00      	cmp	r3, #0
  4083f6:	bf08      	it	eq
  4083f8:	4613      	moveq	r3, r2
  4083fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4083fe:	4770      	bx	lr
  408400:	20400024 	.word	0x20400024
  408404:	20400454 	.word	0x20400454

00408408 <__retarget_lock_init_recursive>:
  408408:	4770      	bx	lr
  40840a:	bf00      	nop

0040840c <__retarget_lock_close_recursive>:
  40840c:	4770      	bx	lr
  40840e:	bf00      	nop

00408410 <__retarget_lock_acquire_recursive>:
  408410:	4770      	bx	lr
  408412:	bf00      	nop

00408414 <__retarget_lock_release_recursive>:
  408414:	4770      	bx	lr
  408416:	bf00      	nop

00408418 <__swhatbuf_r>:
  408418:	b570      	push	{r4, r5, r6, lr}
  40841a:	460c      	mov	r4, r1
  40841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408420:	2900      	cmp	r1, #0
  408422:	b090      	sub	sp, #64	; 0x40
  408424:	4615      	mov	r5, r2
  408426:	461e      	mov	r6, r3
  408428:	db14      	blt.n	408454 <__swhatbuf_r+0x3c>
  40842a:	aa01      	add	r2, sp, #4
  40842c:	f001 f81c 	bl	409468 <_fstat_r>
  408430:	2800      	cmp	r0, #0
  408432:	db0f      	blt.n	408454 <__swhatbuf_r+0x3c>
  408434:	9a02      	ldr	r2, [sp, #8]
  408436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40843a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40843e:	fab2 f282 	clz	r2, r2
  408442:	0952      	lsrs	r2, r2, #5
  408444:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408448:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40844c:	6032      	str	r2, [r6, #0]
  40844e:	602b      	str	r3, [r5, #0]
  408450:	b010      	add	sp, #64	; 0x40
  408452:	bd70      	pop	{r4, r5, r6, pc}
  408454:	89a2      	ldrh	r2, [r4, #12]
  408456:	2300      	movs	r3, #0
  408458:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40845c:	6033      	str	r3, [r6, #0]
  40845e:	d004      	beq.n	40846a <__swhatbuf_r+0x52>
  408460:	2240      	movs	r2, #64	; 0x40
  408462:	4618      	mov	r0, r3
  408464:	602a      	str	r2, [r5, #0]
  408466:	b010      	add	sp, #64	; 0x40
  408468:	bd70      	pop	{r4, r5, r6, pc}
  40846a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40846e:	602b      	str	r3, [r5, #0]
  408470:	b010      	add	sp, #64	; 0x40
  408472:	bd70      	pop	{r4, r5, r6, pc}

00408474 <__smakebuf_r>:
  408474:	898a      	ldrh	r2, [r1, #12]
  408476:	0792      	lsls	r2, r2, #30
  408478:	460b      	mov	r3, r1
  40847a:	d506      	bpl.n	40848a <__smakebuf_r+0x16>
  40847c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408480:	2101      	movs	r1, #1
  408482:	601a      	str	r2, [r3, #0]
  408484:	611a      	str	r2, [r3, #16]
  408486:	6159      	str	r1, [r3, #20]
  408488:	4770      	bx	lr
  40848a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40848c:	b083      	sub	sp, #12
  40848e:	ab01      	add	r3, sp, #4
  408490:	466a      	mov	r2, sp
  408492:	460c      	mov	r4, r1
  408494:	4606      	mov	r6, r0
  408496:	f7ff ffbf 	bl	408418 <__swhatbuf_r>
  40849a:	9900      	ldr	r1, [sp, #0]
  40849c:	4605      	mov	r5, r0
  40849e:	4630      	mov	r0, r6
  4084a0:	f000 f83a 	bl	408518 <_malloc_r>
  4084a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4084a8:	b1d8      	cbz	r0, 4084e2 <__smakebuf_r+0x6e>
  4084aa:	9a01      	ldr	r2, [sp, #4]
  4084ac:	4f15      	ldr	r7, [pc, #84]	; (408504 <__smakebuf_r+0x90>)
  4084ae:	9900      	ldr	r1, [sp, #0]
  4084b0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4084b6:	81a3      	strh	r3, [r4, #12]
  4084b8:	6020      	str	r0, [r4, #0]
  4084ba:	6120      	str	r0, [r4, #16]
  4084bc:	6161      	str	r1, [r4, #20]
  4084be:	b91a      	cbnz	r2, 4084c8 <__smakebuf_r+0x54>
  4084c0:	432b      	orrs	r3, r5
  4084c2:	81a3      	strh	r3, [r4, #12]
  4084c4:	b003      	add	sp, #12
  4084c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4084c8:	4630      	mov	r0, r6
  4084ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4084ce:	f000 ffdf 	bl	409490 <_isatty_r>
  4084d2:	b1a0      	cbz	r0, 4084fe <__smakebuf_r+0x8a>
  4084d4:	89a3      	ldrh	r3, [r4, #12]
  4084d6:	f023 0303 	bic.w	r3, r3, #3
  4084da:	f043 0301 	orr.w	r3, r3, #1
  4084de:	b21b      	sxth	r3, r3
  4084e0:	e7ee      	b.n	4084c0 <__smakebuf_r+0x4c>
  4084e2:	059a      	lsls	r2, r3, #22
  4084e4:	d4ee      	bmi.n	4084c4 <__smakebuf_r+0x50>
  4084e6:	f023 0303 	bic.w	r3, r3, #3
  4084ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4084ee:	f043 0302 	orr.w	r3, r3, #2
  4084f2:	2101      	movs	r1, #1
  4084f4:	81a3      	strh	r3, [r4, #12]
  4084f6:	6022      	str	r2, [r4, #0]
  4084f8:	6122      	str	r2, [r4, #16]
  4084fa:	6161      	str	r1, [r4, #20]
  4084fc:	e7e2      	b.n	4084c4 <__smakebuf_r+0x50>
  4084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408502:	e7dd      	b.n	4084c0 <__smakebuf_r+0x4c>
  408504:	00407c35 	.word	0x00407c35

00408508 <malloc>:
  408508:	4b02      	ldr	r3, [pc, #8]	; (408514 <malloc+0xc>)
  40850a:	4601      	mov	r1, r0
  40850c:	6818      	ldr	r0, [r3, #0]
  40850e:	f000 b803 	b.w	408518 <_malloc_r>
  408512:	bf00      	nop
  408514:	20400024 	.word	0x20400024

00408518 <_malloc_r>:
  408518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40851c:	f101 060b 	add.w	r6, r1, #11
  408520:	2e16      	cmp	r6, #22
  408522:	b083      	sub	sp, #12
  408524:	4605      	mov	r5, r0
  408526:	f240 809e 	bls.w	408666 <_malloc_r+0x14e>
  40852a:	f036 0607 	bics.w	r6, r6, #7
  40852e:	f100 80bd 	bmi.w	4086ac <_malloc_r+0x194>
  408532:	42b1      	cmp	r1, r6
  408534:	f200 80ba 	bhi.w	4086ac <_malloc_r+0x194>
  408538:	f000 fb9e 	bl	408c78 <__malloc_lock>
  40853c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408540:	f0c0 8293 	bcc.w	408a6a <_malloc_r+0x552>
  408544:	0a73      	lsrs	r3, r6, #9
  408546:	f000 80b8 	beq.w	4086ba <_malloc_r+0x1a2>
  40854a:	2b04      	cmp	r3, #4
  40854c:	f200 8179 	bhi.w	408842 <_malloc_r+0x32a>
  408550:	09b3      	lsrs	r3, r6, #6
  408552:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408556:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40855a:	00c3      	lsls	r3, r0, #3
  40855c:	4fbf      	ldr	r7, [pc, #764]	; (40885c <_malloc_r+0x344>)
  40855e:	443b      	add	r3, r7
  408560:	f1a3 0108 	sub.w	r1, r3, #8
  408564:	685c      	ldr	r4, [r3, #4]
  408566:	42a1      	cmp	r1, r4
  408568:	d106      	bne.n	408578 <_malloc_r+0x60>
  40856a:	e00c      	b.n	408586 <_malloc_r+0x6e>
  40856c:	2a00      	cmp	r2, #0
  40856e:	f280 80aa 	bge.w	4086c6 <_malloc_r+0x1ae>
  408572:	68e4      	ldr	r4, [r4, #12]
  408574:	42a1      	cmp	r1, r4
  408576:	d006      	beq.n	408586 <_malloc_r+0x6e>
  408578:	6863      	ldr	r3, [r4, #4]
  40857a:	f023 0303 	bic.w	r3, r3, #3
  40857e:	1b9a      	subs	r2, r3, r6
  408580:	2a0f      	cmp	r2, #15
  408582:	ddf3      	ble.n	40856c <_malloc_r+0x54>
  408584:	4670      	mov	r0, lr
  408586:	693c      	ldr	r4, [r7, #16]
  408588:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 408870 <_malloc_r+0x358>
  40858c:	4574      	cmp	r4, lr
  40858e:	f000 81ab 	beq.w	4088e8 <_malloc_r+0x3d0>
  408592:	6863      	ldr	r3, [r4, #4]
  408594:	f023 0303 	bic.w	r3, r3, #3
  408598:	1b9a      	subs	r2, r3, r6
  40859a:	2a0f      	cmp	r2, #15
  40859c:	f300 8190 	bgt.w	4088c0 <_malloc_r+0x3a8>
  4085a0:	2a00      	cmp	r2, #0
  4085a2:	f8c7 e014 	str.w	lr, [r7, #20]
  4085a6:	f8c7 e010 	str.w	lr, [r7, #16]
  4085aa:	f280 809d 	bge.w	4086e8 <_malloc_r+0x1d0>
  4085ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4085b2:	f080 8161 	bcs.w	408878 <_malloc_r+0x360>
  4085b6:	08db      	lsrs	r3, r3, #3
  4085b8:	f103 0c01 	add.w	ip, r3, #1
  4085bc:	1099      	asrs	r1, r3, #2
  4085be:	687a      	ldr	r2, [r7, #4]
  4085c0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4085c4:	f8c4 8008 	str.w	r8, [r4, #8]
  4085c8:	2301      	movs	r3, #1
  4085ca:	408b      	lsls	r3, r1
  4085cc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4085d0:	4313      	orrs	r3, r2
  4085d2:	3908      	subs	r1, #8
  4085d4:	60e1      	str	r1, [r4, #12]
  4085d6:	607b      	str	r3, [r7, #4]
  4085d8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4085dc:	f8c8 400c 	str.w	r4, [r8, #12]
  4085e0:	1082      	asrs	r2, r0, #2
  4085e2:	2401      	movs	r4, #1
  4085e4:	4094      	lsls	r4, r2
  4085e6:	429c      	cmp	r4, r3
  4085e8:	f200 808b 	bhi.w	408702 <_malloc_r+0x1ea>
  4085ec:	421c      	tst	r4, r3
  4085ee:	d106      	bne.n	4085fe <_malloc_r+0xe6>
  4085f0:	f020 0003 	bic.w	r0, r0, #3
  4085f4:	0064      	lsls	r4, r4, #1
  4085f6:	421c      	tst	r4, r3
  4085f8:	f100 0004 	add.w	r0, r0, #4
  4085fc:	d0fa      	beq.n	4085f4 <_malloc_r+0xdc>
  4085fe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408602:	46cc      	mov	ip, r9
  408604:	4680      	mov	r8, r0
  408606:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40860a:	459c      	cmp	ip, r3
  40860c:	d107      	bne.n	40861e <_malloc_r+0x106>
  40860e:	e16d      	b.n	4088ec <_malloc_r+0x3d4>
  408610:	2a00      	cmp	r2, #0
  408612:	f280 817b 	bge.w	40890c <_malloc_r+0x3f4>
  408616:	68db      	ldr	r3, [r3, #12]
  408618:	459c      	cmp	ip, r3
  40861a:	f000 8167 	beq.w	4088ec <_malloc_r+0x3d4>
  40861e:	6859      	ldr	r1, [r3, #4]
  408620:	f021 0103 	bic.w	r1, r1, #3
  408624:	1b8a      	subs	r2, r1, r6
  408626:	2a0f      	cmp	r2, #15
  408628:	ddf2      	ble.n	408610 <_malloc_r+0xf8>
  40862a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40862e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408632:	9300      	str	r3, [sp, #0]
  408634:	199c      	adds	r4, r3, r6
  408636:	4628      	mov	r0, r5
  408638:	f046 0601 	orr.w	r6, r6, #1
  40863c:	f042 0501 	orr.w	r5, r2, #1
  408640:	605e      	str	r6, [r3, #4]
  408642:	f8c8 c00c 	str.w	ip, [r8, #12]
  408646:	f8cc 8008 	str.w	r8, [ip, #8]
  40864a:	617c      	str	r4, [r7, #20]
  40864c:	613c      	str	r4, [r7, #16]
  40864e:	f8c4 e00c 	str.w	lr, [r4, #12]
  408652:	f8c4 e008 	str.w	lr, [r4, #8]
  408656:	6065      	str	r5, [r4, #4]
  408658:	505a      	str	r2, [r3, r1]
  40865a:	f000 fb13 	bl	408c84 <__malloc_unlock>
  40865e:	9b00      	ldr	r3, [sp, #0]
  408660:	f103 0408 	add.w	r4, r3, #8
  408664:	e01e      	b.n	4086a4 <_malloc_r+0x18c>
  408666:	2910      	cmp	r1, #16
  408668:	d820      	bhi.n	4086ac <_malloc_r+0x194>
  40866a:	f000 fb05 	bl	408c78 <__malloc_lock>
  40866e:	2610      	movs	r6, #16
  408670:	2318      	movs	r3, #24
  408672:	2002      	movs	r0, #2
  408674:	4f79      	ldr	r7, [pc, #484]	; (40885c <_malloc_r+0x344>)
  408676:	443b      	add	r3, r7
  408678:	f1a3 0208 	sub.w	r2, r3, #8
  40867c:	685c      	ldr	r4, [r3, #4]
  40867e:	4294      	cmp	r4, r2
  408680:	f000 813d 	beq.w	4088fe <_malloc_r+0x3e6>
  408684:	6863      	ldr	r3, [r4, #4]
  408686:	68e1      	ldr	r1, [r4, #12]
  408688:	68a6      	ldr	r6, [r4, #8]
  40868a:	f023 0303 	bic.w	r3, r3, #3
  40868e:	4423      	add	r3, r4
  408690:	4628      	mov	r0, r5
  408692:	685a      	ldr	r2, [r3, #4]
  408694:	60f1      	str	r1, [r6, #12]
  408696:	f042 0201 	orr.w	r2, r2, #1
  40869a:	608e      	str	r6, [r1, #8]
  40869c:	605a      	str	r2, [r3, #4]
  40869e:	f000 faf1 	bl	408c84 <__malloc_unlock>
  4086a2:	3408      	adds	r4, #8
  4086a4:	4620      	mov	r0, r4
  4086a6:	b003      	add	sp, #12
  4086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086ac:	2400      	movs	r4, #0
  4086ae:	230c      	movs	r3, #12
  4086b0:	4620      	mov	r0, r4
  4086b2:	602b      	str	r3, [r5, #0]
  4086b4:	b003      	add	sp, #12
  4086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086ba:	2040      	movs	r0, #64	; 0x40
  4086bc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4086c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4086c4:	e74a      	b.n	40855c <_malloc_r+0x44>
  4086c6:	4423      	add	r3, r4
  4086c8:	68e1      	ldr	r1, [r4, #12]
  4086ca:	685a      	ldr	r2, [r3, #4]
  4086cc:	68a6      	ldr	r6, [r4, #8]
  4086ce:	f042 0201 	orr.w	r2, r2, #1
  4086d2:	60f1      	str	r1, [r6, #12]
  4086d4:	4628      	mov	r0, r5
  4086d6:	608e      	str	r6, [r1, #8]
  4086d8:	605a      	str	r2, [r3, #4]
  4086da:	f000 fad3 	bl	408c84 <__malloc_unlock>
  4086de:	3408      	adds	r4, #8
  4086e0:	4620      	mov	r0, r4
  4086e2:	b003      	add	sp, #12
  4086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086e8:	4423      	add	r3, r4
  4086ea:	4628      	mov	r0, r5
  4086ec:	685a      	ldr	r2, [r3, #4]
  4086ee:	f042 0201 	orr.w	r2, r2, #1
  4086f2:	605a      	str	r2, [r3, #4]
  4086f4:	f000 fac6 	bl	408c84 <__malloc_unlock>
  4086f8:	3408      	adds	r4, #8
  4086fa:	4620      	mov	r0, r4
  4086fc:	b003      	add	sp, #12
  4086fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408702:	68bc      	ldr	r4, [r7, #8]
  408704:	6863      	ldr	r3, [r4, #4]
  408706:	f023 0803 	bic.w	r8, r3, #3
  40870a:	45b0      	cmp	r8, r6
  40870c:	d304      	bcc.n	408718 <_malloc_r+0x200>
  40870e:	eba8 0306 	sub.w	r3, r8, r6
  408712:	2b0f      	cmp	r3, #15
  408714:	f300 8085 	bgt.w	408822 <_malloc_r+0x30a>
  408718:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408874 <_malloc_r+0x35c>
  40871c:	4b50      	ldr	r3, [pc, #320]	; (408860 <_malloc_r+0x348>)
  40871e:	f8d9 2000 	ldr.w	r2, [r9]
  408722:	681b      	ldr	r3, [r3, #0]
  408724:	3201      	adds	r2, #1
  408726:	4433      	add	r3, r6
  408728:	eb04 0a08 	add.w	sl, r4, r8
  40872c:	f000 8155 	beq.w	4089da <_malloc_r+0x4c2>
  408730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408734:	330f      	adds	r3, #15
  408736:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40873a:	f02b 0b0f 	bic.w	fp, fp, #15
  40873e:	4659      	mov	r1, fp
  408740:	4628      	mov	r0, r5
  408742:	f000 fc4b 	bl	408fdc <_sbrk_r>
  408746:	1c41      	adds	r1, r0, #1
  408748:	4602      	mov	r2, r0
  40874a:	f000 80fc 	beq.w	408946 <_malloc_r+0x42e>
  40874e:	4582      	cmp	sl, r0
  408750:	f200 80f7 	bhi.w	408942 <_malloc_r+0x42a>
  408754:	4b43      	ldr	r3, [pc, #268]	; (408864 <_malloc_r+0x34c>)
  408756:	6819      	ldr	r1, [r3, #0]
  408758:	4459      	add	r1, fp
  40875a:	6019      	str	r1, [r3, #0]
  40875c:	f000 814d 	beq.w	4089fa <_malloc_r+0x4e2>
  408760:	f8d9 0000 	ldr.w	r0, [r9]
  408764:	3001      	adds	r0, #1
  408766:	bf1b      	ittet	ne
  408768:	eba2 0a0a 	subne.w	sl, r2, sl
  40876c:	4451      	addne	r1, sl
  40876e:	f8c9 2000 	streq.w	r2, [r9]
  408772:	6019      	strne	r1, [r3, #0]
  408774:	f012 0107 	ands.w	r1, r2, #7
  408778:	f000 8115 	beq.w	4089a6 <_malloc_r+0x48e>
  40877c:	f1c1 0008 	rsb	r0, r1, #8
  408780:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408784:	4402      	add	r2, r0
  408786:	3108      	adds	r1, #8
  408788:	eb02 090b 	add.w	r9, r2, fp
  40878c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  408790:	eba1 0909 	sub.w	r9, r1, r9
  408794:	4649      	mov	r1, r9
  408796:	4628      	mov	r0, r5
  408798:	9301      	str	r3, [sp, #4]
  40879a:	9200      	str	r2, [sp, #0]
  40879c:	f000 fc1e 	bl	408fdc <_sbrk_r>
  4087a0:	1c43      	adds	r3, r0, #1
  4087a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4087a6:	f000 8143 	beq.w	408a30 <_malloc_r+0x518>
  4087aa:	1a80      	subs	r0, r0, r2
  4087ac:	4448      	add	r0, r9
  4087ae:	f040 0001 	orr.w	r0, r0, #1
  4087b2:	6819      	ldr	r1, [r3, #0]
  4087b4:	60ba      	str	r2, [r7, #8]
  4087b6:	4449      	add	r1, r9
  4087b8:	42bc      	cmp	r4, r7
  4087ba:	6050      	str	r0, [r2, #4]
  4087bc:	6019      	str	r1, [r3, #0]
  4087be:	d017      	beq.n	4087f0 <_malloc_r+0x2d8>
  4087c0:	f1b8 0f0f 	cmp.w	r8, #15
  4087c4:	f240 80fb 	bls.w	4089be <_malloc_r+0x4a6>
  4087c8:	6860      	ldr	r0, [r4, #4]
  4087ca:	f1a8 020c 	sub.w	r2, r8, #12
  4087ce:	f022 0207 	bic.w	r2, r2, #7
  4087d2:	eb04 0e02 	add.w	lr, r4, r2
  4087d6:	f000 0001 	and.w	r0, r0, #1
  4087da:	f04f 0c05 	mov.w	ip, #5
  4087de:	4310      	orrs	r0, r2
  4087e0:	2a0f      	cmp	r2, #15
  4087e2:	6060      	str	r0, [r4, #4]
  4087e4:	f8ce c004 	str.w	ip, [lr, #4]
  4087e8:	f8ce c008 	str.w	ip, [lr, #8]
  4087ec:	f200 8117 	bhi.w	408a1e <_malloc_r+0x506>
  4087f0:	4b1d      	ldr	r3, [pc, #116]	; (408868 <_malloc_r+0x350>)
  4087f2:	68bc      	ldr	r4, [r7, #8]
  4087f4:	681a      	ldr	r2, [r3, #0]
  4087f6:	4291      	cmp	r1, r2
  4087f8:	bf88      	it	hi
  4087fa:	6019      	strhi	r1, [r3, #0]
  4087fc:	4b1b      	ldr	r3, [pc, #108]	; (40886c <_malloc_r+0x354>)
  4087fe:	681a      	ldr	r2, [r3, #0]
  408800:	4291      	cmp	r1, r2
  408802:	6862      	ldr	r2, [r4, #4]
  408804:	bf88      	it	hi
  408806:	6019      	strhi	r1, [r3, #0]
  408808:	f022 0203 	bic.w	r2, r2, #3
  40880c:	4296      	cmp	r6, r2
  40880e:	eba2 0306 	sub.w	r3, r2, r6
  408812:	d801      	bhi.n	408818 <_malloc_r+0x300>
  408814:	2b0f      	cmp	r3, #15
  408816:	dc04      	bgt.n	408822 <_malloc_r+0x30a>
  408818:	4628      	mov	r0, r5
  40881a:	f000 fa33 	bl	408c84 <__malloc_unlock>
  40881e:	2400      	movs	r4, #0
  408820:	e740      	b.n	4086a4 <_malloc_r+0x18c>
  408822:	19a2      	adds	r2, r4, r6
  408824:	f043 0301 	orr.w	r3, r3, #1
  408828:	f046 0601 	orr.w	r6, r6, #1
  40882c:	6066      	str	r6, [r4, #4]
  40882e:	4628      	mov	r0, r5
  408830:	60ba      	str	r2, [r7, #8]
  408832:	6053      	str	r3, [r2, #4]
  408834:	f000 fa26 	bl	408c84 <__malloc_unlock>
  408838:	3408      	adds	r4, #8
  40883a:	4620      	mov	r0, r4
  40883c:	b003      	add	sp, #12
  40883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408842:	2b14      	cmp	r3, #20
  408844:	d971      	bls.n	40892a <_malloc_r+0x412>
  408846:	2b54      	cmp	r3, #84	; 0x54
  408848:	f200 80a3 	bhi.w	408992 <_malloc_r+0x47a>
  40884c:	0b33      	lsrs	r3, r6, #12
  40884e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  408852:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  408856:	00c3      	lsls	r3, r0, #3
  408858:	e680      	b.n	40855c <_malloc_r+0x44>
  40885a:	bf00      	nop
  40885c:	204005c0 	.word	0x204005c0
  408860:	2040cf10 	.word	0x2040cf10
  408864:	2040cee0 	.word	0x2040cee0
  408868:	2040cf08 	.word	0x2040cf08
  40886c:	2040cf0c 	.word	0x2040cf0c
  408870:	204005c8 	.word	0x204005c8
  408874:	204009c8 	.word	0x204009c8
  408878:	0a5a      	lsrs	r2, r3, #9
  40887a:	2a04      	cmp	r2, #4
  40887c:	d95b      	bls.n	408936 <_malloc_r+0x41e>
  40887e:	2a14      	cmp	r2, #20
  408880:	f200 80ae 	bhi.w	4089e0 <_malloc_r+0x4c8>
  408884:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408888:	00c9      	lsls	r1, r1, #3
  40888a:	325b      	adds	r2, #91	; 0x5b
  40888c:	eb07 0c01 	add.w	ip, r7, r1
  408890:	5879      	ldr	r1, [r7, r1]
  408892:	f1ac 0c08 	sub.w	ip, ip, #8
  408896:	458c      	cmp	ip, r1
  408898:	f000 8088 	beq.w	4089ac <_malloc_r+0x494>
  40889c:	684a      	ldr	r2, [r1, #4]
  40889e:	f022 0203 	bic.w	r2, r2, #3
  4088a2:	4293      	cmp	r3, r2
  4088a4:	d273      	bcs.n	40898e <_malloc_r+0x476>
  4088a6:	6889      	ldr	r1, [r1, #8]
  4088a8:	458c      	cmp	ip, r1
  4088aa:	d1f7      	bne.n	40889c <_malloc_r+0x384>
  4088ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4088b0:	687b      	ldr	r3, [r7, #4]
  4088b2:	60e2      	str	r2, [r4, #12]
  4088b4:	f8c4 c008 	str.w	ip, [r4, #8]
  4088b8:	6094      	str	r4, [r2, #8]
  4088ba:	f8cc 400c 	str.w	r4, [ip, #12]
  4088be:	e68f      	b.n	4085e0 <_malloc_r+0xc8>
  4088c0:	19a1      	adds	r1, r4, r6
  4088c2:	f046 0c01 	orr.w	ip, r6, #1
  4088c6:	f042 0601 	orr.w	r6, r2, #1
  4088ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4088ce:	4628      	mov	r0, r5
  4088d0:	6179      	str	r1, [r7, #20]
  4088d2:	6139      	str	r1, [r7, #16]
  4088d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4088d8:	f8c1 e008 	str.w	lr, [r1, #8]
  4088dc:	604e      	str	r6, [r1, #4]
  4088de:	50e2      	str	r2, [r4, r3]
  4088e0:	f000 f9d0 	bl	408c84 <__malloc_unlock>
  4088e4:	3408      	adds	r4, #8
  4088e6:	e6dd      	b.n	4086a4 <_malloc_r+0x18c>
  4088e8:	687b      	ldr	r3, [r7, #4]
  4088ea:	e679      	b.n	4085e0 <_malloc_r+0xc8>
  4088ec:	f108 0801 	add.w	r8, r8, #1
  4088f0:	f018 0f03 	tst.w	r8, #3
  4088f4:	f10c 0c08 	add.w	ip, ip, #8
  4088f8:	f47f ae85 	bne.w	408606 <_malloc_r+0xee>
  4088fc:	e02d      	b.n	40895a <_malloc_r+0x442>
  4088fe:	68dc      	ldr	r4, [r3, #12]
  408900:	42a3      	cmp	r3, r4
  408902:	bf08      	it	eq
  408904:	3002      	addeq	r0, #2
  408906:	f43f ae3e 	beq.w	408586 <_malloc_r+0x6e>
  40890a:	e6bb      	b.n	408684 <_malloc_r+0x16c>
  40890c:	4419      	add	r1, r3
  40890e:	461c      	mov	r4, r3
  408910:	684a      	ldr	r2, [r1, #4]
  408912:	68db      	ldr	r3, [r3, #12]
  408914:	f854 6f08 	ldr.w	r6, [r4, #8]!
  408918:	f042 0201 	orr.w	r2, r2, #1
  40891c:	604a      	str	r2, [r1, #4]
  40891e:	4628      	mov	r0, r5
  408920:	60f3      	str	r3, [r6, #12]
  408922:	609e      	str	r6, [r3, #8]
  408924:	f000 f9ae 	bl	408c84 <__malloc_unlock>
  408928:	e6bc      	b.n	4086a4 <_malloc_r+0x18c>
  40892a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40892e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  408932:	00c3      	lsls	r3, r0, #3
  408934:	e612      	b.n	40855c <_malloc_r+0x44>
  408936:	099a      	lsrs	r2, r3, #6
  408938:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40893c:	00c9      	lsls	r1, r1, #3
  40893e:	3238      	adds	r2, #56	; 0x38
  408940:	e7a4      	b.n	40888c <_malloc_r+0x374>
  408942:	42bc      	cmp	r4, r7
  408944:	d054      	beq.n	4089f0 <_malloc_r+0x4d8>
  408946:	68bc      	ldr	r4, [r7, #8]
  408948:	6862      	ldr	r2, [r4, #4]
  40894a:	f022 0203 	bic.w	r2, r2, #3
  40894e:	e75d      	b.n	40880c <_malloc_r+0x2f4>
  408950:	f859 3908 	ldr.w	r3, [r9], #-8
  408954:	4599      	cmp	r9, r3
  408956:	f040 8086 	bne.w	408a66 <_malloc_r+0x54e>
  40895a:	f010 0f03 	tst.w	r0, #3
  40895e:	f100 30ff 	add.w	r0, r0, #4294967295
  408962:	d1f5      	bne.n	408950 <_malloc_r+0x438>
  408964:	687b      	ldr	r3, [r7, #4]
  408966:	ea23 0304 	bic.w	r3, r3, r4
  40896a:	607b      	str	r3, [r7, #4]
  40896c:	0064      	lsls	r4, r4, #1
  40896e:	429c      	cmp	r4, r3
  408970:	f63f aec7 	bhi.w	408702 <_malloc_r+0x1ea>
  408974:	2c00      	cmp	r4, #0
  408976:	f43f aec4 	beq.w	408702 <_malloc_r+0x1ea>
  40897a:	421c      	tst	r4, r3
  40897c:	4640      	mov	r0, r8
  40897e:	f47f ae3e 	bne.w	4085fe <_malloc_r+0xe6>
  408982:	0064      	lsls	r4, r4, #1
  408984:	421c      	tst	r4, r3
  408986:	f100 0004 	add.w	r0, r0, #4
  40898a:	d0fa      	beq.n	408982 <_malloc_r+0x46a>
  40898c:	e637      	b.n	4085fe <_malloc_r+0xe6>
  40898e:	468c      	mov	ip, r1
  408990:	e78c      	b.n	4088ac <_malloc_r+0x394>
  408992:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408996:	d815      	bhi.n	4089c4 <_malloc_r+0x4ac>
  408998:	0bf3      	lsrs	r3, r6, #15
  40899a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40899e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4089a2:	00c3      	lsls	r3, r0, #3
  4089a4:	e5da      	b.n	40855c <_malloc_r+0x44>
  4089a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4089aa:	e6ed      	b.n	408788 <_malloc_r+0x270>
  4089ac:	687b      	ldr	r3, [r7, #4]
  4089ae:	1092      	asrs	r2, r2, #2
  4089b0:	2101      	movs	r1, #1
  4089b2:	fa01 f202 	lsl.w	r2, r1, r2
  4089b6:	4313      	orrs	r3, r2
  4089b8:	607b      	str	r3, [r7, #4]
  4089ba:	4662      	mov	r2, ip
  4089bc:	e779      	b.n	4088b2 <_malloc_r+0x39a>
  4089be:	2301      	movs	r3, #1
  4089c0:	6053      	str	r3, [r2, #4]
  4089c2:	e729      	b.n	408818 <_malloc_r+0x300>
  4089c4:	f240 5254 	movw	r2, #1364	; 0x554
  4089c8:	4293      	cmp	r3, r2
  4089ca:	d822      	bhi.n	408a12 <_malloc_r+0x4fa>
  4089cc:	0cb3      	lsrs	r3, r6, #18
  4089ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4089d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4089d6:	00c3      	lsls	r3, r0, #3
  4089d8:	e5c0      	b.n	40855c <_malloc_r+0x44>
  4089da:	f103 0b10 	add.w	fp, r3, #16
  4089de:	e6ae      	b.n	40873e <_malloc_r+0x226>
  4089e0:	2a54      	cmp	r2, #84	; 0x54
  4089e2:	d829      	bhi.n	408a38 <_malloc_r+0x520>
  4089e4:	0b1a      	lsrs	r2, r3, #12
  4089e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4089ea:	00c9      	lsls	r1, r1, #3
  4089ec:	326e      	adds	r2, #110	; 0x6e
  4089ee:	e74d      	b.n	40888c <_malloc_r+0x374>
  4089f0:	4b20      	ldr	r3, [pc, #128]	; (408a74 <_malloc_r+0x55c>)
  4089f2:	6819      	ldr	r1, [r3, #0]
  4089f4:	4459      	add	r1, fp
  4089f6:	6019      	str	r1, [r3, #0]
  4089f8:	e6b2      	b.n	408760 <_malloc_r+0x248>
  4089fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4089fe:	2800      	cmp	r0, #0
  408a00:	f47f aeae 	bne.w	408760 <_malloc_r+0x248>
  408a04:	eb08 030b 	add.w	r3, r8, fp
  408a08:	68ba      	ldr	r2, [r7, #8]
  408a0a:	f043 0301 	orr.w	r3, r3, #1
  408a0e:	6053      	str	r3, [r2, #4]
  408a10:	e6ee      	b.n	4087f0 <_malloc_r+0x2d8>
  408a12:	207f      	movs	r0, #127	; 0x7f
  408a14:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  408a18:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  408a1c:	e59e      	b.n	40855c <_malloc_r+0x44>
  408a1e:	f104 0108 	add.w	r1, r4, #8
  408a22:	4628      	mov	r0, r5
  408a24:	9300      	str	r3, [sp, #0]
  408a26:	f7ff fa59 	bl	407edc <_free_r>
  408a2a:	9b00      	ldr	r3, [sp, #0]
  408a2c:	6819      	ldr	r1, [r3, #0]
  408a2e:	e6df      	b.n	4087f0 <_malloc_r+0x2d8>
  408a30:	2001      	movs	r0, #1
  408a32:	f04f 0900 	mov.w	r9, #0
  408a36:	e6bc      	b.n	4087b2 <_malloc_r+0x29a>
  408a38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408a3c:	d805      	bhi.n	408a4a <_malloc_r+0x532>
  408a3e:	0bda      	lsrs	r2, r3, #15
  408a40:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408a44:	00c9      	lsls	r1, r1, #3
  408a46:	3277      	adds	r2, #119	; 0x77
  408a48:	e720      	b.n	40888c <_malloc_r+0x374>
  408a4a:	f240 5154 	movw	r1, #1364	; 0x554
  408a4e:	428a      	cmp	r2, r1
  408a50:	d805      	bhi.n	408a5e <_malloc_r+0x546>
  408a52:	0c9a      	lsrs	r2, r3, #18
  408a54:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408a58:	00c9      	lsls	r1, r1, #3
  408a5a:	327c      	adds	r2, #124	; 0x7c
  408a5c:	e716      	b.n	40888c <_malloc_r+0x374>
  408a5e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  408a62:	227e      	movs	r2, #126	; 0x7e
  408a64:	e712      	b.n	40888c <_malloc_r+0x374>
  408a66:	687b      	ldr	r3, [r7, #4]
  408a68:	e780      	b.n	40896c <_malloc_r+0x454>
  408a6a:	08f0      	lsrs	r0, r6, #3
  408a6c:	f106 0308 	add.w	r3, r6, #8
  408a70:	e600      	b.n	408674 <_malloc_r+0x15c>
  408a72:	bf00      	nop
  408a74:	2040cee0 	.word	0x2040cee0

00408a78 <__ascii_mbtowc>:
  408a78:	b082      	sub	sp, #8
  408a7a:	b149      	cbz	r1, 408a90 <__ascii_mbtowc+0x18>
  408a7c:	b15a      	cbz	r2, 408a96 <__ascii_mbtowc+0x1e>
  408a7e:	b16b      	cbz	r3, 408a9c <__ascii_mbtowc+0x24>
  408a80:	7813      	ldrb	r3, [r2, #0]
  408a82:	600b      	str	r3, [r1, #0]
  408a84:	7812      	ldrb	r2, [r2, #0]
  408a86:	1c10      	adds	r0, r2, #0
  408a88:	bf18      	it	ne
  408a8a:	2001      	movne	r0, #1
  408a8c:	b002      	add	sp, #8
  408a8e:	4770      	bx	lr
  408a90:	a901      	add	r1, sp, #4
  408a92:	2a00      	cmp	r2, #0
  408a94:	d1f3      	bne.n	408a7e <__ascii_mbtowc+0x6>
  408a96:	4610      	mov	r0, r2
  408a98:	b002      	add	sp, #8
  408a9a:	4770      	bx	lr
  408a9c:	f06f 0001 	mvn.w	r0, #1
  408aa0:	e7f4      	b.n	408a8c <__ascii_mbtowc+0x14>
  408aa2:	bf00      	nop
	...

00408ab0 <memchr>:
  408ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408ab4:	2a10      	cmp	r2, #16
  408ab6:	db2b      	blt.n	408b10 <memchr+0x60>
  408ab8:	f010 0f07 	tst.w	r0, #7
  408abc:	d008      	beq.n	408ad0 <memchr+0x20>
  408abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  408ac2:	3a01      	subs	r2, #1
  408ac4:	428b      	cmp	r3, r1
  408ac6:	d02d      	beq.n	408b24 <memchr+0x74>
  408ac8:	f010 0f07 	tst.w	r0, #7
  408acc:	b342      	cbz	r2, 408b20 <memchr+0x70>
  408ace:	d1f6      	bne.n	408abe <memchr+0xe>
  408ad0:	b4f0      	push	{r4, r5, r6, r7}
  408ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408ada:	f022 0407 	bic.w	r4, r2, #7
  408ade:	f07f 0700 	mvns.w	r7, #0
  408ae2:	2300      	movs	r3, #0
  408ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408ae8:	3c08      	subs	r4, #8
  408aea:	ea85 0501 	eor.w	r5, r5, r1
  408aee:	ea86 0601 	eor.w	r6, r6, r1
  408af2:	fa85 f547 	uadd8	r5, r5, r7
  408af6:	faa3 f587 	sel	r5, r3, r7
  408afa:	fa86 f647 	uadd8	r6, r6, r7
  408afe:	faa5 f687 	sel	r6, r5, r7
  408b02:	b98e      	cbnz	r6, 408b28 <memchr+0x78>
  408b04:	d1ee      	bne.n	408ae4 <memchr+0x34>
  408b06:	bcf0      	pop	{r4, r5, r6, r7}
  408b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408b0c:	f002 0207 	and.w	r2, r2, #7
  408b10:	b132      	cbz	r2, 408b20 <memchr+0x70>
  408b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  408b16:	3a01      	subs	r2, #1
  408b18:	ea83 0301 	eor.w	r3, r3, r1
  408b1c:	b113      	cbz	r3, 408b24 <memchr+0x74>
  408b1e:	d1f8      	bne.n	408b12 <memchr+0x62>
  408b20:	2000      	movs	r0, #0
  408b22:	4770      	bx	lr
  408b24:	3801      	subs	r0, #1
  408b26:	4770      	bx	lr
  408b28:	2d00      	cmp	r5, #0
  408b2a:	bf06      	itte	eq
  408b2c:	4635      	moveq	r5, r6
  408b2e:	3803      	subeq	r0, #3
  408b30:	3807      	subne	r0, #7
  408b32:	f015 0f01 	tst.w	r5, #1
  408b36:	d107      	bne.n	408b48 <memchr+0x98>
  408b38:	3001      	adds	r0, #1
  408b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  408b3e:	bf02      	ittt	eq
  408b40:	3001      	addeq	r0, #1
  408b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408b46:	3001      	addeq	r0, #1
  408b48:	bcf0      	pop	{r4, r5, r6, r7}
  408b4a:	3801      	subs	r0, #1
  408b4c:	4770      	bx	lr
  408b4e:	bf00      	nop

00408b50 <memcmp>:
  408b50:	2a03      	cmp	r2, #3
  408b52:	b470      	push	{r4, r5, r6}
  408b54:	d922      	bls.n	408b9c <memcmp+0x4c>
  408b56:	ea40 0301 	orr.w	r3, r0, r1
  408b5a:	079b      	lsls	r3, r3, #30
  408b5c:	d011      	beq.n	408b82 <memcmp+0x32>
  408b5e:	7803      	ldrb	r3, [r0, #0]
  408b60:	780c      	ldrb	r4, [r1, #0]
  408b62:	42a3      	cmp	r3, r4
  408b64:	d11d      	bne.n	408ba2 <memcmp+0x52>
  408b66:	440a      	add	r2, r1
  408b68:	3101      	adds	r1, #1
  408b6a:	e005      	b.n	408b78 <memcmp+0x28>
  408b6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  408b70:	f811 4b01 	ldrb.w	r4, [r1], #1
  408b74:	42a3      	cmp	r3, r4
  408b76:	d114      	bne.n	408ba2 <memcmp+0x52>
  408b78:	4291      	cmp	r1, r2
  408b7a:	d1f7      	bne.n	408b6c <memcmp+0x1c>
  408b7c:	2000      	movs	r0, #0
  408b7e:	bc70      	pop	{r4, r5, r6}
  408b80:	4770      	bx	lr
  408b82:	680d      	ldr	r5, [r1, #0]
  408b84:	6806      	ldr	r6, [r0, #0]
  408b86:	42ae      	cmp	r6, r5
  408b88:	460c      	mov	r4, r1
  408b8a:	4603      	mov	r3, r0
  408b8c:	f101 0104 	add.w	r1, r1, #4
  408b90:	f100 0004 	add.w	r0, r0, #4
  408b94:	d108      	bne.n	408ba8 <memcmp+0x58>
  408b96:	3a04      	subs	r2, #4
  408b98:	2a03      	cmp	r2, #3
  408b9a:	d8f2      	bhi.n	408b82 <memcmp+0x32>
  408b9c:	2a00      	cmp	r2, #0
  408b9e:	d1de      	bne.n	408b5e <memcmp+0xe>
  408ba0:	e7ec      	b.n	408b7c <memcmp+0x2c>
  408ba2:	1b18      	subs	r0, r3, r4
  408ba4:	bc70      	pop	{r4, r5, r6}
  408ba6:	4770      	bx	lr
  408ba8:	4621      	mov	r1, r4
  408baa:	4618      	mov	r0, r3
  408bac:	e7d7      	b.n	408b5e <memcmp+0xe>
  408bae:	bf00      	nop

00408bb0 <memmove>:
  408bb0:	4288      	cmp	r0, r1
  408bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  408bb4:	d90d      	bls.n	408bd2 <memmove+0x22>
  408bb6:	188b      	adds	r3, r1, r2
  408bb8:	4298      	cmp	r0, r3
  408bba:	d20a      	bcs.n	408bd2 <memmove+0x22>
  408bbc:	1884      	adds	r4, r0, r2
  408bbe:	2a00      	cmp	r2, #0
  408bc0:	d051      	beq.n	408c66 <memmove+0xb6>
  408bc2:	4622      	mov	r2, r4
  408bc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408bc8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408bcc:	4299      	cmp	r1, r3
  408bce:	d1f9      	bne.n	408bc4 <memmove+0x14>
  408bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408bd2:	2a0f      	cmp	r2, #15
  408bd4:	d948      	bls.n	408c68 <memmove+0xb8>
  408bd6:	ea41 0300 	orr.w	r3, r1, r0
  408bda:	079b      	lsls	r3, r3, #30
  408bdc:	d146      	bne.n	408c6c <memmove+0xbc>
  408bde:	f100 0410 	add.w	r4, r0, #16
  408be2:	f101 0310 	add.w	r3, r1, #16
  408be6:	4615      	mov	r5, r2
  408be8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408bec:	f844 6c10 	str.w	r6, [r4, #-16]
  408bf0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408bf4:	f844 6c0c 	str.w	r6, [r4, #-12]
  408bf8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408bfc:	f844 6c08 	str.w	r6, [r4, #-8]
  408c00:	3d10      	subs	r5, #16
  408c02:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408c06:	f844 6c04 	str.w	r6, [r4, #-4]
  408c0a:	2d0f      	cmp	r5, #15
  408c0c:	f103 0310 	add.w	r3, r3, #16
  408c10:	f104 0410 	add.w	r4, r4, #16
  408c14:	d8e8      	bhi.n	408be8 <memmove+0x38>
  408c16:	f1a2 0310 	sub.w	r3, r2, #16
  408c1a:	f023 030f 	bic.w	r3, r3, #15
  408c1e:	f002 0e0f 	and.w	lr, r2, #15
  408c22:	3310      	adds	r3, #16
  408c24:	f1be 0f03 	cmp.w	lr, #3
  408c28:	4419      	add	r1, r3
  408c2a:	4403      	add	r3, r0
  408c2c:	d921      	bls.n	408c72 <memmove+0xc2>
  408c2e:	1f1e      	subs	r6, r3, #4
  408c30:	460d      	mov	r5, r1
  408c32:	4674      	mov	r4, lr
  408c34:	3c04      	subs	r4, #4
  408c36:	f855 7b04 	ldr.w	r7, [r5], #4
  408c3a:	f846 7f04 	str.w	r7, [r6, #4]!
  408c3e:	2c03      	cmp	r4, #3
  408c40:	d8f8      	bhi.n	408c34 <memmove+0x84>
  408c42:	f1ae 0404 	sub.w	r4, lr, #4
  408c46:	f024 0403 	bic.w	r4, r4, #3
  408c4a:	3404      	adds	r4, #4
  408c4c:	4421      	add	r1, r4
  408c4e:	4423      	add	r3, r4
  408c50:	f002 0203 	and.w	r2, r2, #3
  408c54:	b162      	cbz	r2, 408c70 <memmove+0xc0>
  408c56:	3b01      	subs	r3, #1
  408c58:	440a      	add	r2, r1
  408c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
  408c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408c62:	428a      	cmp	r2, r1
  408c64:	d1f9      	bne.n	408c5a <memmove+0xaa>
  408c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c68:	4603      	mov	r3, r0
  408c6a:	e7f3      	b.n	408c54 <memmove+0xa4>
  408c6c:	4603      	mov	r3, r0
  408c6e:	e7f2      	b.n	408c56 <memmove+0xa6>
  408c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c72:	4672      	mov	r2, lr
  408c74:	e7ee      	b.n	408c54 <memmove+0xa4>
  408c76:	bf00      	nop

00408c78 <__malloc_lock>:
  408c78:	4801      	ldr	r0, [pc, #4]	; (408c80 <__malloc_lock+0x8>)
  408c7a:	f7ff bbc9 	b.w	408410 <__retarget_lock_acquire_recursive>
  408c7e:	bf00      	nop
  408c80:	2040d03c 	.word	0x2040d03c

00408c84 <__malloc_unlock>:
  408c84:	4801      	ldr	r0, [pc, #4]	; (408c8c <__malloc_unlock+0x8>)
  408c86:	f7ff bbc5 	b.w	408414 <__retarget_lock_release_recursive>
  408c8a:	bf00      	nop
  408c8c:	2040d03c 	.word	0x2040d03c

00408c90 <_realloc_r>:
  408c90:	2900      	cmp	r1, #0
  408c92:	f000 8095 	beq.w	408dc0 <_realloc_r+0x130>
  408c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c9a:	460d      	mov	r5, r1
  408c9c:	4616      	mov	r6, r2
  408c9e:	b083      	sub	sp, #12
  408ca0:	4680      	mov	r8, r0
  408ca2:	f106 070b 	add.w	r7, r6, #11
  408ca6:	f7ff ffe7 	bl	408c78 <__malloc_lock>
  408caa:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408cae:	2f16      	cmp	r7, #22
  408cb0:	f02e 0403 	bic.w	r4, lr, #3
  408cb4:	f1a5 0908 	sub.w	r9, r5, #8
  408cb8:	d83c      	bhi.n	408d34 <_realloc_r+0xa4>
  408cba:	2210      	movs	r2, #16
  408cbc:	4617      	mov	r7, r2
  408cbe:	42be      	cmp	r6, r7
  408cc0:	d83d      	bhi.n	408d3e <_realloc_r+0xae>
  408cc2:	4294      	cmp	r4, r2
  408cc4:	da43      	bge.n	408d4e <_realloc_r+0xbe>
  408cc6:	4bc4      	ldr	r3, [pc, #784]	; (408fd8 <_realloc_r+0x348>)
  408cc8:	6899      	ldr	r1, [r3, #8]
  408cca:	eb09 0004 	add.w	r0, r9, r4
  408cce:	4288      	cmp	r0, r1
  408cd0:	f000 80b4 	beq.w	408e3c <_realloc_r+0x1ac>
  408cd4:	6843      	ldr	r3, [r0, #4]
  408cd6:	f023 0101 	bic.w	r1, r3, #1
  408cda:	4401      	add	r1, r0
  408cdc:	6849      	ldr	r1, [r1, #4]
  408cde:	07c9      	lsls	r1, r1, #31
  408ce0:	d54c      	bpl.n	408d7c <_realloc_r+0xec>
  408ce2:	f01e 0f01 	tst.w	lr, #1
  408ce6:	f000 809b 	beq.w	408e20 <_realloc_r+0x190>
  408cea:	4631      	mov	r1, r6
  408cec:	4640      	mov	r0, r8
  408cee:	f7ff fc13 	bl	408518 <_malloc_r>
  408cf2:	4606      	mov	r6, r0
  408cf4:	2800      	cmp	r0, #0
  408cf6:	d03a      	beq.n	408d6e <_realloc_r+0xde>
  408cf8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408cfc:	f023 0301 	bic.w	r3, r3, #1
  408d00:	444b      	add	r3, r9
  408d02:	f1a0 0208 	sub.w	r2, r0, #8
  408d06:	429a      	cmp	r2, r3
  408d08:	f000 8121 	beq.w	408f4e <_realloc_r+0x2be>
  408d0c:	1f22      	subs	r2, r4, #4
  408d0e:	2a24      	cmp	r2, #36	; 0x24
  408d10:	f200 8107 	bhi.w	408f22 <_realloc_r+0x292>
  408d14:	2a13      	cmp	r2, #19
  408d16:	f200 80db 	bhi.w	408ed0 <_realloc_r+0x240>
  408d1a:	4603      	mov	r3, r0
  408d1c:	462a      	mov	r2, r5
  408d1e:	6811      	ldr	r1, [r2, #0]
  408d20:	6019      	str	r1, [r3, #0]
  408d22:	6851      	ldr	r1, [r2, #4]
  408d24:	6059      	str	r1, [r3, #4]
  408d26:	6892      	ldr	r2, [r2, #8]
  408d28:	609a      	str	r2, [r3, #8]
  408d2a:	4629      	mov	r1, r5
  408d2c:	4640      	mov	r0, r8
  408d2e:	f7ff f8d5 	bl	407edc <_free_r>
  408d32:	e01c      	b.n	408d6e <_realloc_r+0xde>
  408d34:	f027 0707 	bic.w	r7, r7, #7
  408d38:	2f00      	cmp	r7, #0
  408d3a:	463a      	mov	r2, r7
  408d3c:	dabf      	bge.n	408cbe <_realloc_r+0x2e>
  408d3e:	2600      	movs	r6, #0
  408d40:	230c      	movs	r3, #12
  408d42:	4630      	mov	r0, r6
  408d44:	f8c8 3000 	str.w	r3, [r8]
  408d48:	b003      	add	sp, #12
  408d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d4e:	462e      	mov	r6, r5
  408d50:	1be3      	subs	r3, r4, r7
  408d52:	2b0f      	cmp	r3, #15
  408d54:	d81e      	bhi.n	408d94 <_realloc_r+0x104>
  408d56:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408d5a:	f003 0301 	and.w	r3, r3, #1
  408d5e:	4323      	orrs	r3, r4
  408d60:	444c      	add	r4, r9
  408d62:	f8c9 3004 	str.w	r3, [r9, #4]
  408d66:	6863      	ldr	r3, [r4, #4]
  408d68:	f043 0301 	orr.w	r3, r3, #1
  408d6c:	6063      	str	r3, [r4, #4]
  408d6e:	4640      	mov	r0, r8
  408d70:	f7ff ff88 	bl	408c84 <__malloc_unlock>
  408d74:	4630      	mov	r0, r6
  408d76:	b003      	add	sp, #12
  408d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d7c:	f023 0303 	bic.w	r3, r3, #3
  408d80:	18e1      	adds	r1, r4, r3
  408d82:	4291      	cmp	r1, r2
  408d84:	db1f      	blt.n	408dc6 <_realloc_r+0x136>
  408d86:	68c3      	ldr	r3, [r0, #12]
  408d88:	6882      	ldr	r2, [r0, #8]
  408d8a:	462e      	mov	r6, r5
  408d8c:	60d3      	str	r3, [r2, #12]
  408d8e:	460c      	mov	r4, r1
  408d90:	609a      	str	r2, [r3, #8]
  408d92:	e7dd      	b.n	408d50 <_realloc_r+0xc0>
  408d94:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408d98:	eb09 0107 	add.w	r1, r9, r7
  408d9c:	f002 0201 	and.w	r2, r2, #1
  408da0:	444c      	add	r4, r9
  408da2:	f043 0301 	orr.w	r3, r3, #1
  408da6:	4317      	orrs	r7, r2
  408da8:	f8c9 7004 	str.w	r7, [r9, #4]
  408dac:	604b      	str	r3, [r1, #4]
  408dae:	6863      	ldr	r3, [r4, #4]
  408db0:	f043 0301 	orr.w	r3, r3, #1
  408db4:	3108      	adds	r1, #8
  408db6:	6063      	str	r3, [r4, #4]
  408db8:	4640      	mov	r0, r8
  408dba:	f7ff f88f 	bl	407edc <_free_r>
  408dbe:	e7d6      	b.n	408d6e <_realloc_r+0xde>
  408dc0:	4611      	mov	r1, r2
  408dc2:	f7ff bba9 	b.w	408518 <_malloc_r>
  408dc6:	f01e 0f01 	tst.w	lr, #1
  408dca:	d18e      	bne.n	408cea <_realloc_r+0x5a>
  408dcc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408dd0:	eba9 0a01 	sub.w	sl, r9, r1
  408dd4:	f8da 1004 	ldr.w	r1, [sl, #4]
  408dd8:	f021 0103 	bic.w	r1, r1, #3
  408ddc:	440b      	add	r3, r1
  408dde:	4423      	add	r3, r4
  408de0:	4293      	cmp	r3, r2
  408de2:	db25      	blt.n	408e30 <_realloc_r+0x1a0>
  408de4:	68c2      	ldr	r2, [r0, #12]
  408de6:	6881      	ldr	r1, [r0, #8]
  408de8:	4656      	mov	r6, sl
  408dea:	60ca      	str	r2, [r1, #12]
  408dec:	6091      	str	r1, [r2, #8]
  408dee:	f8da 100c 	ldr.w	r1, [sl, #12]
  408df2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408df6:	1f22      	subs	r2, r4, #4
  408df8:	2a24      	cmp	r2, #36	; 0x24
  408dfa:	60c1      	str	r1, [r0, #12]
  408dfc:	6088      	str	r0, [r1, #8]
  408dfe:	f200 8094 	bhi.w	408f2a <_realloc_r+0x29a>
  408e02:	2a13      	cmp	r2, #19
  408e04:	d96f      	bls.n	408ee6 <_realloc_r+0x256>
  408e06:	6829      	ldr	r1, [r5, #0]
  408e08:	f8ca 1008 	str.w	r1, [sl, #8]
  408e0c:	6869      	ldr	r1, [r5, #4]
  408e0e:	f8ca 100c 	str.w	r1, [sl, #12]
  408e12:	2a1b      	cmp	r2, #27
  408e14:	f200 80a2 	bhi.w	408f5c <_realloc_r+0x2cc>
  408e18:	3508      	adds	r5, #8
  408e1a:	f10a 0210 	add.w	r2, sl, #16
  408e1e:	e063      	b.n	408ee8 <_realloc_r+0x258>
  408e20:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408e24:	eba9 0a03 	sub.w	sl, r9, r3
  408e28:	f8da 1004 	ldr.w	r1, [sl, #4]
  408e2c:	f021 0103 	bic.w	r1, r1, #3
  408e30:	1863      	adds	r3, r4, r1
  408e32:	4293      	cmp	r3, r2
  408e34:	f6ff af59 	blt.w	408cea <_realloc_r+0x5a>
  408e38:	4656      	mov	r6, sl
  408e3a:	e7d8      	b.n	408dee <_realloc_r+0x15e>
  408e3c:	6841      	ldr	r1, [r0, #4]
  408e3e:	f021 0b03 	bic.w	fp, r1, #3
  408e42:	44a3      	add	fp, r4
  408e44:	f107 0010 	add.w	r0, r7, #16
  408e48:	4583      	cmp	fp, r0
  408e4a:	da56      	bge.n	408efa <_realloc_r+0x26a>
  408e4c:	f01e 0f01 	tst.w	lr, #1
  408e50:	f47f af4b 	bne.w	408cea <_realloc_r+0x5a>
  408e54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408e58:	eba9 0a01 	sub.w	sl, r9, r1
  408e5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408e60:	f021 0103 	bic.w	r1, r1, #3
  408e64:	448b      	add	fp, r1
  408e66:	4558      	cmp	r0, fp
  408e68:	dce2      	bgt.n	408e30 <_realloc_r+0x1a0>
  408e6a:	4656      	mov	r6, sl
  408e6c:	f8da 100c 	ldr.w	r1, [sl, #12]
  408e70:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408e74:	1f22      	subs	r2, r4, #4
  408e76:	2a24      	cmp	r2, #36	; 0x24
  408e78:	60c1      	str	r1, [r0, #12]
  408e7a:	6088      	str	r0, [r1, #8]
  408e7c:	f200 808f 	bhi.w	408f9e <_realloc_r+0x30e>
  408e80:	2a13      	cmp	r2, #19
  408e82:	f240 808a 	bls.w	408f9a <_realloc_r+0x30a>
  408e86:	6829      	ldr	r1, [r5, #0]
  408e88:	f8ca 1008 	str.w	r1, [sl, #8]
  408e8c:	6869      	ldr	r1, [r5, #4]
  408e8e:	f8ca 100c 	str.w	r1, [sl, #12]
  408e92:	2a1b      	cmp	r2, #27
  408e94:	f200 808a 	bhi.w	408fac <_realloc_r+0x31c>
  408e98:	3508      	adds	r5, #8
  408e9a:	f10a 0210 	add.w	r2, sl, #16
  408e9e:	6829      	ldr	r1, [r5, #0]
  408ea0:	6011      	str	r1, [r2, #0]
  408ea2:	6869      	ldr	r1, [r5, #4]
  408ea4:	6051      	str	r1, [r2, #4]
  408ea6:	68a9      	ldr	r1, [r5, #8]
  408ea8:	6091      	str	r1, [r2, #8]
  408eaa:	eb0a 0107 	add.w	r1, sl, r7
  408eae:	ebab 0207 	sub.w	r2, fp, r7
  408eb2:	f042 0201 	orr.w	r2, r2, #1
  408eb6:	6099      	str	r1, [r3, #8]
  408eb8:	604a      	str	r2, [r1, #4]
  408eba:	f8da 3004 	ldr.w	r3, [sl, #4]
  408ebe:	f003 0301 	and.w	r3, r3, #1
  408ec2:	431f      	orrs	r7, r3
  408ec4:	4640      	mov	r0, r8
  408ec6:	f8ca 7004 	str.w	r7, [sl, #4]
  408eca:	f7ff fedb 	bl	408c84 <__malloc_unlock>
  408ece:	e751      	b.n	408d74 <_realloc_r+0xe4>
  408ed0:	682b      	ldr	r3, [r5, #0]
  408ed2:	6003      	str	r3, [r0, #0]
  408ed4:	686b      	ldr	r3, [r5, #4]
  408ed6:	6043      	str	r3, [r0, #4]
  408ed8:	2a1b      	cmp	r2, #27
  408eda:	d82d      	bhi.n	408f38 <_realloc_r+0x2a8>
  408edc:	f100 0308 	add.w	r3, r0, #8
  408ee0:	f105 0208 	add.w	r2, r5, #8
  408ee4:	e71b      	b.n	408d1e <_realloc_r+0x8e>
  408ee6:	4632      	mov	r2, r6
  408ee8:	6829      	ldr	r1, [r5, #0]
  408eea:	6011      	str	r1, [r2, #0]
  408eec:	6869      	ldr	r1, [r5, #4]
  408eee:	6051      	str	r1, [r2, #4]
  408ef0:	68a9      	ldr	r1, [r5, #8]
  408ef2:	6091      	str	r1, [r2, #8]
  408ef4:	461c      	mov	r4, r3
  408ef6:	46d1      	mov	r9, sl
  408ef8:	e72a      	b.n	408d50 <_realloc_r+0xc0>
  408efa:	eb09 0107 	add.w	r1, r9, r7
  408efe:	ebab 0b07 	sub.w	fp, fp, r7
  408f02:	f04b 0201 	orr.w	r2, fp, #1
  408f06:	6099      	str	r1, [r3, #8]
  408f08:	604a      	str	r2, [r1, #4]
  408f0a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408f0e:	f003 0301 	and.w	r3, r3, #1
  408f12:	431f      	orrs	r7, r3
  408f14:	4640      	mov	r0, r8
  408f16:	f845 7c04 	str.w	r7, [r5, #-4]
  408f1a:	f7ff feb3 	bl	408c84 <__malloc_unlock>
  408f1e:	462e      	mov	r6, r5
  408f20:	e728      	b.n	408d74 <_realloc_r+0xe4>
  408f22:	4629      	mov	r1, r5
  408f24:	f7ff fe44 	bl	408bb0 <memmove>
  408f28:	e6ff      	b.n	408d2a <_realloc_r+0x9a>
  408f2a:	4629      	mov	r1, r5
  408f2c:	4630      	mov	r0, r6
  408f2e:	461c      	mov	r4, r3
  408f30:	46d1      	mov	r9, sl
  408f32:	f7ff fe3d 	bl	408bb0 <memmove>
  408f36:	e70b      	b.n	408d50 <_realloc_r+0xc0>
  408f38:	68ab      	ldr	r3, [r5, #8]
  408f3a:	6083      	str	r3, [r0, #8]
  408f3c:	68eb      	ldr	r3, [r5, #12]
  408f3e:	60c3      	str	r3, [r0, #12]
  408f40:	2a24      	cmp	r2, #36	; 0x24
  408f42:	d017      	beq.n	408f74 <_realloc_r+0x2e4>
  408f44:	f100 0310 	add.w	r3, r0, #16
  408f48:	f105 0210 	add.w	r2, r5, #16
  408f4c:	e6e7      	b.n	408d1e <_realloc_r+0x8e>
  408f4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408f52:	f023 0303 	bic.w	r3, r3, #3
  408f56:	441c      	add	r4, r3
  408f58:	462e      	mov	r6, r5
  408f5a:	e6f9      	b.n	408d50 <_realloc_r+0xc0>
  408f5c:	68a9      	ldr	r1, [r5, #8]
  408f5e:	f8ca 1010 	str.w	r1, [sl, #16]
  408f62:	68e9      	ldr	r1, [r5, #12]
  408f64:	f8ca 1014 	str.w	r1, [sl, #20]
  408f68:	2a24      	cmp	r2, #36	; 0x24
  408f6a:	d00c      	beq.n	408f86 <_realloc_r+0x2f6>
  408f6c:	3510      	adds	r5, #16
  408f6e:	f10a 0218 	add.w	r2, sl, #24
  408f72:	e7b9      	b.n	408ee8 <_realloc_r+0x258>
  408f74:	692b      	ldr	r3, [r5, #16]
  408f76:	6103      	str	r3, [r0, #16]
  408f78:	696b      	ldr	r3, [r5, #20]
  408f7a:	6143      	str	r3, [r0, #20]
  408f7c:	f105 0218 	add.w	r2, r5, #24
  408f80:	f100 0318 	add.w	r3, r0, #24
  408f84:	e6cb      	b.n	408d1e <_realloc_r+0x8e>
  408f86:	692a      	ldr	r2, [r5, #16]
  408f88:	f8ca 2018 	str.w	r2, [sl, #24]
  408f8c:	696a      	ldr	r2, [r5, #20]
  408f8e:	f8ca 201c 	str.w	r2, [sl, #28]
  408f92:	3518      	adds	r5, #24
  408f94:	f10a 0220 	add.w	r2, sl, #32
  408f98:	e7a6      	b.n	408ee8 <_realloc_r+0x258>
  408f9a:	4632      	mov	r2, r6
  408f9c:	e77f      	b.n	408e9e <_realloc_r+0x20e>
  408f9e:	4629      	mov	r1, r5
  408fa0:	4630      	mov	r0, r6
  408fa2:	9301      	str	r3, [sp, #4]
  408fa4:	f7ff fe04 	bl	408bb0 <memmove>
  408fa8:	9b01      	ldr	r3, [sp, #4]
  408faa:	e77e      	b.n	408eaa <_realloc_r+0x21a>
  408fac:	68a9      	ldr	r1, [r5, #8]
  408fae:	f8ca 1010 	str.w	r1, [sl, #16]
  408fb2:	68e9      	ldr	r1, [r5, #12]
  408fb4:	f8ca 1014 	str.w	r1, [sl, #20]
  408fb8:	2a24      	cmp	r2, #36	; 0x24
  408fba:	d003      	beq.n	408fc4 <_realloc_r+0x334>
  408fbc:	3510      	adds	r5, #16
  408fbe:	f10a 0218 	add.w	r2, sl, #24
  408fc2:	e76c      	b.n	408e9e <_realloc_r+0x20e>
  408fc4:	692a      	ldr	r2, [r5, #16]
  408fc6:	f8ca 2018 	str.w	r2, [sl, #24]
  408fca:	696a      	ldr	r2, [r5, #20]
  408fcc:	f8ca 201c 	str.w	r2, [sl, #28]
  408fd0:	3518      	adds	r5, #24
  408fd2:	f10a 0220 	add.w	r2, sl, #32
  408fd6:	e762      	b.n	408e9e <_realloc_r+0x20e>
  408fd8:	204005c0 	.word	0x204005c0

00408fdc <_sbrk_r>:
  408fdc:	b538      	push	{r3, r4, r5, lr}
  408fde:	4c07      	ldr	r4, [pc, #28]	; (408ffc <_sbrk_r+0x20>)
  408fe0:	2300      	movs	r3, #0
  408fe2:	4605      	mov	r5, r0
  408fe4:	4608      	mov	r0, r1
  408fe6:	6023      	str	r3, [r4, #0]
  408fe8:	f7fc fd78 	bl	405adc <_sbrk>
  408fec:	1c43      	adds	r3, r0, #1
  408fee:	d000      	beq.n	408ff2 <_sbrk_r+0x16>
  408ff0:	bd38      	pop	{r3, r4, r5, pc}
  408ff2:	6823      	ldr	r3, [r4, #0]
  408ff4:	2b00      	cmp	r3, #0
  408ff6:	d0fb      	beq.n	408ff0 <_sbrk_r+0x14>
  408ff8:	602b      	str	r3, [r5, #0]
  408ffa:	bd38      	pop	{r3, r4, r5, pc}
  408ffc:	2040d050 	.word	0x2040d050

00409000 <__sread>:
  409000:	b510      	push	{r4, lr}
  409002:	460c      	mov	r4, r1
  409004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409008:	f000 fa6a 	bl	4094e0 <_read_r>
  40900c:	2800      	cmp	r0, #0
  40900e:	db03      	blt.n	409018 <__sread+0x18>
  409010:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409012:	4403      	add	r3, r0
  409014:	6523      	str	r3, [r4, #80]	; 0x50
  409016:	bd10      	pop	{r4, pc}
  409018:	89a3      	ldrh	r3, [r4, #12]
  40901a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40901e:	81a3      	strh	r3, [r4, #12]
  409020:	bd10      	pop	{r4, pc}
  409022:	bf00      	nop

00409024 <__swrite>:
  409024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409028:	4616      	mov	r6, r2
  40902a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40902e:	461f      	mov	r7, r3
  409030:	05d3      	lsls	r3, r2, #23
  409032:	460c      	mov	r4, r1
  409034:	4605      	mov	r5, r0
  409036:	d507      	bpl.n	409048 <__swrite+0x24>
  409038:	2200      	movs	r2, #0
  40903a:	2302      	movs	r3, #2
  40903c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409040:	f000 fa38 	bl	4094b4 <_lseek_r>
  409044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40904c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409050:	81a2      	strh	r2, [r4, #12]
  409052:	463b      	mov	r3, r7
  409054:	4632      	mov	r2, r6
  409056:	4628      	mov	r0, r5
  409058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40905c:	f000 b918 	b.w	409290 <_write_r>

00409060 <__sseek>:
  409060:	b510      	push	{r4, lr}
  409062:	460c      	mov	r4, r1
  409064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409068:	f000 fa24 	bl	4094b4 <_lseek_r>
  40906c:	89a3      	ldrh	r3, [r4, #12]
  40906e:	1c42      	adds	r2, r0, #1
  409070:	bf0e      	itee	eq
  409072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40907a:	6520      	strne	r0, [r4, #80]	; 0x50
  40907c:	81a3      	strh	r3, [r4, #12]
  40907e:	bd10      	pop	{r4, pc}

00409080 <__sclose>:
  409080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409084:	f000 b97c 	b.w	409380 <_close_r>

00409088 <strchr>:
  409088:	b2c9      	uxtb	r1, r1
  40908a:	2900      	cmp	r1, #0
  40908c:	d041      	beq.n	409112 <strchr+0x8a>
  40908e:	0782      	lsls	r2, r0, #30
  409090:	b4f0      	push	{r4, r5, r6, r7}
  409092:	d067      	beq.n	409164 <strchr+0xdc>
  409094:	7803      	ldrb	r3, [r0, #0]
  409096:	2b00      	cmp	r3, #0
  409098:	d068      	beq.n	40916c <strchr+0xe4>
  40909a:	4299      	cmp	r1, r3
  40909c:	d037      	beq.n	40910e <strchr+0x86>
  40909e:	1c43      	adds	r3, r0, #1
  4090a0:	e004      	b.n	4090ac <strchr+0x24>
  4090a2:	f813 0b01 	ldrb.w	r0, [r3], #1
  4090a6:	b390      	cbz	r0, 40910e <strchr+0x86>
  4090a8:	4281      	cmp	r1, r0
  4090aa:	d02f      	beq.n	40910c <strchr+0x84>
  4090ac:	079a      	lsls	r2, r3, #30
  4090ae:	461c      	mov	r4, r3
  4090b0:	d1f7      	bne.n	4090a2 <strchr+0x1a>
  4090b2:	6825      	ldr	r5, [r4, #0]
  4090b4:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4090b8:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4090bc:	ea83 0605 	eor.w	r6, r3, r5
  4090c0:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4090c4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4090c8:	ea20 0006 	bic.w	r0, r0, r6
  4090cc:	ea22 0205 	bic.w	r2, r2, r5
  4090d0:	4302      	orrs	r2, r0
  4090d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4090d6:	d111      	bne.n	4090fc <strchr+0x74>
  4090d8:	4620      	mov	r0, r4
  4090da:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4090de:	ea83 0706 	eor.w	r7, r3, r6
  4090e2:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4090e6:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4090ea:	ea25 0507 	bic.w	r5, r5, r7
  4090ee:	ea22 0206 	bic.w	r2, r2, r6
  4090f2:	432a      	orrs	r2, r5
  4090f4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4090f8:	d0ef      	beq.n	4090da <strchr+0x52>
  4090fa:	4604      	mov	r4, r0
  4090fc:	7820      	ldrb	r0, [r4, #0]
  4090fe:	b918      	cbnz	r0, 409108 <strchr+0x80>
  409100:	e005      	b.n	40910e <strchr+0x86>
  409102:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  409106:	b110      	cbz	r0, 40910e <strchr+0x86>
  409108:	4281      	cmp	r1, r0
  40910a:	d1fa      	bne.n	409102 <strchr+0x7a>
  40910c:	4620      	mov	r0, r4
  40910e:	bcf0      	pop	{r4, r5, r6, r7}
  409110:	4770      	bx	lr
  409112:	0783      	lsls	r3, r0, #30
  409114:	d024      	beq.n	409160 <strchr+0xd8>
  409116:	7803      	ldrb	r3, [r0, #0]
  409118:	2b00      	cmp	r3, #0
  40911a:	d0f9      	beq.n	409110 <strchr+0x88>
  40911c:	1c43      	adds	r3, r0, #1
  40911e:	e003      	b.n	409128 <strchr+0xa0>
  409120:	7802      	ldrb	r2, [r0, #0]
  409122:	3301      	adds	r3, #1
  409124:	2a00      	cmp	r2, #0
  409126:	d0f3      	beq.n	409110 <strchr+0x88>
  409128:	0799      	lsls	r1, r3, #30
  40912a:	4618      	mov	r0, r3
  40912c:	d1f8      	bne.n	409120 <strchr+0x98>
  40912e:	6819      	ldr	r1, [r3, #0]
  409130:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  409134:	ea22 0201 	bic.w	r2, r2, r1
  409138:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40913c:	d108      	bne.n	409150 <strchr+0xc8>
  40913e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  409142:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  409146:	ea22 0201 	bic.w	r2, r2, r1
  40914a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40914e:	d0f6      	beq.n	40913e <strchr+0xb6>
  409150:	781a      	ldrb	r2, [r3, #0]
  409152:	4618      	mov	r0, r3
  409154:	b142      	cbz	r2, 409168 <strchr+0xe0>
  409156:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40915a:	2b00      	cmp	r3, #0
  40915c:	d1fb      	bne.n	409156 <strchr+0xce>
  40915e:	4770      	bx	lr
  409160:	4603      	mov	r3, r0
  409162:	e7e4      	b.n	40912e <strchr+0xa6>
  409164:	4604      	mov	r4, r0
  409166:	e7a4      	b.n	4090b2 <strchr+0x2a>
  409168:	4618      	mov	r0, r3
  40916a:	4770      	bx	lr
  40916c:	4618      	mov	r0, r3
  40916e:	e7ce      	b.n	40910e <strchr+0x86>

00409170 <__swbuf_r>:
  409170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409172:	460d      	mov	r5, r1
  409174:	4614      	mov	r4, r2
  409176:	4606      	mov	r6, r0
  409178:	b110      	cbz	r0, 409180 <__swbuf_r+0x10>
  40917a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40917c:	2b00      	cmp	r3, #0
  40917e:	d04b      	beq.n	409218 <__swbuf_r+0xa8>
  409180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409184:	69a3      	ldr	r3, [r4, #24]
  409186:	60a3      	str	r3, [r4, #8]
  409188:	b291      	uxth	r1, r2
  40918a:	0708      	lsls	r0, r1, #28
  40918c:	d539      	bpl.n	409202 <__swbuf_r+0x92>
  40918e:	6923      	ldr	r3, [r4, #16]
  409190:	2b00      	cmp	r3, #0
  409192:	d036      	beq.n	409202 <__swbuf_r+0x92>
  409194:	b2ed      	uxtb	r5, r5
  409196:	0489      	lsls	r1, r1, #18
  409198:	462f      	mov	r7, r5
  40919a:	d515      	bpl.n	4091c8 <__swbuf_r+0x58>
  40919c:	6822      	ldr	r2, [r4, #0]
  40919e:	6961      	ldr	r1, [r4, #20]
  4091a0:	1ad3      	subs	r3, r2, r3
  4091a2:	428b      	cmp	r3, r1
  4091a4:	da1c      	bge.n	4091e0 <__swbuf_r+0x70>
  4091a6:	3301      	adds	r3, #1
  4091a8:	68a1      	ldr	r1, [r4, #8]
  4091aa:	1c50      	adds	r0, r2, #1
  4091ac:	3901      	subs	r1, #1
  4091ae:	60a1      	str	r1, [r4, #8]
  4091b0:	6020      	str	r0, [r4, #0]
  4091b2:	7015      	strb	r5, [r2, #0]
  4091b4:	6962      	ldr	r2, [r4, #20]
  4091b6:	429a      	cmp	r2, r3
  4091b8:	d01a      	beq.n	4091f0 <__swbuf_r+0x80>
  4091ba:	89a3      	ldrh	r3, [r4, #12]
  4091bc:	07db      	lsls	r3, r3, #31
  4091be:	d501      	bpl.n	4091c4 <__swbuf_r+0x54>
  4091c0:	2d0a      	cmp	r5, #10
  4091c2:	d015      	beq.n	4091f0 <__swbuf_r+0x80>
  4091c4:	4638      	mov	r0, r7
  4091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4091c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4091ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4091ce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4091d2:	81a2      	strh	r2, [r4, #12]
  4091d4:	6822      	ldr	r2, [r4, #0]
  4091d6:	6661      	str	r1, [r4, #100]	; 0x64
  4091d8:	6961      	ldr	r1, [r4, #20]
  4091da:	1ad3      	subs	r3, r2, r3
  4091dc:	428b      	cmp	r3, r1
  4091de:	dbe2      	blt.n	4091a6 <__swbuf_r+0x36>
  4091e0:	4621      	mov	r1, r4
  4091e2:	4630      	mov	r0, r6
  4091e4:	f7fe fcfc 	bl	407be0 <_fflush_r>
  4091e8:	b940      	cbnz	r0, 4091fc <__swbuf_r+0x8c>
  4091ea:	6822      	ldr	r2, [r4, #0]
  4091ec:	2301      	movs	r3, #1
  4091ee:	e7db      	b.n	4091a8 <__swbuf_r+0x38>
  4091f0:	4621      	mov	r1, r4
  4091f2:	4630      	mov	r0, r6
  4091f4:	f7fe fcf4 	bl	407be0 <_fflush_r>
  4091f8:	2800      	cmp	r0, #0
  4091fa:	d0e3      	beq.n	4091c4 <__swbuf_r+0x54>
  4091fc:	f04f 37ff 	mov.w	r7, #4294967295
  409200:	e7e0      	b.n	4091c4 <__swbuf_r+0x54>
  409202:	4621      	mov	r1, r4
  409204:	4630      	mov	r0, r6
  409206:	f7fe fbd7 	bl	4079b8 <__swsetup_r>
  40920a:	2800      	cmp	r0, #0
  40920c:	d1f6      	bne.n	4091fc <__swbuf_r+0x8c>
  40920e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409212:	6923      	ldr	r3, [r4, #16]
  409214:	b291      	uxth	r1, r2
  409216:	e7bd      	b.n	409194 <__swbuf_r+0x24>
  409218:	f7fe fd3a 	bl	407c90 <__sinit>
  40921c:	e7b0      	b.n	409180 <__swbuf_r+0x10>
  40921e:	bf00      	nop

00409220 <_wcrtomb_r>:
  409220:	b5f0      	push	{r4, r5, r6, r7, lr}
  409222:	4606      	mov	r6, r0
  409224:	b085      	sub	sp, #20
  409226:	461f      	mov	r7, r3
  409228:	b189      	cbz	r1, 40924e <_wcrtomb_r+0x2e>
  40922a:	4c10      	ldr	r4, [pc, #64]	; (40926c <_wcrtomb_r+0x4c>)
  40922c:	4d10      	ldr	r5, [pc, #64]	; (409270 <_wcrtomb_r+0x50>)
  40922e:	6824      	ldr	r4, [r4, #0]
  409230:	6b64      	ldr	r4, [r4, #52]	; 0x34
  409232:	2c00      	cmp	r4, #0
  409234:	bf08      	it	eq
  409236:	462c      	moveq	r4, r5
  409238:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40923c:	47a0      	blx	r4
  40923e:	1c43      	adds	r3, r0, #1
  409240:	d103      	bne.n	40924a <_wcrtomb_r+0x2a>
  409242:	2200      	movs	r2, #0
  409244:	238a      	movs	r3, #138	; 0x8a
  409246:	603a      	str	r2, [r7, #0]
  409248:	6033      	str	r3, [r6, #0]
  40924a:	b005      	add	sp, #20
  40924c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40924e:	460c      	mov	r4, r1
  409250:	4906      	ldr	r1, [pc, #24]	; (40926c <_wcrtomb_r+0x4c>)
  409252:	4a07      	ldr	r2, [pc, #28]	; (409270 <_wcrtomb_r+0x50>)
  409254:	6809      	ldr	r1, [r1, #0]
  409256:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409258:	2900      	cmp	r1, #0
  40925a:	bf08      	it	eq
  40925c:	4611      	moveq	r1, r2
  40925e:	4622      	mov	r2, r4
  409260:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409264:	a901      	add	r1, sp, #4
  409266:	47a0      	blx	r4
  409268:	e7e9      	b.n	40923e <_wcrtomb_r+0x1e>
  40926a:	bf00      	nop
  40926c:	20400024 	.word	0x20400024
  409270:	20400454 	.word	0x20400454

00409274 <__ascii_wctomb>:
  409274:	b121      	cbz	r1, 409280 <__ascii_wctomb+0xc>
  409276:	2aff      	cmp	r2, #255	; 0xff
  409278:	d804      	bhi.n	409284 <__ascii_wctomb+0x10>
  40927a:	700a      	strb	r2, [r1, #0]
  40927c:	2001      	movs	r0, #1
  40927e:	4770      	bx	lr
  409280:	4608      	mov	r0, r1
  409282:	4770      	bx	lr
  409284:	238a      	movs	r3, #138	; 0x8a
  409286:	6003      	str	r3, [r0, #0]
  409288:	f04f 30ff 	mov.w	r0, #4294967295
  40928c:	4770      	bx	lr
  40928e:	bf00      	nop

00409290 <_write_r>:
  409290:	b570      	push	{r4, r5, r6, lr}
  409292:	460d      	mov	r5, r1
  409294:	4c08      	ldr	r4, [pc, #32]	; (4092b8 <_write_r+0x28>)
  409296:	4611      	mov	r1, r2
  409298:	4606      	mov	r6, r0
  40929a:	461a      	mov	r2, r3
  40929c:	4628      	mov	r0, r5
  40929e:	2300      	movs	r3, #0
  4092a0:	6023      	str	r3, [r4, #0]
  4092a2:	f7fb fd91 	bl	404dc8 <_write>
  4092a6:	1c43      	adds	r3, r0, #1
  4092a8:	d000      	beq.n	4092ac <_write_r+0x1c>
  4092aa:	bd70      	pop	{r4, r5, r6, pc}
  4092ac:	6823      	ldr	r3, [r4, #0]
  4092ae:	2b00      	cmp	r3, #0
  4092b0:	d0fb      	beq.n	4092aa <_write_r+0x1a>
  4092b2:	6033      	str	r3, [r6, #0]
  4092b4:	bd70      	pop	{r4, r5, r6, pc}
  4092b6:	bf00      	nop
  4092b8:	2040d050 	.word	0x2040d050

004092bc <__register_exitproc>:
  4092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4092c0:	4d2c      	ldr	r5, [pc, #176]	; (409374 <__register_exitproc+0xb8>)
  4092c2:	4606      	mov	r6, r0
  4092c4:	6828      	ldr	r0, [r5, #0]
  4092c6:	4698      	mov	r8, r3
  4092c8:	460f      	mov	r7, r1
  4092ca:	4691      	mov	r9, r2
  4092cc:	f7ff f8a0 	bl	408410 <__retarget_lock_acquire_recursive>
  4092d0:	4b29      	ldr	r3, [pc, #164]	; (409378 <__register_exitproc+0xbc>)
  4092d2:	681c      	ldr	r4, [r3, #0]
  4092d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4092d8:	2b00      	cmp	r3, #0
  4092da:	d03e      	beq.n	40935a <__register_exitproc+0x9e>
  4092dc:	685a      	ldr	r2, [r3, #4]
  4092de:	2a1f      	cmp	r2, #31
  4092e0:	dc1c      	bgt.n	40931c <__register_exitproc+0x60>
  4092e2:	f102 0e01 	add.w	lr, r2, #1
  4092e6:	b176      	cbz	r6, 409306 <__register_exitproc+0x4a>
  4092e8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4092ec:	2401      	movs	r4, #1
  4092ee:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4092f2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4092f6:	4094      	lsls	r4, r2
  4092f8:	4320      	orrs	r0, r4
  4092fa:	2e02      	cmp	r6, #2
  4092fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409300:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409304:	d023      	beq.n	40934e <__register_exitproc+0x92>
  409306:	3202      	adds	r2, #2
  409308:	f8c3 e004 	str.w	lr, [r3, #4]
  40930c:	6828      	ldr	r0, [r5, #0]
  40930e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409312:	f7ff f87f 	bl	408414 <__retarget_lock_release_recursive>
  409316:	2000      	movs	r0, #0
  409318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40931c:	4b17      	ldr	r3, [pc, #92]	; (40937c <__register_exitproc+0xc0>)
  40931e:	b30b      	cbz	r3, 409364 <__register_exitproc+0xa8>
  409320:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409324:	f7ff f8f0 	bl	408508 <malloc>
  409328:	4603      	mov	r3, r0
  40932a:	b1d8      	cbz	r0, 409364 <__register_exitproc+0xa8>
  40932c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409330:	6002      	str	r2, [r0, #0]
  409332:	2100      	movs	r1, #0
  409334:	6041      	str	r1, [r0, #4]
  409336:	460a      	mov	r2, r1
  409338:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40933c:	f04f 0e01 	mov.w	lr, #1
  409340:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409344:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409348:	2e00      	cmp	r6, #0
  40934a:	d0dc      	beq.n	409306 <__register_exitproc+0x4a>
  40934c:	e7cc      	b.n	4092e8 <__register_exitproc+0x2c>
  40934e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409352:	430c      	orrs	r4, r1
  409354:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409358:	e7d5      	b.n	409306 <__register_exitproc+0x4a>
  40935a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40935e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409362:	e7bb      	b.n	4092dc <__register_exitproc+0x20>
  409364:	6828      	ldr	r0, [r5, #0]
  409366:	f7ff f855 	bl	408414 <__retarget_lock_release_recursive>
  40936a:	f04f 30ff 	mov.w	r0, #4294967295
  40936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409372:	bf00      	nop
  409374:	20400450 	.word	0x20400450
  409378:	0040a7ec 	.word	0x0040a7ec
  40937c:	00408509 	.word	0x00408509

00409380 <_close_r>:
  409380:	b538      	push	{r3, r4, r5, lr}
  409382:	4c07      	ldr	r4, [pc, #28]	; (4093a0 <_close_r+0x20>)
  409384:	2300      	movs	r3, #0
  409386:	4605      	mov	r5, r0
  409388:	4608      	mov	r0, r1
  40938a:	6023      	str	r3, [r4, #0]
  40938c:	f7fc fbc2 	bl	405b14 <_close>
  409390:	1c43      	adds	r3, r0, #1
  409392:	d000      	beq.n	409396 <_close_r+0x16>
  409394:	bd38      	pop	{r3, r4, r5, pc}
  409396:	6823      	ldr	r3, [r4, #0]
  409398:	2b00      	cmp	r3, #0
  40939a:	d0fb      	beq.n	409394 <_close_r+0x14>
  40939c:	602b      	str	r3, [r5, #0]
  40939e:	bd38      	pop	{r3, r4, r5, pc}
  4093a0:	2040d050 	.word	0x2040d050

004093a4 <_fclose_r>:
  4093a4:	b570      	push	{r4, r5, r6, lr}
  4093a6:	b159      	cbz	r1, 4093c0 <_fclose_r+0x1c>
  4093a8:	4605      	mov	r5, r0
  4093aa:	460c      	mov	r4, r1
  4093ac:	b110      	cbz	r0, 4093b4 <_fclose_r+0x10>
  4093ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4093b0:	2b00      	cmp	r3, #0
  4093b2:	d03c      	beq.n	40942e <_fclose_r+0x8a>
  4093b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4093b6:	07d8      	lsls	r0, r3, #31
  4093b8:	d505      	bpl.n	4093c6 <_fclose_r+0x22>
  4093ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4093be:	b92b      	cbnz	r3, 4093cc <_fclose_r+0x28>
  4093c0:	2600      	movs	r6, #0
  4093c2:	4630      	mov	r0, r6
  4093c4:	bd70      	pop	{r4, r5, r6, pc}
  4093c6:	89a3      	ldrh	r3, [r4, #12]
  4093c8:	0599      	lsls	r1, r3, #22
  4093ca:	d53c      	bpl.n	409446 <_fclose_r+0xa2>
  4093cc:	4621      	mov	r1, r4
  4093ce:	4628      	mov	r0, r5
  4093d0:	f7fe fb66 	bl	407aa0 <__sflush_r>
  4093d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4093d6:	4606      	mov	r6, r0
  4093d8:	b133      	cbz	r3, 4093e8 <_fclose_r+0x44>
  4093da:	69e1      	ldr	r1, [r4, #28]
  4093dc:	4628      	mov	r0, r5
  4093de:	4798      	blx	r3
  4093e0:	2800      	cmp	r0, #0
  4093e2:	bfb8      	it	lt
  4093e4:	f04f 36ff 	movlt.w	r6, #4294967295
  4093e8:	89a3      	ldrh	r3, [r4, #12]
  4093ea:	061a      	lsls	r2, r3, #24
  4093ec:	d422      	bmi.n	409434 <_fclose_r+0x90>
  4093ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4093f0:	b141      	cbz	r1, 409404 <_fclose_r+0x60>
  4093f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4093f6:	4299      	cmp	r1, r3
  4093f8:	d002      	beq.n	409400 <_fclose_r+0x5c>
  4093fa:	4628      	mov	r0, r5
  4093fc:	f7fe fd6e 	bl	407edc <_free_r>
  409400:	2300      	movs	r3, #0
  409402:	6323      	str	r3, [r4, #48]	; 0x30
  409404:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409406:	b121      	cbz	r1, 409412 <_fclose_r+0x6e>
  409408:	4628      	mov	r0, r5
  40940a:	f7fe fd67 	bl	407edc <_free_r>
  40940e:	2300      	movs	r3, #0
  409410:	6463      	str	r3, [r4, #68]	; 0x44
  409412:	f7fe fc69 	bl	407ce8 <__sfp_lock_acquire>
  409416:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409418:	2200      	movs	r2, #0
  40941a:	07db      	lsls	r3, r3, #31
  40941c:	81a2      	strh	r2, [r4, #12]
  40941e:	d50e      	bpl.n	40943e <_fclose_r+0x9a>
  409420:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409422:	f7fe fff3 	bl	40840c <__retarget_lock_close_recursive>
  409426:	f7fe fc65 	bl	407cf4 <__sfp_lock_release>
  40942a:	4630      	mov	r0, r6
  40942c:	bd70      	pop	{r4, r5, r6, pc}
  40942e:	f7fe fc2f 	bl	407c90 <__sinit>
  409432:	e7bf      	b.n	4093b4 <_fclose_r+0x10>
  409434:	6921      	ldr	r1, [r4, #16]
  409436:	4628      	mov	r0, r5
  409438:	f7fe fd50 	bl	407edc <_free_r>
  40943c:	e7d7      	b.n	4093ee <_fclose_r+0x4a>
  40943e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409440:	f7fe ffe8 	bl	408414 <__retarget_lock_release_recursive>
  409444:	e7ec      	b.n	409420 <_fclose_r+0x7c>
  409446:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409448:	f7fe ffe2 	bl	408410 <__retarget_lock_acquire_recursive>
  40944c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409450:	2b00      	cmp	r3, #0
  409452:	d1bb      	bne.n	4093cc <_fclose_r+0x28>
  409454:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409456:	f016 0601 	ands.w	r6, r6, #1
  40945a:	d1b1      	bne.n	4093c0 <_fclose_r+0x1c>
  40945c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40945e:	f7fe ffd9 	bl	408414 <__retarget_lock_release_recursive>
  409462:	4630      	mov	r0, r6
  409464:	bd70      	pop	{r4, r5, r6, pc}
  409466:	bf00      	nop

00409468 <_fstat_r>:
  409468:	b538      	push	{r3, r4, r5, lr}
  40946a:	460b      	mov	r3, r1
  40946c:	4c07      	ldr	r4, [pc, #28]	; (40948c <_fstat_r+0x24>)
  40946e:	4605      	mov	r5, r0
  409470:	4611      	mov	r1, r2
  409472:	4618      	mov	r0, r3
  409474:	2300      	movs	r3, #0
  409476:	6023      	str	r3, [r4, #0]
  409478:	f7fc fb4f 	bl	405b1a <_fstat>
  40947c:	1c43      	adds	r3, r0, #1
  40947e:	d000      	beq.n	409482 <_fstat_r+0x1a>
  409480:	bd38      	pop	{r3, r4, r5, pc}
  409482:	6823      	ldr	r3, [r4, #0]
  409484:	2b00      	cmp	r3, #0
  409486:	d0fb      	beq.n	409480 <_fstat_r+0x18>
  409488:	602b      	str	r3, [r5, #0]
  40948a:	bd38      	pop	{r3, r4, r5, pc}
  40948c:	2040d050 	.word	0x2040d050

00409490 <_isatty_r>:
  409490:	b538      	push	{r3, r4, r5, lr}
  409492:	4c07      	ldr	r4, [pc, #28]	; (4094b0 <_isatty_r+0x20>)
  409494:	2300      	movs	r3, #0
  409496:	4605      	mov	r5, r0
  409498:	4608      	mov	r0, r1
  40949a:	6023      	str	r3, [r4, #0]
  40949c:	f7fc fb42 	bl	405b24 <_isatty>
  4094a0:	1c43      	adds	r3, r0, #1
  4094a2:	d000      	beq.n	4094a6 <_isatty_r+0x16>
  4094a4:	bd38      	pop	{r3, r4, r5, pc}
  4094a6:	6823      	ldr	r3, [r4, #0]
  4094a8:	2b00      	cmp	r3, #0
  4094aa:	d0fb      	beq.n	4094a4 <_isatty_r+0x14>
  4094ac:	602b      	str	r3, [r5, #0]
  4094ae:	bd38      	pop	{r3, r4, r5, pc}
  4094b0:	2040d050 	.word	0x2040d050

004094b4 <_lseek_r>:
  4094b4:	b570      	push	{r4, r5, r6, lr}
  4094b6:	460d      	mov	r5, r1
  4094b8:	4c08      	ldr	r4, [pc, #32]	; (4094dc <_lseek_r+0x28>)
  4094ba:	4611      	mov	r1, r2
  4094bc:	4606      	mov	r6, r0
  4094be:	461a      	mov	r2, r3
  4094c0:	4628      	mov	r0, r5
  4094c2:	2300      	movs	r3, #0
  4094c4:	6023      	str	r3, [r4, #0]
  4094c6:	f7fc fb2f 	bl	405b28 <_lseek>
  4094ca:	1c43      	adds	r3, r0, #1
  4094cc:	d000      	beq.n	4094d0 <_lseek_r+0x1c>
  4094ce:	bd70      	pop	{r4, r5, r6, pc}
  4094d0:	6823      	ldr	r3, [r4, #0]
  4094d2:	2b00      	cmp	r3, #0
  4094d4:	d0fb      	beq.n	4094ce <_lseek_r+0x1a>
  4094d6:	6033      	str	r3, [r6, #0]
  4094d8:	bd70      	pop	{r4, r5, r6, pc}
  4094da:	bf00      	nop
  4094dc:	2040d050 	.word	0x2040d050

004094e0 <_read_r>:
  4094e0:	b570      	push	{r4, r5, r6, lr}
  4094e2:	460d      	mov	r5, r1
  4094e4:	4c08      	ldr	r4, [pc, #32]	; (409508 <_read_r+0x28>)
  4094e6:	4611      	mov	r1, r2
  4094e8:	4606      	mov	r6, r0
  4094ea:	461a      	mov	r2, r3
  4094ec:	4628      	mov	r0, r5
  4094ee:	2300      	movs	r3, #0
  4094f0:	6023      	str	r3, [r4, #0]
  4094f2:	f7fb fc4b 	bl	404d8c <_read>
  4094f6:	1c43      	adds	r3, r0, #1
  4094f8:	d000      	beq.n	4094fc <_read_r+0x1c>
  4094fa:	bd70      	pop	{r4, r5, r6, pc}
  4094fc:	6823      	ldr	r3, [r4, #0]
  4094fe:	2b00      	cmp	r3, #0
  409500:	d0fb      	beq.n	4094fa <_read_r+0x1a>
  409502:	6033      	str	r3, [r6, #0]
  409504:	bd70      	pop	{r4, r5, r6, pc}
  409506:	bf00      	nop
  409508:	2040d050 	.word	0x2040d050

0040950c <__aeabi_uldivmod>:
  40950c:	b953      	cbnz	r3, 409524 <__aeabi_uldivmod+0x18>
  40950e:	b94a      	cbnz	r2, 409524 <__aeabi_uldivmod+0x18>
  409510:	2900      	cmp	r1, #0
  409512:	bf08      	it	eq
  409514:	2800      	cmpeq	r0, #0
  409516:	bf1c      	itt	ne
  409518:	f04f 31ff 	movne.w	r1, #4294967295
  40951c:	f04f 30ff 	movne.w	r0, #4294967295
  409520:	f000 b97a 	b.w	409818 <__aeabi_idiv0>
  409524:	f1ad 0c08 	sub.w	ip, sp, #8
  409528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40952c:	f000 f806 	bl	40953c <__udivmoddi4>
  409530:	f8dd e004 	ldr.w	lr, [sp, #4]
  409534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409538:	b004      	add	sp, #16
  40953a:	4770      	bx	lr

0040953c <__udivmoddi4>:
  40953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409540:	468c      	mov	ip, r1
  409542:	460d      	mov	r5, r1
  409544:	4604      	mov	r4, r0
  409546:	9e08      	ldr	r6, [sp, #32]
  409548:	2b00      	cmp	r3, #0
  40954a:	d151      	bne.n	4095f0 <__udivmoddi4+0xb4>
  40954c:	428a      	cmp	r2, r1
  40954e:	4617      	mov	r7, r2
  409550:	d96d      	bls.n	40962e <__udivmoddi4+0xf2>
  409552:	fab2 fe82 	clz	lr, r2
  409556:	f1be 0f00 	cmp.w	lr, #0
  40955a:	d00b      	beq.n	409574 <__udivmoddi4+0x38>
  40955c:	f1ce 0c20 	rsb	ip, lr, #32
  409560:	fa01 f50e 	lsl.w	r5, r1, lr
  409564:	fa20 fc0c 	lsr.w	ip, r0, ip
  409568:	fa02 f70e 	lsl.w	r7, r2, lr
  40956c:	ea4c 0c05 	orr.w	ip, ip, r5
  409570:	fa00 f40e 	lsl.w	r4, r0, lr
  409574:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409578:	0c25      	lsrs	r5, r4, #16
  40957a:	fbbc f8fa 	udiv	r8, ip, sl
  40957e:	fa1f f987 	uxth.w	r9, r7
  409582:	fb0a cc18 	mls	ip, sl, r8, ip
  409586:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40958a:	fb08 f309 	mul.w	r3, r8, r9
  40958e:	42ab      	cmp	r3, r5
  409590:	d90a      	bls.n	4095a8 <__udivmoddi4+0x6c>
  409592:	19ed      	adds	r5, r5, r7
  409594:	f108 32ff 	add.w	r2, r8, #4294967295
  409598:	f080 8123 	bcs.w	4097e2 <__udivmoddi4+0x2a6>
  40959c:	42ab      	cmp	r3, r5
  40959e:	f240 8120 	bls.w	4097e2 <__udivmoddi4+0x2a6>
  4095a2:	f1a8 0802 	sub.w	r8, r8, #2
  4095a6:	443d      	add	r5, r7
  4095a8:	1aed      	subs	r5, r5, r3
  4095aa:	b2a4      	uxth	r4, r4
  4095ac:	fbb5 f0fa 	udiv	r0, r5, sl
  4095b0:	fb0a 5510 	mls	r5, sl, r0, r5
  4095b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4095b8:	fb00 f909 	mul.w	r9, r0, r9
  4095bc:	45a1      	cmp	r9, r4
  4095be:	d909      	bls.n	4095d4 <__udivmoddi4+0x98>
  4095c0:	19e4      	adds	r4, r4, r7
  4095c2:	f100 33ff 	add.w	r3, r0, #4294967295
  4095c6:	f080 810a 	bcs.w	4097de <__udivmoddi4+0x2a2>
  4095ca:	45a1      	cmp	r9, r4
  4095cc:	f240 8107 	bls.w	4097de <__udivmoddi4+0x2a2>
  4095d0:	3802      	subs	r0, #2
  4095d2:	443c      	add	r4, r7
  4095d4:	eba4 0409 	sub.w	r4, r4, r9
  4095d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4095dc:	2100      	movs	r1, #0
  4095de:	2e00      	cmp	r6, #0
  4095e0:	d061      	beq.n	4096a6 <__udivmoddi4+0x16a>
  4095e2:	fa24 f40e 	lsr.w	r4, r4, lr
  4095e6:	2300      	movs	r3, #0
  4095e8:	6034      	str	r4, [r6, #0]
  4095ea:	6073      	str	r3, [r6, #4]
  4095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4095f0:	428b      	cmp	r3, r1
  4095f2:	d907      	bls.n	409604 <__udivmoddi4+0xc8>
  4095f4:	2e00      	cmp	r6, #0
  4095f6:	d054      	beq.n	4096a2 <__udivmoddi4+0x166>
  4095f8:	2100      	movs	r1, #0
  4095fa:	e886 0021 	stmia.w	r6, {r0, r5}
  4095fe:	4608      	mov	r0, r1
  409600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409604:	fab3 f183 	clz	r1, r3
  409608:	2900      	cmp	r1, #0
  40960a:	f040 808e 	bne.w	40972a <__udivmoddi4+0x1ee>
  40960e:	42ab      	cmp	r3, r5
  409610:	d302      	bcc.n	409618 <__udivmoddi4+0xdc>
  409612:	4282      	cmp	r2, r0
  409614:	f200 80fa 	bhi.w	40980c <__udivmoddi4+0x2d0>
  409618:	1a84      	subs	r4, r0, r2
  40961a:	eb65 0503 	sbc.w	r5, r5, r3
  40961e:	2001      	movs	r0, #1
  409620:	46ac      	mov	ip, r5
  409622:	2e00      	cmp	r6, #0
  409624:	d03f      	beq.n	4096a6 <__udivmoddi4+0x16a>
  409626:	e886 1010 	stmia.w	r6, {r4, ip}
  40962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40962e:	b912      	cbnz	r2, 409636 <__udivmoddi4+0xfa>
  409630:	2701      	movs	r7, #1
  409632:	fbb7 f7f2 	udiv	r7, r7, r2
  409636:	fab7 fe87 	clz	lr, r7
  40963a:	f1be 0f00 	cmp.w	lr, #0
  40963e:	d134      	bne.n	4096aa <__udivmoddi4+0x16e>
  409640:	1beb      	subs	r3, r5, r7
  409642:	0c3a      	lsrs	r2, r7, #16
  409644:	fa1f fc87 	uxth.w	ip, r7
  409648:	2101      	movs	r1, #1
  40964a:	fbb3 f8f2 	udiv	r8, r3, r2
  40964e:	0c25      	lsrs	r5, r4, #16
  409650:	fb02 3318 	mls	r3, r2, r8, r3
  409654:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409658:	fb0c f308 	mul.w	r3, ip, r8
  40965c:	42ab      	cmp	r3, r5
  40965e:	d907      	bls.n	409670 <__udivmoddi4+0x134>
  409660:	19ed      	adds	r5, r5, r7
  409662:	f108 30ff 	add.w	r0, r8, #4294967295
  409666:	d202      	bcs.n	40966e <__udivmoddi4+0x132>
  409668:	42ab      	cmp	r3, r5
  40966a:	f200 80d1 	bhi.w	409810 <__udivmoddi4+0x2d4>
  40966e:	4680      	mov	r8, r0
  409670:	1aed      	subs	r5, r5, r3
  409672:	b2a3      	uxth	r3, r4
  409674:	fbb5 f0f2 	udiv	r0, r5, r2
  409678:	fb02 5510 	mls	r5, r2, r0, r5
  40967c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409680:	fb0c fc00 	mul.w	ip, ip, r0
  409684:	45a4      	cmp	ip, r4
  409686:	d907      	bls.n	409698 <__udivmoddi4+0x15c>
  409688:	19e4      	adds	r4, r4, r7
  40968a:	f100 33ff 	add.w	r3, r0, #4294967295
  40968e:	d202      	bcs.n	409696 <__udivmoddi4+0x15a>
  409690:	45a4      	cmp	ip, r4
  409692:	f200 80b8 	bhi.w	409806 <__udivmoddi4+0x2ca>
  409696:	4618      	mov	r0, r3
  409698:	eba4 040c 	sub.w	r4, r4, ip
  40969c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4096a0:	e79d      	b.n	4095de <__udivmoddi4+0xa2>
  4096a2:	4631      	mov	r1, r6
  4096a4:	4630      	mov	r0, r6
  4096a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4096aa:	f1ce 0420 	rsb	r4, lr, #32
  4096ae:	fa05 f30e 	lsl.w	r3, r5, lr
  4096b2:	fa07 f70e 	lsl.w	r7, r7, lr
  4096b6:	fa20 f804 	lsr.w	r8, r0, r4
  4096ba:	0c3a      	lsrs	r2, r7, #16
  4096bc:	fa25 f404 	lsr.w	r4, r5, r4
  4096c0:	ea48 0803 	orr.w	r8, r8, r3
  4096c4:	fbb4 f1f2 	udiv	r1, r4, r2
  4096c8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4096cc:	fb02 4411 	mls	r4, r2, r1, r4
  4096d0:	fa1f fc87 	uxth.w	ip, r7
  4096d4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4096d8:	fb01 f30c 	mul.w	r3, r1, ip
  4096dc:	42ab      	cmp	r3, r5
  4096de:	fa00 f40e 	lsl.w	r4, r0, lr
  4096e2:	d909      	bls.n	4096f8 <__udivmoddi4+0x1bc>
  4096e4:	19ed      	adds	r5, r5, r7
  4096e6:	f101 30ff 	add.w	r0, r1, #4294967295
  4096ea:	f080 808a 	bcs.w	409802 <__udivmoddi4+0x2c6>
  4096ee:	42ab      	cmp	r3, r5
  4096f0:	f240 8087 	bls.w	409802 <__udivmoddi4+0x2c6>
  4096f4:	3902      	subs	r1, #2
  4096f6:	443d      	add	r5, r7
  4096f8:	1aeb      	subs	r3, r5, r3
  4096fa:	fa1f f588 	uxth.w	r5, r8
  4096fe:	fbb3 f0f2 	udiv	r0, r3, r2
  409702:	fb02 3310 	mls	r3, r2, r0, r3
  409706:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40970a:	fb00 f30c 	mul.w	r3, r0, ip
  40970e:	42ab      	cmp	r3, r5
  409710:	d907      	bls.n	409722 <__udivmoddi4+0x1e6>
  409712:	19ed      	adds	r5, r5, r7
  409714:	f100 38ff 	add.w	r8, r0, #4294967295
  409718:	d26f      	bcs.n	4097fa <__udivmoddi4+0x2be>
  40971a:	42ab      	cmp	r3, r5
  40971c:	d96d      	bls.n	4097fa <__udivmoddi4+0x2be>
  40971e:	3802      	subs	r0, #2
  409720:	443d      	add	r5, r7
  409722:	1aeb      	subs	r3, r5, r3
  409724:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409728:	e78f      	b.n	40964a <__udivmoddi4+0x10e>
  40972a:	f1c1 0720 	rsb	r7, r1, #32
  40972e:	fa22 f807 	lsr.w	r8, r2, r7
  409732:	408b      	lsls	r3, r1
  409734:	fa05 f401 	lsl.w	r4, r5, r1
  409738:	ea48 0303 	orr.w	r3, r8, r3
  40973c:	fa20 fe07 	lsr.w	lr, r0, r7
  409740:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409744:	40fd      	lsrs	r5, r7
  409746:	ea4e 0e04 	orr.w	lr, lr, r4
  40974a:	fbb5 f9fc 	udiv	r9, r5, ip
  40974e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409752:	fb0c 5519 	mls	r5, ip, r9, r5
  409756:	fa1f f883 	uxth.w	r8, r3
  40975a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40975e:	fb09 f408 	mul.w	r4, r9, r8
  409762:	42ac      	cmp	r4, r5
  409764:	fa02 f201 	lsl.w	r2, r2, r1
  409768:	fa00 fa01 	lsl.w	sl, r0, r1
  40976c:	d908      	bls.n	409780 <__udivmoddi4+0x244>
  40976e:	18ed      	adds	r5, r5, r3
  409770:	f109 30ff 	add.w	r0, r9, #4294967295
  409774:	d243      	bcs.n	4097fe <__udivmoddi4+0x2c2>
  409776:	42ac      	cmp	r4, r5
  409778:	d941      	bls.n	4097fe <__udivmoddi4+0x2c2>
  40977a:	f1a9 0902 	sub.w	r9, r9, #2
  40977e:	441d      	add	r5, r3
  409780:	1b2d      	subs	r5, r5, r4
  409782:	fa1f fe8e 	uxth.w	lr, lr
  409786:	fbb5 f0fc 	udiv	r0, r5, ip
  40978a:	fb0c 5510 	mls	r5, ip, r0, r5
  40978e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409792:	fb00 f808 	mul.w	r8, r0, r8
  409796:	45a0      	cmp	r8, r4
  409798:	d907      	bls.n	4097aa <__udivmoddi4+0x26e>
  40979a:	18e4      	adds	r4, r4, r3
  40979c:	f100 35ff 	add.w	r5, r0, #4294967295
  4097a0:	d229      	bcs.n	4097f6 <__udivmoddi4+0x2ba>
  4097a2:	45a0      	cmp	r8, r4
  4097a4:	d927      	bls.n	4097f6 <__udivmoddi4+0x2ba>
  4097a6:	3802      	subs	r0, #2
  4097a8:	441c      	add	r4, r3
  4097aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4097ae:	eba4 0408 	sub.w	r4, r4, r8
  4097b2:	fba0 8902 	umull	r8, r9, r0, r2
  4097b6:	454c      	cmp	r4, r9
  4097b8:	46c6      	mov	lr, r8
  4097ba:	464d      	mov	r5, r9
  4097bc:	d315      	bcc.n	4097ea <__udivmoddi4+0x2ae>
  4097be:	d012      	beq.n	4097e6 <__udivmoddi4+0x2aa>
  4097c0:	b156      	cbz	r6, 4097d8 <__udivmoddi4+0x29c>
  4097c2:	ebba 030e 	subs.w	r3, sl, lr
  4097c6:	eb64 0405 	sbc.w	r4, r4, r5
  4097ca:	fa04 f707 	lsl.w	r7, r4, r7
  4097ce:	40cb      	lsrs	r3, r1
  4097d0:	431f      	orrs	r7, r3
  4097d2:	40cc      	lsrs	r4, r1
  4097d4:	6037      	str	r7, [r6, #0]
  4097d6:	6074      	str	r4, [r6, #4]
  4097d8:	2100      	movs	r1, #0
  4097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097de:	4618      	mov	r0, r3
  4097e0:	e6f8      	b.n	4095d4 <__udivmoddi4+0x98>
  4097e2:	4690      	mov	r8, r2
  4097e4:	e6e0      	b.n	4095a8 <__udivmoddi4+0x6c>
  4097e6:	45c2      	cmp	sl, r8
  4097e8:	d2ea      	bcs.n	4097c0 <__udivmoddi4+0x284>
  4097ea:	ebb8 0e02 	subs.w	lr, r8, r2
  4097ee:	eb69 0503 	sbc.w	r5, r9, r3
  4097f2:	3801      	subs	r0, #1
  4097f4:	e7e4      	b.n	4097c0 <__udivmoddi4+0x284>
  4097f6:	4628      	mov	r0, r5
  4097f8:	e7d7      	b.n	4097aa <__udivmoddi4+0x26e>
  4097fa:	4640      	mov	r0, r8
  4097fc:	e791      	b.n	409722 <__udivmoddi4+0x1e6>
  4097fe:	4681      	mov	r9, r0
  409800:	e7be      	b.n	409780 <__udivmoddi4+0x244>
  409802:	4601      	mov	r1, r0
  409804:	e778      	b.n	4096f8 <__udivmoddi4+0x1bc>
  409806:	3802      	subs	r0, #2
  409808:	443c      	add	r4, r7
  40980a:	e745      	b.n	409698 <__udivmoddi4+0x15c>
  40980c:	4608      	mov	r0, r1
  40980e:	e708      	b.n	409622 <__udivmoddi4+0xe6>
  409810:	f1a8 0802 	sub.w	r8, r8, #2
  409814:	443d      	add	r5, r7
  409816:	e72b      	b.n	409670 <__udivmoddi4+0x134>

00409818 <__aeabi_idiv0>:
  409818:	4770      	bx	lr
  40981a:	bf00      	nop
  40981c:	454c4449 	.word	0x454c4449
  409820:	00000000 	.word	0x00000000
  409824:	51726d54 	.word	0x51726d54
  409828:	00000000 	.word	0x00000000
  40982c:	20726d54 	.word	0x20726d54
  409830:	00637653 	.word	0x00637653

00409834 <__FUNCTION__.11288>:
  409834:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  409844:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  409854:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  409864:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

00409874 <__FUNCTION__.9901>:
  409874:	5f666968 646e6573 00000000              hif_send....

00409880 <__FUNCTION__.9911>:
  409880:	5f666968 00727369                       hif_isr.

00409888 <__FUNCTION__.9917>:
  409888:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00409898 <__FUNCTION__.9932>:
  409898:	5f666968 65636572 00657669              hif_receive.

004098a4 <__FUNCTION__.9947>:
  4098a4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  4098b4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  4098c4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  4098d4:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  4098e4:	73657264 75622073 61662073 000a6c69     dress bus fail..
  4098f4:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  409904:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  409914:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  409924:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  409934:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  409944:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  409954:	61207473 64207070 276e6469 65732074     st app didn't se
  409964:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  409974:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  409984:	66696828 61462029 2065736c 65746e69     (hif) False inte
  409994:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  4099a4:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  4099b4:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  4099c4:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  4099d4:	7075656b 65687420 69686320 00000a70     keup the chip...
  4099e4:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  4099f4:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  409a04:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  409a14:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  409a24:	696c6176 72612064 656d7567 000a746e     valid argument..
  409a34:	20505041 75716552 65747365 69532064     APP Requested Si
  409a44:	6920657a 616c2073 72656772 61687420     ze is larger tha
  409a54:	6874206e 65722065 65766963 75622064     n the recived bu
  409a64:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  409a74:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  409a84:	64412064 73657264 65622073 646e6f79     d Address beyond
  409a94:	65687420 63657220 64657669 66756220      the recived buf
  409aa4:	20726566 72646461 20737365 20646e61     fer address and 
  409ab4:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  409ac4:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  409ad4:	6b617720 74207075 63206568 0a706968      wakup the chip.
  409ae4:	00000000                                ....

00409ae8 <__FUNCTION__.9874>:
  409ae8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00409af4 <__FUNCTION__.9898>:
  409af4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00409b04 <__FUNCTION__.9926>:
  409b04:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  409b14:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  409b24:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  409b34:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  409b44:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  409b54:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  409b64:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  409b74:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  409b84:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  409b94:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  409ba4:	20706557 2079656b 65646e69 64252078     Wep key index %d
  409bb4:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  409bc4:	2079656b 676e656c 25206874 00000a64     key length %d...
  409bd4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  409be4:	656c2079 6874676e 0000000a 65646e75     y length....unde
  409bf4:	656e6966 65732064 79742063 000a6570     fined sec type..
  409c04:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  409c14:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  409c24:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  409c34:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  409c44:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  409c54:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  409c64:	7277616d 65562065 6f697372 00000a6e     mawre Version...

00409c74 <__FUNCTION__.9711>:
  409c74:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00409c84 <__FUNCTION__.9805>:
  409c84:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  409c94:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  409ca4:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  409cb4:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  409cc4:	00000000 6f727245 68772072 20656c69     ....Error while 
  409cd4:	64616572 20676e69 0a676572 00000000     reading reg.....
  409ce4:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  409cf4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  409d04:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  409d14:	20656b61 66207075 656c6961 00000a64     ake up failed...
  409d24:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  409d34:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  409d44:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  409d54:	0000000a                                ....

00409d58 <__FUNCTION__.9792>:
  409d58:	645f6d6e 695f7672 0074696e              nm_drv_init.

00409d64 <__FUNCTION__.9799>:
  409d64:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  409d74:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  409d84:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  409d94:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  409da4:	73616c66 69642068 6c626173 61662065     flash disable fa
  409db4:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  409dc4:	6c696166 696e6920 75622074 00000a73     fail init bus...
  409dd4:	6c696166 74206465 6e65206f 656c6261     failed to enable
  409de4:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  409df4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  409e04:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  409e14:	20444920 0a786c25 00000000               ID %lx.....

00409e20 <__FUNCTION__.9176>:
  409e20:	5f697073 00646d63                       spi_cmd.

00409e28 <__FUNCTION__.9184>:
  409e28:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00409e34 <__FUNCTION__.9200>:
  409e34:	5f697073 61746164 6165725f 00000064     spi_data_read...

00409e44 <__FUNCTION__.9215>:
  409e44:	5f697073 61746164 6972775f 00006574     spi_data_write..

00409e54 <__FUNCTION__.9225>:
  409e54:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00409e64 <__FUNCTION__.9233>:
  409e64:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00409e74 <__FUNCTION__.9242>:
  409e74:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00409e84 <__FUNCTION__.9250>:
  409e84:	735f6d6e 725f6970 00646165              nm_spi_read.

00409e90 <__FUNCTION__.9267>:
  409e90:	735f6d6e 695f6970 0074696e              nm_spi_init.

00409e9c <crc7_syndrome_table>:
  409e9c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  409eac:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  409ebc:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  409ecc:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  409edc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  409eec:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  409efc:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  409f0c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  409f1c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  409f2c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  409f3c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  409f4c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  409f5c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  409f6c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  409f7c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  409f8c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  409f9c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409fac:	6e692064 6e726574 72206c61 20646165     d internal read 
  409fbc:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  409fcc:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  409fdc:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  409fec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409ffc:	6e692064 6e726574 72206c61 20646165     d internal read 
  40a00c:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40a01c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a02c:	6e692064 6e726574 77206c61 65746972     d internal write
  40a03c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40a04c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40a05c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40a06c:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40a07c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a08c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40a09c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40a0ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a0bc:	65722064 6e6f7073 202c6573 64616572     d response, read
  40a0cc:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40a0dc:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40a0ec:	656c6961 6c622064 206b636f 61746164     ailed block data
  40a0fc:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40a10c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a11c:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40a12c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40a13c:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40a14c:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40a15c:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40a16c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40a17c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40a18c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40a19c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40a1ac:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40a1bc:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40a1cc:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40a1dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a1ec:	61642064 62206174 6b636f6c 63726320     d data block crc
  40a1fc:	69727720 202c6574 20737562 6f727265      write, bus erro
  40a20c:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40a21c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40a22c:	61746164 69727720 2e2e6574 00000a2e     data write......
  40a23c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a24c:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40a25c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40a26c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a27c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40a28c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40a29c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a2ac:	61642064 72206174 6f707365 2065736e     d data response 
  40a2bc:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40a2cc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40a2dc:	656c6961 61642064 72206174 6f707365     ailed data respo
  40a2ec:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40a2fc:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40a30c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40a31c:	61657220 62202c64 65207375 726f7272      read, bus error
  40a32c:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40a33c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40a34c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40a35c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40a36c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a37c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40a38c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40a39c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a3ac:	65722064 6e6f7073 202c6573 64616572     d response, read
  40a3bc:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40a3cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a3dc:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40a3ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40a3fc:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40a40c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40a41c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40a42c:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40a43c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40a44c:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40a45c:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  40a46c:	20303035 65696c63 6520746e 706d6178     500 client examp
  40a47c:	2d20656c 2d0a0d2d 4153202d 3037454d     le --..-- SAME70
  40a48c:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  40a49c:	656c6970 4e203a64 3220766f 30322038     piled: Nov 28 20
  40a4ac:	31203232 35323a37 2031343a 0a0d2d2d     22 17:25:41 --..
  40a4bc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40a4cc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40a4dc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00000a0d     ------------....
  40a4ec:	6c696146 74206465 7263206f 65746165     Failed to create
  40a4fc:	74754220 65732031 6870616d 0a65726f      But1 semaphore.
  40a50c:	00000000 69666957 00000000 636f7270     ....Wifi....proc
  40a51c:	00737365 6f736572 5f65766c 203a6263     ess.resolve_cb: 
  40a52c:	49207325 64612050 73657264 73692073     %s IP address is
  40a53c:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
  40a54c:	00000000 6b636f73 6d5f7465 635f6773     ....socket_msg_c
  40a55c:	656e6e6f 000a7463 6b636f73 635f7465     onnect..socket_c
  40a56c:	63203a62 656e6e6f 6f207463 000a206b     b: connect ok ..
  40a57c:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
  40a58c:	65207463 726f7272 000a0d21 6b736174     ct error!...task
  40a59c:	6f727020 73736563 65726320 64657461      process created
  40a5ac:	00000a20 54415453 57203a45 20544941      ...STATE: WAIT 
  40a5bc:	0000000a 54415453 47203a45 0a205445     ....STATE: GET .
  40a5cc:	00000000 20544547 6174732f 20737574     ....GET /status 
  40a5dc:	50545448 312e312f 41200a0d 70656363     HTTP/1.1.. Accep
  40a5ec:	2a203a74 0a0d2a2f 00000a0d 54415453     t: */*......STAT
  40a5fc:	41203a45 0a204b43 00000000 54415453     E: ACK .....STAT
  40a60c:	4d203a45 0a204753 00000000 64656c22     E: MSG ....."led
  40a61c:	22203a22 00000000 54415453 44203a45     ": "....STATE: D
  40a62c:	20454e4f 0000000a 74747542 31206e6f     ONE ....Button 1
  40a63c:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
  40a64c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
  40a65c:	2821726f 0d296425 0000000a 6963754c     or!(%d).....Luci
  40a66c:	00007375 6e69616d 6f63203a 63656e6e     us..main: connec
  40a67c:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
  40a68c:	2e2e7325 000a0d2e 395d3132 3377345a     %s......21]9Z4w3
  40a69c:	00000000 2e323931 2e383631 34312e30     ....192.168.0.14
  40a6ac:	00000000 6b636f73 69207465 2074696e     ....socket init 
  40a6bc:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40a6cc:	206f7420 61657263 54206574 63205043      to create TCP c
  40a6dc:	6e65696c 6f732074 74656b63 72726520     lient socket err
  40a6ec:	0d21726f 0000000a 6b636f73 63207465     or!.....socket c
  40a6fc:	656e6e6f 6e697463 00000a67 6e69616d     onnecting...main
  40a70c:	7265203a 20726f72 6e6e6f63 20746365     : error connect 
  40a71c:	73206f74 656b636f 00000a74 63617473     to socket...stac
  40a72c:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40a73c:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40a74c:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  40a75c:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40a76c:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  40a77c:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  40a78c:	20504920 72646461 20737365 25207369      IP address is %
  40a79c:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  40a7ac:	6b636f73 635f7465 59203a62 3a726165     socket_cb: Year:
  40a7bc:	2c642520 6e6f4d20 203a6874 202c6425      %d, Month: %d, 
  40a7cc:	20656854 20544d47 656d6974 20736920     The GMT time is 
  40a7dc:	253a7525 3a753230 75323025 00000a0d     %u:%02u:%02u....

0040a7ec <_global_impure_ptr>:
  40a7ec:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  40a7fc:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a80c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a81c:	0000296c                                l)..

0040a820 <blanks.7217>:
  40a820:	20202020 20202020 20202020 20202020                     

0040a830 <zeroes.7218>:
  40a830:	30303030 30303030 30303030 30303030     0000000000000000
  40a840:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040a850 <_ctype_>:
  40a850:	20202000 20202020 28282020 20282828     .         ((((( 
  40a860:	20202020 20202020 20202020 20202020                     
  40a870:	10108820 10101010 10101010 10101010      ...............
  40a880:	04040410 04040404 10040404 10101010     ................
  40a890:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a8a0:	01010101 01010101 01010101 10101010     ................
  40a8b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a8c0:	02020202 02020202 02020202 10101010     ................
  40a8d0:	00000020 00000000 00000000 00000000      ...............
	...

0040a954 <_init>:
  40a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a956:	bf00      	nop
  40a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a95a:	bc08      	pop	{r3}
  40a95c:	469e      	mov	lr, r3
  40a95e:	4770      	bx	lr

0040a960 <__init_array_start>:
  40a960:	00407a81 	.word	0x00407a81

0040a964 <__frame_dummy_init_array_entry>:
  40a964:	00400165                                e.@.

0040a968 <_fini>:
  40a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a96a:	bf00      	nop
  40a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a96e:	bc08      	pop	{r3}
  40a970:	469e      	mov	lr, r3
  40a972:	4770      	bx	lr

0040a974 <__fini_array_start>:
  40a974:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	d02c 2040                                   ,.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	9275 0040 8a79 0040 0000 0000 a850 0040     u.@.y.@.....P.@.
20400544:	a84c 0040 a54c 0040 a54c 0040 a54c 0040     L.@.L.@.L.@.L.@.
20400554:	a54c 0040 a54c 0040 a54c 0040 a54c 0040     L.@.L.@.L.@.L.@.
20400564:	a54c 0040 a54c 0040 ffff ffff ffff ffff     L.@.L.@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
